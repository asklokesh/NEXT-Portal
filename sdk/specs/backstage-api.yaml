openapi: 3.0.3
info:
  title: Backstage Developer Portal API
  description: Comprehensive API for the Backstage-based SaaS Developer Portal
  version: 1.0.0
  contact:
    name: Backstage Team
    email: support@backstage-idp.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:4400/api
    description: Development server
  - url: https://portal.company.com/api
    description: Production server

security:
  - bearerAuth: []
  - apiKey: []

paths:
  /health:
    get:
      summary: Get system health status
      description: Returns comprehensive health information for all services
      operationId: getHealth
      tags:
        - System
      parameters:
        - name: verbose
          in: query
          description: Include detailed service information
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Health check results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'

  /tenants:
    get:
      summary: Get tenant information
      description: Retrieve current tenant info or list user's tenants
      operationId: getTenants
      tags:
        - Tenants
      parameters:
        - name: action
          in: query
          description: Action to perform
          required: false
          schema:
            type: string
            enum: [current, list, analytics]
            default: current
        - name: days
          in: query
          description: Number of days for analytics (when action=analytics)
          required: false
          schema:
            type: integer
            default: 30
      responses:
        '200':
          description: Tenant information
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CurrentTenant'
                  - $ref: '#/components/schemas/TenantList'
                  - $ref: '#/components/schemas/TenantAnalytics'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      summary: Create tenant or perform tenant action
      description: Create new tenant or perform administrative actions
      operationId: createTenant
      tags:
        - Tenants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantRequest'
      responses:
        '201':
          description: Tenant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /plugins:
    get:
      summary: List available plugins
      description: Get list of available Backstage plugins from registry
      operationId: listPlugins
      tags:
        - Plugins
      parameters:
        - name: search
          in: query
          description: Search query for plugins
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Filter by plugin category
          required: false
          schema:
            type: string
            default: all
        - name: limit
          in: query
          description: Maximum number of results
          required: false
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          description: Pagination offset
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of plugins
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginList'

    post:
      summary: Install plugin
      description: Install a new plugin to the tenant
      operationId: installPlugin
      tags:
        - Plugins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginInstallRequest'
      responses:
        '201':
          description: Plugin installed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginInstallResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /plugins/{pluginId}:
    get:
      summary: Get plugin details
      description: Get detailed information about a specific plugin
      operationId: getPlugin
      tags:
        - Plugins
      parameters:
        - name: pluginId
          in: path
          required: true
          description: Plugin identifier
          schema:
            type: string
      responses:
        '200':
          description: Plugin details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Uninstall plugin
      description: Remove plugin from tenant
      operationId: uninstallPlugin
      tags:
        - Plugins
      parameters:
        - name: pluginId
          in: path
          required: true
          description: Plugin identifier
          schema:
            type: string
      responses:
        '204':
          description: Plugin uninstalled successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /workflows:
    get:
      summary: List workflows
      description: Get list of available workflows
      operationId: listWorkflows
      tags:
        - Workflows
      parameters:
        - name: status
          in: query
          description: Filter by workflow status
          required: false
          schema:
            type: string
            enum: [running, completed, failed, pending]
        - name: limit
          in: query
          description: Maximum number of results
          required: false
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: List of workflows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowList'

    post:
      summary: Create workflow
      description: Create a new workflow
      operationId: createWorkflow
      tags:
        - Workflows
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowRequest'
      responses:
        '201':
          description: Workflow created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'

  /workflows/{workflowId}:
    get:
      summary: Get workflow details
      description: Get detailed information about a workflow
      operationId: getWorkflow
      tags:
        - Workflows
      parameters:
        - name: workflowId
          in: path
          required: true
          description: Workflow identifier
          schema:
            type: string
      responses:
        '200':
          description: Workflow details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update workflow
      description: Update workflow configuration
      operationId: updateWorkflow
      tags:
        - Workflows
      parameters:
        - name: workflowId
          in: path
          required: true
          description: Workflow identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowRequest'
      responses:
        '200':
          description: Workflow updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'

  /workflows/{workflowId}/execute:
    post:
      summary: Execute workflow
      description: Trigger workflow execution
      operationId: executeWorkflow
      tags:
        - Workflows
      parameters:
        - name: workflowId
          in: path
          required: true
          description: Workflow identifier
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowExecutionRequest'
      responses:
        '202':
          description: Workflow execution started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowExecution'

  /metrics:
    get:
      summary: Get system metrics
      description: Retrieve system performance metrics
      operationId: getMetrics
      tags:
        - Monitoring
      parameters:
        - name: timerange
          in: query
          description: Time range for metrics
          required: false
          schema:
            type: string
            enum: [1h, 24h, 7d, 30d]
            default: 1h
        - name: format
          in: query
          description: Response format
          required: false
          schema:
            type: string
            enum: [json, prometheus]
            default: json
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'
            text/plain:
              schema:
                type: string
                description: Prometheus format metrics

  /notifications:
    get:
      summary: Get notifications
      description: Retrieve user notifications
      operationId: getNotifications
      tags:
        - Notifications
      parameters:
        - name: unread_only
          in: query
          description: Only return unread notifications
          required: false
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          description: Maximum number of results
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationList'

    post:
      summary: Create notification
      description: Send a new notification
      operationId: createNotification
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '201':
          description: Notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'

  /search:
    get:
      summary: Global search
      description: Search across all portal resources
      operationId: search
      tags:
        - Search
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
        - name: type
          in: query
          description: Filter by resource type
          required: false
          schema:
            type: string
            enum: [plugin, workflow, service, documentation]
        - name: limit
          in: query
          description: Maximum number of results
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    HealthCheck:
      type: object
      required:
        - status
        - timestamp
        - version
        - uptime
        - services
      properties:
        status:
          type: string
          enum: [ok, degraded, error]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        uptime:
          type: integer
          description: Uptime in seconds
        services:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/ServiceHealth'
            backstage:
              $ref: '#/components/schemas/ServiceHealth'
            cache:
              $ref: '#/components/schemas/ServiceHealth'
            memory:
              $ref: '#/components/schemas/ServiceHealth'
        environment:
          type: object
          additionalProperties: true

    ServiceHealth:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum: [ok, degraded, error]
        message:
          type: string
        responseTime:
          type: integer
          description: Response time in milliseconds
        details:
          type: object
          additionalProperties: true

    CurrentTenant:
      type: object
      required:
        - tenant
      properties:
        tenant:
          $ref: '#/components/schemas/Tenant'
        userRole:
          type: string
        isOwner:
          type: boolean

    TenantList:
      type: object
      required:
        - tenants
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/Tenant'

    TenantAnalytics:
      type: object
      required:
        - analytics
      properties:
        analytics:
          type: object
          properties:
            userCount:
              type: integer
            pluginCount:
              type: integer
            workflowCount:
              type: integer
            apiRequests:
              type: integer
            storageUsed:
              type: integer
            period:
              type: string

    Tenant:
      type: object
      required:
        - id
        - name
        - domain
        - status
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        domain:
          type: string
        status:
          type: string
          enum: [active, suspended, pending]
        settings:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TenantRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum: [create, update, suspend, activate]
        name:
          type: string
        domain:
          type: string
        settings:
          type: object
          additionalProperties: true

    Plugin:
      type: object
      required:
        - id
        - name
        - version
        - status
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        description:
          type: string
        author:
          type: string
        category:
          type: string
        status:
          type: string
          enum: [available, installed, deprecated]
        dependencies:
          type: array
          items:
            type: string
        config:
          type: object
          additionalProperties: true
        metadata:
          type: object
          additionalProperties: true
        installDate:
          type: string
          format: date-time

    PluginList:
      type: object
      required:
        - plugins
        - total
      properties:
        plugins:
          type: array
          items:
            $ref: '#/components/schemas/Plugin'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    PluginInstallRequest:
      type: object
      required:
        - pluginId
      properties:
        pluginId:
          type: string
        version:
          type: string
        config:
          type: object
          additionalProperties: true

    PluginInstallResponse:
      type: object
      required:
        - success
        - pluginId
      properties:
        success:
          type: boolean
        pluginId:
          type: string
        installationId:
          type: string
        status:
          type: string

    Workflow:
      type: object
      required:
        - id
        - name
        - status
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [running, completed, failed, pending]
        config:
          type: object
          additionalProperties: true
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowStep'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    WorkflowStep:
      type: object
      required:
        - id
        - name
        - type
        - status
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        config:
          type: object
          additionalProperties: true
        output:
          type: object
          additionalProperties: true

    WorkflowList:
      type: object
      required:
        - workflows
        - total
      properties:
        workflows:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
        total:
          type: integer

    WorkflowRequest:
      type: object
      required:
        - name
        - steps
      properties:
        name:
          type: string
        description:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowStep'
        config:
          type: object
          additionalProperties: true

    WorkflowExecution:
      type: object
      required:
        - executionId
        - workflowId
        - status
        - startedAt
      properties:
        executionId:
          type: string
          format: uuid
        workflowId:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        result:
          type: object
          additionalProperties: true

    WorkflowExecutionRequest:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties: true

    Metrics:
      type: object
      required:
        - timestamp
        - timerange
        - data
      properties:
        timestamp:
          type: string
          format: date-time
        timerange:
          type: string
        data:
          type: object
          properties:
            system:
              $ref: '#/components/schemas/SystemMetrics'
            performance:
              $ref: '#/components/schemas/PerformanceMetrics'
            usage:
              $ref: '#/components/schemas/UsageMetrics'

    SystemMetrics:
      type: object
      properties:
        cpu:
          type: number
          format: float
        memory:
          type: number
          format: float
        disk:
          type: number
          format: float
        uptime:
          type: integer

    PerformanceMetrics:
      type: object
      properties:
        averageResponseTime:
          type: number
          format: float
        requestsPerSecond:
          type: number
          format: float
        errorRate:
          type: number
          format: float

    UsageMetrics:
      type: object
      properties:
        activeUsers:
          type: integer
        apiCalls:
          type: integer
        pluginsInstalled:
          type: integer
        workflowsExecuted:
          type: integer

    Notification:
      type: object
      required:
        - id
        - title
        - message
        - type
        - createdAt
        - read
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        message:
          type: string
        type:
          type: string
          enum: [info, warning, error, success]
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true

    NotificationList:
      type: object
      required:
        - notifications
        - total
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        total:
          type: integer
        unreadCount:
          type: integer

    NotificationRequest:
      type: object
      required:
        - title
        - message
        - type
      properties:
        title:
          type: string
        message:
          type: string
        type:
          type: string
          enum: [info, warning, error, success]
        recipientId:
          type: string
        metadata:
          type: object
          additionalProperties: true

    SearchResults:
      type: object
      required:
        - results
        - total
        - query
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        total:
          type: integer
        query:
          type: string
        took:
          type: integer
          description: Search time in milliseconds

    SearchResult:
      type: object
      required:
        - id
        - title
        - type
        - score
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
        url:
          type: string
        score:
          type: number
          format: float
        metadata:
          type: object
          additionalProperties: true

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: integer
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: System
    description: System health and status operations
  - name: Tenants
    description: Multi-tenant management
  - name: Plugins
    description: Plugin management and installation
  - name: Workflows
    description: Workflow creation and execution
  - name: Monitoring
    description: System monitoring and metrics
  - name: Notifications
    description: Notification management
  - name: Search
    description: Global search functionality