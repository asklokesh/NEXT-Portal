#!/bin/bash # Comprehensive Test Runner Script # Runs all test suites and generates coverage reports set -e echo "==========================================" echo "NEXT Portal - Comprehensive Test Suite" echo "==========================================" echo "" # Colors for output RED='\033[0;31m' GREEN='\033[0;32m' YELLOW='\033[1;33m' NC='\033[0m' # No Color # Test results tracking TOTAL_TESTS=0 PASSED_TESTS=0 FAILED_TESTS=0 # Function to run test suite run_test_suite() { local suite_name=$1 local test_command=$2 echo -e "${YELLOW}Running $suite_name...${NC}" if eval $test_command; then echo -e "${GREEN} $suite_name passed${NC}" ((PASSED_TESTS++)) else echo -e "${RED} $suite_name failed${NC}" ((FAILED_TESTS++)) fi ((TOTAL_TESTS++)) echo "" } # Create test results directory mkdir -p coverage mkdir -p test-results echo "Starting test execution..." echo "Target: 50% coverage minimum" echo "" # 1. Unit Tests echo "==========================================" echo "1. UNIT TESTS" echo "==========================================" run_test_suite "Authentication Tests" "npm run test -- src/__tests__/unit/auth/authentication.test.ts --coverage" run_test_suite "Component Tests" "npm run test -- src/components/**/*.test.tsx --coverage" run_test_suite "Hook Tests" "npm run test -- src/hooks/**/*.test.ts --coverage" run_test_suite "Service Tests" "npm run test -- src/services/**/*.test.ts --coverage" run_test_suite "Utility Tests" "npm run test -- src/utils/**/*.test.ts --coverage" # 2. Integration Tests echo "==========================================" echo "2. INTEGRATION TESTS" echo "==========================================" run_test_suite "API Route Tests" "npm run test -- src/__tests__/integration/api/*.test.ts --coverage" run_test_suite "WebSocket Tests" "npm run test -- src/__tests__/integration/websocket/*.test.ts --coverage" run_test_suite "Database Tests" "npm run test -- src/lib/db/**/*.test.ts --coverage" # 3. E2E Tests echo "==========================================" echo "3. END-TO-END TESTS" echo "==========================================" echo "Starting test environment..." npm run build npm run start & SERVER_PID=$! sleep 10 run_test_suite "Login Flow E2E" "npx playwright test tests/e2e/login-flow.spec.ts" run_test_suite "Service Catalog E2E" "npx playwright test tests/e2e/service-catalog-crud.spec.ts" run_test_suite "Template Execution E2E" "npx playwright test tests/e2e/template-execution.spec.ts" run_test_suite "Dashboard E2E" "npx playwright test tests/e2e/dashboard.spec.ts" # Stop test server kill $SERVER_PID 2>/dev/null || true # 4. Visual Regression Tests echo "==========================================" echo "4. VISUAL REGRESSION TESTS" echo "==========================================" run_test_suite "Dashboard Visual Tests" "npx playwright test tests/visual/dashboard-snapshots.spec.ts" run_test_suite "Component Visual Tests" "npx playwright test tests/visual/component-snapshots.spec.ts" # 5. Accessibility Tests echo "==========================================" echo "5. ACCESSIBILITY TESTS" echo "==========================================" run_test_suite "WCAG Compliance" "npx playwright test tests/accessibility/wcag-compliance.spec.ts" run_test_suite "Keyboard Navigation" "npx playwright test tests/accessibility/keyboard-navigation.spec.ts" # 6. Performance Tests echo "==========================================" echo "6. PERFORMANCE TESTS" echo "==========================================" run_test_suite "Dashboard Load Performance" "k6 run tests/performance/load-tests/dashboard-loading.js" run_test_suite "API Endpoint Performance" "k6 run tests/performance/load-tests/api-endpoints.js" # 7. Security Tests echo "==========================================" echo "7. SECURITY TESTS" echo "==========================================" run_test_suite "Authorization Tests" "npm run test -- src/__tests__/security/authorization.test.ts --coverage" run_test_suite "Input Validation Tests" "npm run test -- src/__tests__/security/input-validation.test.ts --coverage" # Generate combined coverage report echo "==========================================" echo "GENERATING COVERAGE REPORT" echo "==========================================" npx nyc report --reporter=html --reporter=text --reporter=lcov # Calculate total coverage COVERAGE=$(npx nyc report --reporter=text-summary | grep "Statements" | awk '{print $3}' | sed 's/%//') echo "" echo "==========================================" echo "TEST RESULTS SUMMARY" echo "==========================================" echo "Total Test Suites: $TOTAL_TESTS" echo -e "Passed: ${GREEN}$PASSED_TESTS${NC}" echo -e "Failed: ${RED}$FAILED_TESTS${NC}" echo "" echo "Code Coverage: ${COVERAGE}%" if (( $(echo "$COVERAGE >= 50" | bc -l) )); then echo -e "${GREEN} Target coverage of 50% achieved!${NC}" else echo -e "${YELLOW} Coverage is below 50% target${NC}" fi echo "" echo "Coverage Report: coverage/index.html" echo "Test Results: test-results/" echo "" # Exit with appropriate code if [ $FAILED_TESTS -eq 0 ] && (( $(echo "$COVERAGE >= 50" | bc -l) )); then echo -e "${GREEN} All tests passed and coverage target met!${NC}" exit 0 else echo -e "${RED} Some tests failed or coverage target not met${NC}" exit 1 fi