# Multi-Environment Production Deployment
# Enterprise-grade Kubernetes deployment with auto-scaling and high availability

---
# Production Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: saas-idp-production
  labels:
    name: saas-idp-production
    environment: production
    security.istio.io/tlsMode: istio
  annotations:
    linkerd.io/inject: enabled

---
# Staging Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: saas-idp-staging
  labels:
    name: saas-idp-staging
    environment: staging
    security.istio.io/tlsMode: istio
  annotations:
    linkerd.io/inject: enabled

---
# Production ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: saas-idp-config
  namespace: saas-idp-production
data:
  NODE_ENV: "production"
  DATABASE_URL: "postgresql://saas_idp:${POSTGRES_PASSWORD}@postgresql-primary.database.svc.cluster.local:5432/saas_idp_production"
  REDIS_URL: "redis://redis-master.cache.svc.cluster.local:6379"
  NEXTAUTH_URL: "https://app.saas-idp.company.com"
  BACKSTAGE_BACKEND_URL: "http://backstage-backend.saas-idp-production.svc.cluster.local:7007"
  ENABLE_TELEMETRY: "true"
  LOG_LEVEL: "info"
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "true"
  CACHE_ENABLED: "true"
  RATE_LIMITING_ENABLED: "true"
  MAX_CONCURRENT_USERS: "10000"
  SESSION_TIMEOUT: "3600"
  API_TIMEOUT: "30000"
  WEBSOCKET_TIMEOUT: "60000"
  PLUGIN_CACHE_TTL: "3600"
  HEALTH_CHECK_INTERVAL: "10"

---
# Production Secrets
apiVersion: v1
kind: Secret
metadata:
  name: saas-idp-secrets
  namespace: saas-idp-production
type: Opaque
stringData:
  NEXTAUTH_SECRET: "your-nextauth-secret-production"
  JWT_SECRET: "your-jwt-secret-production"
  ENCRYPTION_KEY: "your-32-char-encryption-key-prod"
  POSTGRES_PASSWORD: "your-postgres-password"
  REDIS_PASSWORD: "your-redis-password"
  GITHUB_CLIENT_SECRET: "your-github-client-secret"
  BACKSTAGE_BACKEND_SECRET: "your-backstage-secret"

---
# Production Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: saas-idp
  namespace: saas-idp-production
  labels:
    app: saas-idp
    version: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    fluxcd.io/automated: "true"
spec:
  replicas: 6  # Minimum replicas for production
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: saas-idp
      environment: production
  template:
    metadata:
      labels:
        app: saas-idp
        version: production
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-cpu-limit: "1"
        config.linkerd.io/proxy-cpu-request: "0.1"
        config.linkerd.io/proxy-memory-limit: "250Mi"
        config.linkerd.io/proxy-memory-request: "20Mi"
    spec:
      serviceAccountName: saas-idp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - saas-idp
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node.kubernetes.io/lifecycle
                operator: NotIn
                values:
                - spot
      tolerations:
      - key: "production-only"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      initContainers:
      - name: database-migration
        image: registry.company.com/saas-idp:latest
        command: ["npm", "run", "db:migrate"]
        envFrom:
        - configMapRef:
            name: saas-idp-config
        - secretRef:
            name: saas-idp-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      containers:
      - name: saas-idp
        image: registry.company.com/saas-idp:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: health
          containerPort: 8080
          protocol: TCP
        envFrom:
        - configMapRef:
            name: saas-idp-config
        - secretRef:
            name: saas-idp-secrets
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "10Gi"
          limits:
            memory: "8Gi"
            cpu: "4000m"
            ephemeral-storage: "20Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
            httpHeaders:
            - name: X-Health-Check
              value: "liveness"
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
            httpHeaders:
            - name: X-Health-Check
              value: "readiness"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/.next/cache
        - name: uploads-volume
          mountPath: /app/uploads
        - name: logs-volume
          mountPath: /app/logs
      - name: istio-proxy
        image: istio/proxyv2:latest
        securityContext:
          runAsUser: 1337
          runAsGroup: 1337
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir:
          sizeLimit: 5Gi
      - name: uploads-volume
        persistentVolumeClaim:
          claimName: saas-idp-uploads-pvc
      - name: logs-volume
        emptyDir:
          sizeLimit: 1Gi
      imagePullSecrets:
      - name: registry-credentials

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: saas-idp-hpa
  namespace: saas-idp-production
  labels:
    app: saas-idp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: saas-idp
  minReplicas: 6
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  - type: External
    external:
      metric:
        name: queue_messages_ready
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 5
        periodSeconds: 60
      selectPolicy: Max

---
# Vertical Pod Autoscaler
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: saas-idp-vpa
  namespace: saas-idp-production
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: saas-idp
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: saas-idp
      minAllowed:
        cpu: "1000m"
        memory: "2Gi"
      maxAllowed:
        cpu: "8000m"
        memory: "16Gi"
      controlledResources: ["cpu", "memory"]

---
# Production Service
apiVersion: v1
kind: Service
metadata:
  name: saas-idp
  namespace: saas-idp-production
  labels:
    app: saas-idp
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: https
    port: 443
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: saas-idp
    environment: production
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

---
# PersistentVolumeClaim for uploads
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: saas-idp-uploads-pvc
  namespace: saas-idp-production
  labels:
    app: saas-idp
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: efs-sc

---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: saas-idp-service-account
  namespace: saas-idp-production
  labels:
    app: saas-idp
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/saas-idp-pod-role

---
# RBAC Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: saas-idp-production
  name: saas-idp-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# RBAC RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: saas-idp-rolebinding
  namespace: saas-idp-production
subjects:
- kind: ServiceAccount
  name: saas-idp-service-account
  namespace: saas-idp-production
roleRef:
  kind: Role
  name: saas-idp-role
  apiGroup: rbac.authorization.k8s.io

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: saas-idp-pdb
  namespace: saas-idp-production
  labels:
    app: saas-idp
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: saas-idp
      environment: production

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: saas-idp-network-policy
  namespace: saas-idp-production
  labels:
    app: saas-idp
spec:
  podSelector:
    matchLabels:
      app: saas-idp
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: saas-idp
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9090
  - from: []
    ports:
    - protocol: TCP
      port: 8080  # Health checks
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound
    - protocol: TCP
      port: 80   # HTTP outbound

---
# Istio VirtualService
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: saas-idp-vs
  namespace: saas-idp-production
  labels:
    app: saas-idp
spec:
  hosts:
  - app.saas-idp.company.com
  gateways:
  - saas-idp-gateway
  http:
  - match:
    - uri:
        prefix: "/api/health"
    route:
    - destination:
        host: saas-idp.saas-idp-production.svc.cluster.local
        port:
          number: 80
    timeout: 5s
    retries:
      attempts: 3
      perTryTimeout: 2s
  - match:
    - uri:
        prefix: "/api/"
    route:
    - destination:
        host: saas-idp.saas-idp-production.svc.cluster.local
        port:
          number: 80
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
    fault:
      delay:
        percentage:
          value: 0.1
        fixedDelay: 5ms
  - match:
    - uri:
        prefix: "/"
    route:
    - destination:
        host: saas-idp.saas-idp-production.svc.cluster.local
        port:
          number: 80
    timeout: 60s

---
# Istio DestinationRule
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: saas-idp-dr
  namespace: saas-idp-production
  labels:
    app: saas-idp
spec:
  host: saas-idp.saas-idp-production.svc.cluster.local
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 2
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
        minHealthPercent: 30
    loadBalancer:
      simple: LEAST_CONN
    outlierDetection:
      consecutiveGatewayErrors: 3
      consecutive5xxErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 20
      minHealthPercent: 70
  portLevelSettings:
  - port:
      number: 80
    connectionPool:
      tcp:
        maxConnections: 50
      http:
        http1MaxPendingRequests: 25
        maxRequestsPerConnection: 1

---
# Staging Environment (Simplified)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: saas-idp
  namespace: saas-idp-staging
  labels:
    app: saas-idp
    version: staging
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
  selector:
    matchLabels:
      app: saas-idp
      environment: staging
  template:
    metadata:
      labels:
        app: saas-idp
        version: staging
        environment: staging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: saas-idp-service-account-staging
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: saas-idp
        image: registry.company.com/saas-idp:staging
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: saas-idp-staging-config
        - secretRef:
            name: saas-idp-staging-secrets
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 5

---
# Staging HPA (More aggressive scaling for testing)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: saas-idp-hpa
  namespace: saas-idp-staging
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: saas-idp
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 60
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 25
        periodSeconds: 30
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30