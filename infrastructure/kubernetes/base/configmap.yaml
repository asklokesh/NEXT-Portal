apiVersion: v1
kind: ConfigMap
metadata:
  name: portal-config
  namespace: developer-portal
data:
  # Application Configuration
  NODE_ENV: "production"
  PORT: "4400"
  LOG_LEVEL: "info"
  
  # Feature Flags
  ENABLE_ANALYTICS: "true"
  ENABLE_COST_TRACKING: "true"
  ENABLE_KUBERNETES_PLUGIN: "true"
  ENABLE_TECH_RADAR: "true"
  ENABLE_TEMPLATES: "true"
  
  # Cache Configuration
  CACHE_TTL: "3600"
  CACHE_MAX_SIZE: "1000"
  
  # Rate Limiting
  RATE_LIMIT_WINDOW: "60000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  
  # Session Configuration
  SESSION_TIMEOUT: "86400"
  SESSION_EXTEND_ON_ACTIVITY: "true"
  
  # CORS Configuration
  CORS_ALLOWED_ORIGINS: "https://portal.example.com,https://api.portal.example.com"
  
  # Monitoring
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "true"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backstage-config
  namespace: developer-portal
data:
  app-config.production.yaml: |
    app:
      title: NEXT Developer Portal
      baseUrl: https://portal.example.com
      support:
        url: https://github.com/orgs/example/discussions
        items:
          - title: Issues
            icon: github
            links:
              - url: https://github.com/example/developer-portal/issues
                title: GitHub Issues
    
    organization:
      name: Example Corp
    
    backend:
      baseUrl: https://api.portal.example.com
      listen:
        port: 7007
      cors:
        origin: https://portal.example.com
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
        credentials: true
      database:
        client: pg
        connection:
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          database: ${POSTGRES_DB}
          ssl:
            rejectUnauthorized: false
            ca: ${POSTGRES_CA_CERT}
      cache:
        store: redis
        connection:
          host: ${REDIS_HOST}
          port: ${REDIS_PORT}
          password: ${REDIS_PASSWORD}
      reading:
        allow:
          - host: github.com
          - host: gitlab.com
          - host: bitbucket.org
    
    integrations:
      github:
        - host: github.com
          apps:
            - appId: ${GITHUB_APP_ID}
              clientId: ${GITHUB_CLIENT_ID}
              clientSecret: ${GITHUB_CLIENT_SECRET}
              webhookSecret: ${GITHUB_WEBHOOK_SECRET}
              privateKey: ${GITHUB_PRIVATE_KEY}
      gitlab:
        - host: gitlab.com
          token: ${GITLAB_TOKEN}
      bitbucket:
        - host: bitbucket.org
          username: ${BITBUCKET_USERNAME}
          appPassword: ${BITBUCKET_APP_PASSWORD}
    
    proxy:
      endpoints:
        '/kubernetes':
          target: ${KUBERNETES_API_SERVER}
          headers:
            Authorization: Bearer ${KUBERNETES_TOKEN}
        '/prometheus':
          target: ${PROMETHEUS_SERVER}
        '/grafana':
          target: ${GRAFANA_SERVER}
    
    auth:
      environment: production
      session:
        secret: ${SESSION_SECRET}
      providers:
        github:
          production:
            clientId: ${GITHUB_CLIENT_ID}
            clientSecret: ${GITHUB_CLIENT_SECRET}
        google:
          production:
            clientId: ${GOOGLE_CLIENT_ID}
            clientSecret: ${GOOGLE_CLIENT_SECRET}
        saml:
          entryPoint: ${SAML_ENTRY_POINT}
          issuer: ${SAML_ISSUER}
          cert: ${SAML_CERT}
    
    catalog:
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
        - allow: [Component, System, API, Resource, Location, Template]
      locations:
        - type: url
          target: https://github.com/example/software-catalog/blob/main/catalog-info.yaml
      providers:
        github:
          organization:
            catalogPath: /catalog-info.yaml
            filters:
              branch: main
              repository: .*
            schedule:
              frequency: { minutes: 30 }
              timeout: { minutes: 10 }
    
    scaffolder:
      defaultAuthor:
        name: Developer Portal
        email: portal@example.com
      defaultCommitMessage: "Initial commit from Developer Portal template"
    
    kubernetes:
      serviceLocatorMethod:
        type: multiTenant
      clusterLocatorMethods:
        - type: config
          clusters:
            - name: production
              url: ${KUBERNETES_API_SERVER}
              authProvider: serviceAccount
              serviceAccountToken: ${KUBERNETES_TOKEN}
              caData: ${KUBERNETES_CA_CERT}
            - name: staging
              url: ${KUBERNETES_STAGING_API_SERVER}
              authProvider: serviceAccount
              serviceAccountToken: ${KUBERNETES_STAGING_TOKEN}
              caData: ${KUBERNETES_STAGING_CA_CERT}
    
    techdocs:
      builder: external
      generator:
        runIn: docker
      publisher:
        type: awsS3
        awsS3:
          bucketName: ${TECHDOCS_BUCKET}
          region: ${AWS_REGION}
          credentials:
            accessKeyId: ${AWS_ACCESS_KEY_ID}
            secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
    
    costInsights:
      engineerCost: 200000
      products:
        computeEngine:
          name: Compute Engine
          icon: compute
        cloudDataflow:
          name: Cloud Dataflow
          icon: dataflow
        cloudStorage:
          name: Cloud Storage
          icon: storage
        bigQuery:
          name: BigQuery
          icon: bigquery
      metrics:
        DAU:
          name: Daily Active Users
          default: true
        MSC:
          name: Monthly Subscribers