# Enterprise Compliance Framework
# SOC2, GDPR, HIPAA compliance validation and monitoring

---
# Compliance Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: compliance-config
  namespace: compliance-monitoring
data:
  compliance-frameworks: "SOC2,GDPR,HIPAA,ISO27001,PCI-DSS"
  audit-log-retention: "7y"  # 7 years for compliance
  encryption-standards: "AES-256,RSA-4096"
  data-classification-levels: "PUBLIC,INTERNAL,CONFIDENTIAL,RESTRICTED"
  privacy-impact-assessment: "required"
  breach-notification-time: "72h"  # GDPR requirement
  access-review-frequency: "quarterly"
  vulnerability-scan-frequency: "weekly"
  penetration-test-frequency: "annually"

---
# SOC2 Compliance Monitoring
apiVersion: v1
kind: ConfigMap
metadata:
  name: soc2-controls
  namespace: compliance-monitoring
data:
  # SOC2 Trust Service Criteria
  security-controls: |
    CC6.1: Logical and physical access controls
    CC6.2: System access is restricted to authorized users
    CC6.3: Network communications are protected
    CC6.6: Vulnerabilities are identified and addressed
    CC6.7: System boundaries and data flow are defined
    CC6.8: System changes are authorized and tested
    CC7.1: Threat identification and assessment
    CC7.2: System monitoring and incident response
    CC7.3: Backup and recovery procedures
    CC7.4: Business continuity and disaster recovery

  availability-controls: |
    A1.1: System availability is maintained
    A1.2: System capacity is monitored and planned
    A1.3: System incidents are managed effectively

  processing-integrity-controls: |
    PI1.1: System processing is complete and accurate
    PI1.2: System processing is authorized
    PI1.3: System processing is valid

  confidentiality-controls: |
    C1.1: Confidential information is protected
    C1.2: Confidential information access is restricted

  privacy-controls: |
    P1.1: Personal information collection is disclosed
    P1.2: Personal information use is disclosed
    P1.3: Personal information is collected with consent

---
# GDPR Compliance Monitoring
apiVersion: v1
kind: ConfigMap
metadata:
  name: gdpr-controls
  namespace: compliance-monitoring
data:
  data-protection-principles: |
    Article 5: Lawfulness, fairness, transparency
    Article 6: Lawful basis for processing
    Article 7: Consent management
    Article 12: Transparent information and communication
    Article 13-14: Information to be provided to data subjects
    Article 15: Right of access by data subject
    Article 16: Right to rectification
    Article 17: Right to erasure (right to be forgotten)
    Article 18: Right to restriction of processing
    Article 20: Right to data portability

  technical-organizational-measures: |
    Article 25: Data protection by design and by default
    Article 32: Security of processing
    Article 33: Notification of data breach to supervisory authority
    Article 34: Communication of data breach to data subject
    Article 35: Data protection impact assessment

  accountability-governance: |
    Article 24: Responsibility of the controller
    Article 28: Data processing agreements
    Article 30: Records of processing activities
    Article 37-39: Data Protection Officer

---
# HIPAA Compliance Monitoring
apiVersion: v1
kind: ConfigMap
metadata:
  name: hipaa-controls
  namespace: compliance-monitoring
data:
  administrative-safeguards: |
    164.308(a)(1): Security Officer assigned
    164.308(a)(3): Workforce training and access management
    164.308(a)(4): Information access management
    164.308(a)(5): Security awareness and training
    164.308(a)(6): Security incident procedures
    164.308(a)(7): Contingency plan and data backup
    164.308(a)(8): Periodic security evaluations

  physical-safeguards: |
    164.310(a)(1): Facility access controls
    164.310(a)(2): Workstation use restrictions
    164.310(d)(1): Device and media controls

  technical-safeguards: |
    164.312(a)(1): Access control
    164.312(b): Audit controls
    164.312(c)(1): Integrity controls
    164.312(d): Person or entity authentication
    164.312(e)(1): Transmission security

---
# Compliance Monitoring Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compliance-monitor
  namespace: compliance-monitoring
  labels:
    app: compliance-monitor
spec:
  replicas: 2
  selector:
    matchLabels:
      app: compliance-monitor
  template:
    metadata:
      labels:
        app: compliance-monitor
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: compliance-monitor-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: compliance-monitor
        image: compliance-monitor:latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: FRAMEWORKS
          value: "SOC2,GDPR,HIPAA,ISO27001"
        - name: PROMETHEUS_URL
          value: "http://prometheus.monitoring.svc.cluster.local:9090"
        - name: AUDIT_LOG_ENDPOINT
          value: "http://audit-log-service.compliance-monitoring.svc.cluster.local:8080"
        - name: COMPLIANCE_DB_URL
          valueFrom:
            secretKeyRef:
              name: compliance-db-credentials
              key: url
        - name: NOTIFICATION_WEBHOOK
          valueFrom:
            secretKeyRef:
              name: compliance-notifications
              key: webhook-url
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
        volumeMounts:
        - name: config-volume
          mountPath: /etc/compliance
        - name: audit-logs
          mountPath: /var/log/audit
      volumes:
      - name: config-volume
        configMap:
          name: compliance-config
      - name: audit-logs
        persistentVolumeClaim:
          claimName: audit-logs-pvc

---
# Audit Log Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: audit-log-service
  namespace: compliance-monitoring
  labels:
    app: audit-log-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: audit-log-service
  template:
    metadata:
      labels:
        app: audit-log-service
    spec:
      containers:
      - name: audit-service
        image: audit-log-service:latest
        ports:
        - containerPort: 8080
        env:
        - name: LOG_LEVEL
          value: "INFO"
        - name: RETENTION_PERIOD
          value: "2557"  # 7 years in days
        - name: ENCRYPTION_ENABLED
          value: "true"
        - name: IMMUTABLE_STORAGE
          value: "true"
        - name: COMPLIANCE_MODE
          value: "SOC2,GDPR,HIPAA"
        volumeMounts:
        - name: audit-storage
          mountPath: /var/log/audit
        - name: encryption-keys
          mountPath: /etc/encryption
          readOnly: true
      volumes:
      - name: audit-storage
        persistentVolumeClaim:
          claimName: audit-logs-pvc
      - name: encryption-keys
        secret:
          secretName: audit-encryption-keys

---
# Data Protection Impact Assessment (DPIA) Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpia-service
  namespace: compliance-monitoring
  labels:
    app: dpia-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dpia-service
  template:
    metadata:
      labels:
        app: dpia-service
    spec:
      containers:
      - name: dpia
        image: dpia-service:latest
        ports:
        - containerPort: 8080
        env:
        - name: GDPR_COMPLIANCE
          value: "true"
        - name: DATA_MAPPING_ENABLED
          value: "true"
        - name: CONSENT_MANAGEMENT
          value: "true"
        - name: RIGHT_TO_BE_FORGOTTEN
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
# Access Control and Identity Management
apiVersion: v1
kind: ConfigMap
metadata:
  name: access-control-policy
  namespace: compliance-monitoring
data:
  rbac-policy.yaml: |
    # Role-Based Access Control Policy
    roles:
      - name: compliance-officer
        permissions:
          - read: audit-logs
          - read: compliance-reports
          - write: compliance-assessments
          - admin: compliance-monitoring
        
      - name: security-admin
        permissions:
          - admin: security-controls
          - read: audit-logs
          - write: security-policies
          
      - name: data-protection-officer
        permissions:
          - admin: gdpr-controls
          - read: personal-data-inventory
          - write: privacy-notices
          - admin: consent-management
          
      - name: audit-viewer
        permissions:
          - read: audit-logs
          - read: compliance-reports

  access-matrix: |
    # Segregation of Duties Matrix
    function1: system-admin
    function2: security-admin
    function3: compliance-officer
    function4: audit-reviewer
    
    # No single person should have access to conflicting functions
    conflicts:
      - [system-admin, audit-reviewer]
      - [developer, compliance-officer]

---
# Vulnerability Management
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vulnerability-scan
  namespace: compliance-monitoring
spec:
  schedule: "0 2 * * 1"  # Weekly Monday 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: vulnerability-scanner
            image: vulnerability-scanner:latest
            command:
            - /bin/bash
            - -c
            - |
              echo "Starting compliance vulnerability scan..."
              
              # Scan application containers
              trivy image --security-checks vuln --severity HIGH,CRITICAL registry.company.com/saas-idp:latest
              
              # Scan infrastructure
              trivy k8s --report summary cluster
              
              # Check for exposed secrets
              trufflehog --repo https://github.com/company/saas-idp --branch main --entropy=True
              
              # Generate compliance report
              compliance-reporter --frameworks SOC2,GDPR,HIPAA --output /reports/compliance-$(date +%Y%m%d).json
              
              # Upload to compliance storage
              aws s3 cp /reports/ s3://compliance-reports-bucket/$(date +%Y/%m/)/ --recursive
              
              # Check for critical findings
              CRITICAL_COUNT=$(jq '.critical_count' /reports/compliance-$(date +%Y%m%d).json)
              if [ "$CRITICAL_COUNT" -gt 0 ]; then
                # Send notification for critical findings
                curl -X POST "$WEBHOOK_URL" -H 'Content-type: application/json' \
                  --data "{\"text\":\"🚨 CRITICAL: $CRITICAL_COUNT critical compliance findings detected\"}"
              fi
            env:
            - name: WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: compliance-notifications
                  key: webhook-url
            volumeMounts:
            - name: reports-storage
              mountPath: /reports
          volumes:
          - name: reports-storage
            persistentVolumeClaim:
              claimName: compliance-reports-pvc

---
# Data Retention and Deletion Policy
apiVersion: batch/v1
kind: CronJob
metadata:
  name: data-retention-policy
  namespace: compliance-monitoring
spec:
  schedule: "0 3 * * 0"  # Weekly Sunday 3 AM
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: data-retention
            image: data-retention-manager:latest
            command:
            - /bin/bash
            - -c
            - |
              echo "Executing data retention policy..."
              
              # GDPR - Right to be forgotten requests
              gdpr-deletion-processor --process-pending-requests
              
              # Data retention based on classification
              data-lifecycle-manager --policy /etc/retention/policy.yaml
              
              # Audit log retention (7 years for compliance)
              audit-retention-manager --retain-years 7 --archive-older
              
              # Generate retention report
              retention-reporter --output /reports/retention-$(date +%Y%m%d).json
              
              echo "Data retention policy execution completed"
            volumeMounts:
            - name: retention-policy
              mountPath: /etc/retention
            - name: reports-storage
              mountPath: /reports
          volumes:
          - name: retention-policy
            configMap:
              name: data-retention-policy
          - name: reports-storage
            persistentVolumeClaim:
              claimName: compliance-reports-pvc

---
# Compliance Metrics and Alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: compliance-alerts
  namespace: compliance-monitoring
spec:
  groups:
  - name: soc2-compliance.rules
    rules:
    - alert: SOC2AccessControlViolation
      expr: soc2_access_control_violations_total > 0
      for: 0m
      labels:
        severity: critical
        compliance: soc2
        control: CC6.2
      annotations:
        summary: "SOC2 access control violation detected"
        description: "{{ $value }} access control violations detected"
        
    - alert: SOC2SecurityIncidentNotReported
      expr: soc2_security_incidents_unreported_total > 0
      for: 5m
      labels:
        severity: high
        compliance: soc2
        control: CC7.2
      annotations:
        summary: "SOC2 security incident not reported within SLA"

  - name: gdpr-compliance.rules
    rules:
    - alert: GDPRDataBreachNotification
      expr: gdpr_data_breach_notification_overdue_total > 0
      for: 0m
      labels:
        severity: critical
        compliance: gdpr
        article: "33"
      annotations:
        summary: "GDPR data breach notification overdue"
        description: "Data breach notification to supervisory authority is overdue (>72h)"
        
    - alert: GDPRConsentViolation
      expr: gdpr_consent_violations_total > 0
      for: 0m
      labels:
        severity: high
        compliance: gdpr
        article: "7"
      annotations:
        summary: "GDPR consent management violation"
        
    - alert: GDPRRightToBeForgottenDelay
      expr: gdpr_deletion_requests_overdue_total > 0
      for: 1h
      labels:
        severity: warning
        compliance: gdpr
        article: "17"
      annotations:
        summary: "GDPR right to be forgotten request overdue"

  - name: hipaa-compliance.rules
    rules:
    - alert: HIPAAUnauthorizedAccess
      expr: hipaa_unauthorized_access_attempts_total > 0
      for: 0m
      labels:
        severity: critical
        compliance: hipaa
        safeguard: "164.308(a)(4)"
      annotations:
        summary: "HIPAA unauthorized access attempt detected"
        
    - alert: HIPAAEncryptionFailure
      expr: hipaa_encryption_failures_total > 0
      for: 0m
      labels:
        severity: critical
        compliance: hipaa
        safeguard: "164.312(e)(1)"
      annotations:
        summary: "HIPAA transmission security failure"
        
    - alert: HIPAAAuditLogTampering
      expr: hipaa_audit_log_integrity_violations_total > 0
      for: 0m
      labels:
        severity: critical
        compliance: hipaa
        safeguard: "164.312(b)"
      annotations:
        summary: "HIPAA audit log integrity violation"

---
# Compliance Dashboard Service
apiVersion: v1
kind: Service
metadata:
  name: compliance-dashboard
  namespace: compliance-monitoring
  labels:
    app: compliance-dashboard
spec:
  selector:
    app: compliance-dashboard
  ports:
  - port: 80
    targetPort: 3000
    name: http

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compliance-dashboard
  namespace: compliance-monitoring
  labels:
    app: compliance-dashboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: compliance-dashboard
  template:
    metadata:
      labels:
        app: compliance-dashboard
    spec:
      containers:
      - name: dashboard
        image: compliance-dashboard:latest
        ports:
        - containerPort: 3000
        env:
        - name: COMPLIANCE_API_URL
          value: "http://compliance-monitor.compliance-monitoring.svc.cluster.local:8080"
        - name: GRAFANA_URL
          value: "https://grafana.company.com"
        - name: SUPPORTED_FRAMEWORKS
          value: "SOC2,GDPR,HIPAA,ISO27001,PCI-DSS"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
# Service Account for Compliance Monitoring
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compliance-monitor-sa
  namespace: compliance-monitoring

---
# RBAC for Compliance Monitoring
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: compliance-monitor-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["security.istio.io"]
  resources: ["authorizationpolicies", "peerauthentications"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: compliance-monitor-binding
subjects:
- kind: ServiceAccount
  name: compliance-monitor-sa
  namespace: compliance-monitoring
roleRef:
  kind: ClusterRole
  name: compliance-monitor-role
  apiGroup: rbac.authorization.k8s.io

---
# PVC for Audit Logs (Immutable Storage)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: audit-logs-pvc
  namespace: compliance-monitoring
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Ti
  storageClassName: compliance-storage  # WORM storage class

---
# PVC for Compliance Reports
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: compliance-reports-pvc
  namespace: compliance-monitoring
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: standard