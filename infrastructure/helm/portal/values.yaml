# Default values for portal
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  postgresql:
    auth:
      existingSecret: "portal-database-secret"
      secretKeys:
        adminPasswordKey: "password"
        userPasswordKey: "password"
  redis:
    auth:
      existingSecret: "portal-redis-secret"
      existingSecretPasswordKey: "password"

# Application configuration
app:
  name: portal
  version: "1.0.0"
  environment: production

# Frontend service configuration
frontend:
  name: portal-frontend
  replicaCount: 3
  image:
    repository: portal-frontend
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 4400
    targetPort: 4400
    annotations: {}
  
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - portal-frontend
          topologyKey: kubernetes.io/hostname
  
  # Environment variables
  env:
    NODE_ENV: production
    PORT: "4400"
    LOG_LEVEL: info
    NEXT_PUBLIC_APP_URL: https://portal.company.com
    NEXT_PUBLIC_BACKSTAGE_API_URL: https://api.portal.company.com
  
  # Environment variables from secrets
  envFrom:
    - secretRef:
        name: portal-secrets
    - configMapRef:
        name: portal-config
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /api/health
      port: 4400
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /api/health
      port: 4400
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  startupProbe:
    httpGet:
      path: /api/health
      port: 4400
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30

# Backend service configuration
backend:
  name: backstage-backend
  replicaCount: 2
  image:
    repository: backstage-backend
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 7007
    targetPort: 7007
    annotations: {}
  
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - backstage-backend
          topologyKey: kubernetes.io/hostname
  
  # Environment variables
  env:
    NODE_ENV: production
    APP_CONFIG_app_baseUrl: https://portal.company.com
    APP_CONFIG_backend_baseUrl: https://api.portal.company.com
    APP_CONFIG_backend_listen_port: "7007"
    LOG_LEVEL: info
  
  # Environment variables from secrets
  envFrom:
    - secretRef:
        name: portal-secrets
    - secretRef:
        name: github-credentials
    - secretRef:
        name: oauth-credentials
    - secretRef:
        name: aws-credentials
    - secretRef:
        name: kubernetes-credentials
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /healthcheck
      port: 7007
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /healthcheck
      port: 7007
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: portal.company.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: portal-frontend
            port: 4400
    - host: api.portal.company.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: backstage-backend
            port: 7007
  tls:
    - secretName: portal-tls-secret
      hosts:
        - portal.company.com
        - api.portal.company.com

# Service account configuration
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/portal-service-role"
  name: portal-service
  automountServiceAccountToken: true

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: ""
    username: "portal_user"
    password: ""
    database: "portal"
    existingSecret: "portal-database-secret"
  architecture: replication
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: "gp3"
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 1Gi
  readReplicas:
    replicaCount: 1
    persistence:
      enabled: true
      size: 100Gi
      storageClass: "gp3"
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 512Mi

# Redis configuration
redis:
  enabled: true
  architecture: replication
  auth:
    enabled: true
    password: ""
    existingSecret: "portal-redis-secret"
  master:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "gp3"
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "gp3"
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s
      labels:
        team: platform
        environment: production
  grafana:
    enabled: true
    adminPassword: ""
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "gp3"
    dashboards:
      enabled: true
      label: grafana_dashboard
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server:80
          access: proxy
          isDefault: true

# Network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 4400
      - protocol: TCP
        port: 7007
    - from:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: portal-frontend
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: backstage-backend
      ports:
      - protocol: TCP
        port: 4400
      - protocol: TCP
        port: 7007
      - protocol: TCP
        port: 5432
      - protocol: TCP
        port: 6379

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  frontend:
    minAvailable: 2
  backend:
    minAvailable: 1

# Persistence configuration
persistence:
  enabled: true
  storageClass: "gp3"
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# ConfigMap data
configMap:
  data:
    # Application configuration
    app.yaml: |
      app:
        title: Enhanced Plugin Management Portal
        baseUrl: https://portal.company.com
      
      organization:
        name: Company Engineering
      
      backend:
        baseUrl: https://api.portal.company.com
        listen:
          port: 7007
          host: 0.0.0.0
        csp:
          connect-src: ["'self'", 'http:', 'https:']
        cors:
          origin: https://portal.company.com
          methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
          credentials: true
        database:
          client: pg
          connection:
            host: ${POSTGRES_HOST}
            port: ${POSTGRES_PORT}
            user: ${POSTGRES_USER}
            password: ${POSTGRES_PASSWORD}
            database: ${POSTGRES_DB}
    
    # Logging configuration
    logging.yaml: |
      level: info
      format: json
      meta:
        service: portal
        version: 1.0.0
        environment: production

# Secrets (these should be created separately)
secrets:
  # Portal application secrets
  portal:
    name: portal-secrets
    data:
      DATABASE_URL: ""
      REDIS_URL: ""
      JWT_SECRET: ""
      ENCRYPTION_KEY: ""
      SESSION_SECRET: ""
  
  # Database credentials
  database:
    name: portal-database-secret
    data:
      password: ""
  
  # Redis credentials
  redis:
    name: portal-redis-secret
    data:
      password: ""
  
  # External service credentials
  github:
    name: github-credentials
    data:
      GITHUB_TOKEN: ""
      GITHUB_CLIENT_ID: ""
      GITHUB_CLIENT_SECRET: ""
  
  oauth:
    name: oauth-credentials
    data:
      OAUTH_CLIENT_ID: ""
      OAUTH_CLIENT_SECRET: ""
      OAUTH_REDIRECT_URI: ""
  
  aws:
    name: aws-credentials
    data:
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
      AWS_REGION: ""
  
  kubernetes:
    name: kubernetes-credentials
    data:
      KUBERNETES_URL: ""
      KUBERNETES_TOKEN: ""

# Tests configuration
tests:
  enabled: true
  image:
    repository: portal-tests
    tag: "latest"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256Mi

# Development overrides (for development environment)
development:
  frontend:
    replicaCount: 1
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi
    autoscaling:
      enabled: false
  backend:
    replicaCount: 1
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 512Mi
    autoscaling:
      enabled: false
  postgresql:
    primary:
      persistence:
        size: 20Gi
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 256Mi
    readReplicas:
      replicaCount: 0
  redis:
    replica:
      replicaCount: 0
    master:
      persistence:
        size: 5Gi

# Staging overrides (for staging environment)
staging:
  frontend:
    replicaCount: 2
    resources:
      limits:
        cpu: 750m
        memory: 1.5Gi
      requests:
        cpu: 200m
        memory: 384Mi
  backend:
    replicaCount: 1
    resources:
      limits:
        cpu: 1500m
        memory: 3Gi
      requests:
        cpu: 375m
        memory: 768Mi
  postgresql:
    primary:
      persistence:
        size: 50Gi
    readReplicas:
      replicaCount: 1
  redis:
    replica:
      replicaCount: 1