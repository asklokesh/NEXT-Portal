apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-config
  namespace: developer-portal
data:
  backup-policy.json: |
    {
      "version": "1.0",
      "backupStrategies": {
        "database": {
          "type": "postgresql",
          "schedule": "0 2 * * *",
          "retention": {
            "daily": 7,
            "weekly": 4,
            "monthly": 6,
            "yearly": 2
          },
          "encryption": {
            "enabled": true,
            "algorithm": "AES-256-GCM",
            "keyRotation": true
          },
          "compression": {
            "enabled": true,
            "algorithm": "gzip",
            "level": 9
          },
          "verification": {
            "enabled": true,
            "checksum": "SHA256",
            "testRestore": "weekly"
          },
          "destinations": [
            {
              "type": "s3",
              "bucket": "developer-portal-backups",
              "region": "us-west-2",
              "storageClass": "STANDARD_IA",
              "lifecycle": {
                "transitionToGlacier": 30,
                "expiration": 730
              }
            },
            {
              "type": "s3",
              "bucket": "developer-portal-backups-dr",
              "region": "us-east-1",
              "storageClass": "STANDARD_IA",
              "crossRegionReplication": true
            }
          ]
        },
        "files": {
          "paths": [
            "/data/uploads",
            "/data/templates",
            "/data/configurations"
          ],
          "schedule": "0 3 * * *",
          "retention": {
            "daily": 7,
            "weekly": 4
          },
          "incremental": true,
          "deduplication": true,
          "destinations": [
            {
              "type": "s3",
              "bucket": "developer-portal-files",
              "region": "us-west-2"
            }
          ]
        },
        "etcd": {
          "enabled": true,
          "schedule": "0 */6 * * *",
          "snapshotCount": 10,
          "destinations": [
            {
              "type": "s3",
              "bucket": "developer-portal-etcd-backups",
              "region": "us-west-2"
            }
          ]
        }
      },
      "disasterRecovery": {
        "rto": "4 hours",
        "rpo": "1 hour",
        "testSchedule": "quarterly",
        "regions": {
          "primary": "us-west-2",
          "secondary": "us-east-1"
        },
        "runbooks": {
          "failover": "/docs/dr/failover-procedure.md",
          "failback": "/docs/dr/failback-procedure.md",
          "test": "/docs/dr/test-procedure.md"
        }
      },
      "monitoring": {
        "alerts": {
          "backupFailed": {
            "severity": "critical",
            "channels": ["email", "slack", "pagerduty"]
          },
          "backupDelayed": {
            "severity": "warning",
            "threshold": "30 minutes",
            "channels": ["email", "slack"]
          },
          "restoreFailed": {
            "severity": "critical",
            "channels": ["email", "slack", "pagerduty"]
          },
          "storageQuotaExceeded": {
            "severity": "warning",
            "threshold": "80%",
            "channels": ["email"]
          }
        }
      }
    }
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: developer-portal
spec:
  schedule: "0 2 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: postgres-backup
              image: postgres:15-alpine
              command:
                - /bin/bash
                - -c
                - |
                  set -e
                  
                  # Generate backup filename with timestamp
                  BACKUP_FILE="postgres-backup-$(date +%Y%m%d-%H%M%S).sql.gz"
                  
                  # Perform backup
                  echo "Starting PostgreSQL backup..."
                  PGPASSWORD=$POSTGRES_PASSWORD pg_dump \
                    -h $POSTGRES_HOST \
                    -p $POSTGRES_PORT \
                    -U $POSTGRES_USER \
                    -d $POSTGRES_DB \
                    --no-owner \
                    --no-acl \
                    --clean \
                    --if-exists \
                    | gzip -9 > /tmp/$BACKUP_FILE
                  
                  # Calculate checksum
                  CHECKSUM=$(sha256sum /tmp/$BACKUP_FILE | awk '{print $1}')
                  echo "Backup checksum: $CHECKSUM"
                  
                  # Upload to S3
                  echo "Uploading to S3..."
                  aws s3 cp /tmp/$BACKUP_FILE \
                    s3://$BACKUP_BUCKET/postgres/daily/$BACKUP_FILE \
                    --storage-class STANDARD_IA \
                    --metadata "checksum=$CHECKSUM,timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
                  
                  # Verify upload
                  aws s3api head-object \
                    --bucket $BACKUP_BUCKET \
                    --key postgres/daily/$BACKUP_FILE
                  
                  # Cleanup old backups
                  echo "Cleaning up old backups..."
                  aws s3 ls s3://$BACKUP_BUCKET/postgres/daily/ \
                    | awk '{print $4}' \
                    | sort -r \
                    | tail -n +8 \
                    | xargs -I {} aws s3 rm s3://$BACKUP_BUCKET/postgres/daily/{}
                  
                  echo "Backup completed successfully"
              env:
                - name: POSTGRES_HOST
                  valueFrom:
                    secretKeyRef:
                      name: portal-secrets
                      key: POSTGRES_HOST
                - name: POSTGRES_PORT
                  valueFrom:
                    secretKeyRef:
                      name: portal-secrets
                      key: POSTGRES_PORT
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: portal-secrets
                      key: POSTGRES_USER
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: portal-secrets
                      key: POSTGRES_PASSWORD
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: portal-secrets
                      key: POSTGRES_DB
                - name: BACKUP_BUCKET
                  value: developer-portal-backups
                - name: AWS_REGION
                  value: us-west-2
              volumeMounts:
                - name: aws-credentials
                  mountPath: /root/.aws
                  readOnly: true
          volumes:
            - name: aws-credentials
              secret:
                secretName: aws-credentials
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-backup
  namespace: developer-portal
spec:
  schedule: "0 */6 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: redis-backup
              image: redis:7-alpine
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  
                  # Generate backup filename with timestamp
                  BACKUP_FILE="redis-backup-$(date +%Y%m%d-%H%M%S).rdb.gz"
                  
                  # Trigger Redis BGSAVE
                  echo "Starting Redis backup..."
                  redis-cli -h $REDIS_HOST -p $REDIS_PORT -a $REDIS_PASSWORD BGSAVE
                  
                  # Wait for backup to complete
                  while [ $(redis-cli -h $REDIS_HOST -p $REDIS_PORT -a $REDIS_PASSWORD LASTSAVE) -eq $(redis-cli -h $REDIS_HOST -p $REDIS_PORT -a $REDIS_PASSWORD LASTSAVE) ]; do
                    sleep 1
                  done
                  
                  # Copy and compress backup file
                  redis-cli -h $REDIS_HOST -p $REDIS_PORT -a $REDIS_PASSWORD --rdb /tmp/dump.rdb
                  gzip -9 /tmp/dump.rdb
                  mv /tmp/dump.rdb.gz /tmp/$BACKUP_FILE
                  
                  # Calculate checksum
                  CHECKSUM=$(sha256sum /tmp/$BACKUP_FILE | awk '{print $1}')
                  echo "Backup checksum: $CHECKSUM"
                  
                  # Upload to S3
                  echo "Uploading to S3..."
                  aws s3 cp /tmp/$BACKUP_FILE \
                    s3://$BACKUP_BUCKET/redis/$BACKUP_FILE \
                    --storage-class STANDARD_IA \
                    --metadata "checksum=$CHECKSUM,timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
                  
                  # Cleanup old backups (keep last 20)
                  aws s3 ls s3://$BACKUP_BUCKET/redis/ \
                    | awk '{print $4}' \
                    | sort -r \
                    | tail -n +21 \
                    | xargs -I {} aws s3 rm s3://$BACKUP_BUCKET/redis/{}
                  
                  echo "Redis backup completed successfully"
              env:
                - name: REDIS_HOST
                  valueFrom:
                    secretKeyRef:
                      name: portal-secrets
                      key: REDIS_HOST
                - name: REDIS_PORT
                  valueFrom:
                    secretKeyRef:
                      name: portal-secrets
                      key: REDIS_PORT
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: portal-secrets
                      key: REDIS_PASSWORD
                - name: BACKUP_BUCKET
                  value: developer-portal-backups
                - name: AWS_REGION
                  value: us-west-2
              volumeMounts:
                - name: aws-credentials
                  mountPath: /root/.aws
                  readOnly: true
          volumes:
            - name: aws-credentials
              secret:
                secretName: aws-credentials