apiVersion: v1
kind: ConfigMap
metadata:
  name: business-continuity-config
  namespace: developer-portal
  labels:
    app: business-continuity-manager
    component: disaster-recovery
data:
  business-continuity-config.yaml: |
    # Business Continuity Management Configuration
    apiVersion: continuity.portal.dev/v1
    kind: BusinessContinuityPlan
    metadata:
      name: plugin-ecosystem-bcp
      version: "2.0"
      created: "2025-01-07T10:00:00Z"
      last_updated: "2025-01-07T10:00:00Z"
    
    # Service Level Agreements
    sla:
      availability:
        critical_services: "99.95%"
        high_priority_services: "99.90%"
        standard_services: "99.50%"
        development_services: "95.00%"
        
      recovery_objectives:
        critical:
          rto: "30min"
          rpo: "5min"
          mttr: "15min"  # Mean Time To Recovery
          
        high:
          rto: "1h"
          rpo: "15min"
          mttr: "30min"
          
        standard:
          rto: "4h"
          rpo: "1h"
          mttr: "2h"
          
        development:
          rto: "8h"
          rpo: "4h"
          mttr: "4h"
      
      performance:
        response_time_p95: "500ms"
        response_time_p99: "1000ms"
        throughput_minimum: "1000 req/min"
        error_rate_maximum: "0.1%"
    
    # Service classifications
    service_tiers:
      critical:
        services:
          - "authentication"
          - "authorization"
          - "user-management"
          - "security-core"
          - "payment-processing"
        dependencies: ["database", "cache", "identity-provider"]
        business_impact: "severe"
        customer_facing: true
        revenue_impact: "high"
        
      high:
        services:
          - "service-catalog"
          - "plugin-marketplace"
          - "workflow-engine"
          - "notification-service"
          - "api-gateway"
        dependencies: ["database", "cache", "message-queue"]
        business_impact: "high"
        customer_facing: true
        revenue_impact: "medium"
        
      standard:
        services:
          - "documentation-service"
          - "monitoring-dashboard"
          - "analytics-engine"
          - "reporting-service"
          - "search-service"
        dependencies: ["database", "search-index"]
        business_impact: "medium"
        customer_facing: false
        revenue_impact: "low"
        
      development:
        services:
          - "development-tools"
          - "test-frameworks"
          - "experimental-features"
          - "debug-utilities"
        dependencies: ["development-database"]
        business_impact: "low"
        customer_facing: false
        revenue_impact: "none"
    
    # Business impact analysis
    impact_analysis:
      financial:
        revenue_per_hour:
          critical_downtime: "$50000"
          high_priority_downtime: "$20000"
          standard_downtime: "$5000"
          
        cost_categories:
          - infrastructure_cost
          - personnel_cost
          - customer_compensation
          - regulatory_fines
          - reputation_damage
          
      operational:
        affected_processes:
          - customer_onboarding
          - service_provisioning
          - billing_operations
          - support_operations
          - development_workflows
          
        resource_requirements:
          incident_commander: 1
          technical_leads: 3
          support_staff: 5
          communication_lead: 1
          
      compliance:
        frameworks:
          - soc2_type2
          - iso27001
          - gdpr
          - hipaa
          - pci_dss
          
        requirements:
          incident_reporting: "24h"
          customer_notification: "2h"
          regulatory_notification: "72h"
          audit_trail: "required"
    
    # Recovery strategies
    recovery_strategies:
      immediate_response:
        - activate_incident_command
        - assess_impact_scope
        - implement_communication_plan
        - execute_initial_containment
        - notify_stakeholders
        
      short_term_recovery:
        - restore_critical_services
        - implement_workarounds
        - scale_support_operations
        - monitor_service_health
        - update_stakeholders
        
      long_term_recovery:
        - restore_all_services
        - conduct_root_cause_analysis
        - implement_permanent_fixes
        - update_procedures
        - conduct_lessons_learned
    
    # Runbook automation
    runbooks:
      database_failure:
        name: "Database Primary Failure Response"
        trigger_conditions:
          - database_primary_unreachable
          - database_corruption_detected
          - database_performance_degraded
        automated_steps:
          - assess_secondary_database_status
          - promote_secondary_to_primary
          - update_application_configs
          - restart_affected_services
          - validate_service_functionality
        manual_steps:
          - notify_database_team
          - update_monitoring_dashboards
          - communicate_to_stakeholders
        rollback_steps:
          - demote_secondary_database
          - restore_primary_database
          - revert_configuration_changes
          
      plugin_service_failure:
        name: "Critical Plugin Service Failure"
        trigger_conditions:
          - plugin_health_check_failed
          - plugin_error_rate_high
          - plugin_response_time_slow
        automated_steps:
          - restart_plugin_service
          - scale_plugin_replicas
          - route_traffic_to_healthy_instances
          - clear_plugin_cache
        manual_steps:
          - investigate_plugin_logs
          - contact_plugin_maintainer
          - implement_temporary_workaround
        escalation_steps:
          - disable_failing_plugin
          - notify_affected_users
          - activate_backup_functionality
          
      network_infrastructure_failure:
        name: "Network Infrastructure Failure"
        trigger_conditions:
          - network_connectivity_lost
          - dns_resolution_failed
          - load_balancer_unavailable
        automated_steps:
          - failover_to_secondary_region
          - update_dns_records
          - redirect_traffic_routing
          - validate_network_connectivity
        manual_steps:
          - coordinate_with_network_team
          - investigate_infrastructure_issues
          - plan_network_restoration
        communication_steps:
          - notify_operations_team
          - update_status_page
          - inform_customer_support
    
    # Communication plans
    communication:
      stakeholder_groups:
        executive_team:
          contacts: ["ceo@company.com", "cto@company.com"]
          notification_methods: ["phone", "email", "slack"]
          escalation_time: "immediate"
          
        operations_team:
          contacts: ["ops-lead@company.com", "ops-team@company.com"]
          notification_methods: ["pagerduty", "slack", "email"]
          escalation_time: "immediate"
          
        development_teams:
          contacts: ["dev-leads@company.com"]
          notification_methods: ["slack", "email"]
          escalation_time: "15min"
          
        customer_support:
          contacts: ["support-lead@company.com", "support@company.com"]
          notification_methods: ["slack", "phone", "email"]
          escalation_time: "15min"
          
        customers:
          notification_methods: ["status_page", "email", "in_app"]
          escalation_time: "1h"
          
      templates:
        initial_incident:
          subject: "INCIDENT: {{ incident_title }}"
          body: |
            An incident has been detected:
            
            Incident ID: {{ incident_id }}
            Severity: {{ severity }}
            Start Time: {{ start_time }}
            Affected Services: {{ affected_services }}
            Impact: {{ impact_description }}
            
            We are investigating the issue and will provide updates.
            
            Status page: https://status.company.com
            
        incident_update:
          subject: "UPDATE: {{ incident_title }}"
          body: |
            Incident Update:
            
            Incident ID: {{ incident_id }}
            Status: {{ current_status }}
            Last Update: {{ update_time }}
            
            Progress: {{ progress_description }}
            Next Steps: {{ next_steps }}
            Estimated Resolution: {{ eta }}
            
        incident_resolved:
          subject: "RESOLVED: {{ incident_title }}"
          body: |
            The incident has been resolved:
            
            Incident ID: {{ incident_id }}
            Resolution Time: {{ resolution_time }}
            Total Duration: {{ total_duration }}
            Root Cause: {{ root_cause }}
            
            All services are now operating normally.
    
    # Monitoring and alerting
    monitoring:
      health_checks:
        service_availability:
          frequency: "30s"
          timeout: "10s"
          failure_threshold: 3
          success_threshold: 2
          
        database_connectivity:
          frequency: "60s"
          timeout: "5s"
          failure_threshold: 2
          
        plugin_health:
          frequency: "60s"
          timeout: "15s"
          failure_threshold: 3
          custom_checks: true
          
      performance_metrics:
        response_time:
          measurement: "p95"
          warning_threshold: "500ms"
          critical_threshold: "1000ms"
          
        error_rate:
          measurement: "percentage"
          warning_threshold: "1%"
          critical_threshold: "5%"
          
        throughput:
          measurement: "requests_per_minute"
          warning_threshold: "500"
          critical_threshold: "100"
          
      business_metrics:
        user_registrations:
          measurement: "count_per_hour"
          warning_threshold: "< 10"
          
        plugin_installations:
          measurement: "count_per_hour" 
          warning_threshold: "< 5"
          
        revenue_tracking:
          measurement: "dollars_per_hour"
          warning_threshold: "< $1000"
    
    # Testing and validation
    testing:
      disaster_recovery_drills:
        frequency: "quarterly"
        scope: "full_system"
        duration: "4h"
        participants:
          - operations_team
          - development_leads
          - incident_commander
        success_criteria:
          - rto_met: true
          - rpo_met: true
          - communication_effective: true
          - runbooks_accurate: true
          
      tabletop_exercises:
        frequency: "monthly"
        scenarios:
          - database_corruption
          - network_outage
          - security_breach
          - key_personnel_unavailable
        participants:
          - business_leadership
          - technical_leadership
          - operations_team
          
      business_continuity_tests:
        frequency: "semi_annually"
        components:
          - alternate_site_activation
          - supplier_failover
          - staff_relocation
          - communication_systems
    
    # Training and awareness
    training:
      incident_response_training:
        frequency: "quarterly"
        participants: "all_technical_staff"
        content:
          - incident_classification
          - escalation_procedures
          - communication_protocols
          - runbook_execution
          
      business_continuity_awareness:
        frequency: "annually"
        participants: "all_staff"
        content:
          - business_continuity_importance
          - individual_responsibilities
          - emergency_procedures
          - contact_information
          
      leadership_training:
        frequency: "semi_annually"
        participants: "leadership_team"
        content:
          - crisis_leadership
          - decision_making_under_pressure
          - stakeholder_communication
          - media_relations
    
    # Compliance and audit
    compliance:
      documentation_requirements:
        - business_impact_analysis
        - risk_assessment
        - recovery_procedures
        - testing_results
        - training_records
        
      audit_schedule:
        internal_audit: "quarterly"
        external_audit: "annually"
        regulatory_review: "as_required"
        
      reporting:
        availability_reports: "monthly"
        incident_summaries: "monthly" 
        sla_compliance: "monthly"
        business_continuity_status: "quarterly"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: business-continuity-manager
  namespace: developer-portal
  labels:
    app: business-continuity-manager
    component: disaster-recovery
spec:
  replicas: 2
  selector:
    matchLabels:
      app: business-continuity-manager
  template:
    metadata:
      labels:
        app: business-continuity-manager
        component: disaster-recovery
    spec:
      serviceAccountName: business-continuity-manager
      securityContext:
        runAsNonRoot: true
        runAsUser: 1002
        fsGroup: 1002
      containers:
        - name: bcp-manager
          image: portal.local:5000/business-continuity-manager:v2.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 8081
              name: metrics
            - containerPort: 9090
              name: webhook
          env:
            - name: LOG_LEVEL
              value: "INFO"
            - name: BCP_CONFIG_PATH
              value: "/config/business-continuity-config.yaml"
            - name: DR_ORCHESTRATOR_ENDPOINT
              value: "http://dr-orchestrator:8080"
            - name: BACKUP_ORCHESTRATOR_ENDPOINT
              value: "http://backup-orchestrator:8080"
            - name: MONITORING_ENDPOINT
              value: "http://prometheus:9090"
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: notification-secrets
                  key: SLACK_WEBHOOK_URL
            - name: PAGERDUTY_API_KEY
              valueFrom:
                secretKeyRef:
                  name: notification-secrets
                  key: PAGERDUTY_API_KEY
            - name: EMAIL_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: email-secrets
                  key: SMTP_PASSWORD
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
          volumeMounts:
            - name: config
              mountPath: /config
              readOnly: true
            - name: runbooks
              mountPath: /runbooks
              readOnly: true
            - name: bcp-data
              mountPath: /data
            - name: templates
              mountPath: /templates
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: business-continuity-config
        - name: runbooks
          configMap:
            name: automated-runbooks
        - name: bcp-data
          persistentVolumeClaim:
            claimName: bcp-data-pvc
        - name: templates
          configMap:
            name: communication-templates

---
apiVersion: v1
kind: Service
metadata:
  name: business-continuity-manager
  namespace: developer-portal
  labels:
    app: business-continuity-manager
    component: disaster-recovery
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      name: http
    - port: 8081
      targetPort: metrics
      name: metrics
    - port: 9090
      targetPort: webhook
      name: webhook
  selector:
    app: business-continuity-manager

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: business-continuity-manager
  namespace: developer-portal
  labels:
    app: business-continuity-manager
    component: disaster-recovery

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: business-continuity-manager
  labels:
    app: business-continuity-manager
    component: disaster-recovery
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints", "events"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch", "patch", "update"]
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["create", "get", "list", "watch"]
  - apiGroups: ["monitoring.coreos.com"]
    resources: ["servicemonitors", "prometheusrules"]
    verbs: ["get", "list", "watch", "create", "update"]
  - apiGroups: ["continuity.portal.dev"]
    resources: ["*"]
    verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: business-continuity-manager
  labels:
    app: business-continuity-manager
    component: disaster-recovery
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: business-continuity-manager
subjects:
  - kind: ServiceAccount
    name: business-continuity-manager
    namespace: developer-portal

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bcp-data-pvc
  namespace: developer-portal
  labels:
    app: business-continuity-manager
    component: disaster-recovery
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "5Gi"
  storageClassName: "standard"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sla-compliance-check
  namespace: developer-portal
  labels:
    app: business-continuity-manager
    component: disaster-recovery
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        spec:
          serviceAccountName: business-continuity-manager
          restartPolicy: OnFailure
          containers:
            - name: sla-checker
              image: portal.local:5000/business-continuity-manager:v2.0
              command: ["/app/sla-compliance-check.sh"]
              env:
                - name: BCP_MANAGER_ENDPOINT
                  value: "http://business-continuity-manager:8080"
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "256Mi"
                  cpu: "200m"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: bcp-health-report
  namespace: developer-portal
  labels:
    app: business-continuity-manager
    component: disaster-recovery
spec:
  schedule: "0 8 * * 1"  # Weekly Monday 8 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 2
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          serviceAccountName: business-continuity-manager
          restartPolicy: OnFailure
          containers:
            - name: health-reporter
              image: portal.local:5000/business-continuity-manager:v2.0
              command: ["/app/bcp-health-report.sh"]
              env:
                - name: BCP_MANAGER_ENDPOINT
                  value: "http://business-continuity-manager:8080"
                - name: REPORT_RECIPIENTS
                  value: "ops-team@company.com,leadership@company.com"
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "100m"
                limits:
                  memory: "512Mi"
                  cpu: "200m"

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: business-continuity-manager
  namespace: developer-portal
  labels:
    app: business-continuity-manager
    component: disaster-recovery
spec:
  selector:
    matchLabels:
      app: business-continuity-manager
  endpoints:
    - port: metrics
      path: /metrics
      interval: 30s

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: business-continuity-alerts
  namespace: developer-portal
  labels:
    app: business-continuity-manager
    component: disaster-recovery
spec:
  groups:
    - name: business-continuity.rules
      rules:
        - alert: SLAViolation
          expr: (sla_availability_percentage < 99.5) or (sla_response_time_p95 > 500)
          for: 5m
          labels:
            severity: critical
            component: business-continuity
          annotations:
            summary: "SLA violation detected"
            description: "Service availability or response time SLA has been violated"
            
        - alert: BusinessContinuityTestFailed
          expr: increase(bcp_test_failures_total[1h]) > 0
          for: 1m
          labels:
            severity: warning
            component: business-continuity
          annotations:
            summary: "Business continuity test failed"
            description: "A business continuity test has failed"
            
        - alert: IncidentResponseDelayed
          expr: incident_response_time_minutes > 30
          for: 1m
          labels:
            severity: critical
            component: business-continuity
          annotations:
            summary: "Incident response delayed"
            description: "Incident response time exceeded 30 minutes"