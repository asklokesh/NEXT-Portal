apiVersion: apps/v1
kind: Deployment
metadata:
  name: plugin-pipeline-orchestrator
  namespace: plugin-pipeline
  labels:
    app: plugin-pipeline-orchestrator
    app.kubernetes.io/name: plugin-pipeline-orchestrator
    app.kubernetes.io/version: v1.0.0
    app.kubernetes.io/component: orchestrator
    app.kubernetes.io/part-of: plugin-pipeline
    app.kubernetes.io/managed-by: kubectl
  annotations:
    deployment.kubernetes.io/revision: "1"
    plugin-pipeline/description: "Main plugin pipeline orchestrator deployment"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: plugin-pipeline-orchestrator
  template:
    metadata:
      labels:
        app: plugin-pipeline-orchestrator
        app.kubernetes.io/name: plugin-pipeline-orchestrator
        app.kubernetes.io/version: v1.0.0
        app.kubernetes.io/component: orchestrator
        app.kubernetes.io/part-of: plugin-pipeline
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        plugin-pipeline/config-hash: "{{ .Values.configHash | default "none" }}"
    spec:
      serviceAccountName: plugin-pipeline-orchestrator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-dependencies
          image: busybox:1.35
          command: 
            - 'sh'
            - '-c'
            - |
              echo "Waiting for PostgreSQL..."
              until nc -z postgres-service 5432; do
                echo "PostgreSQL is unavailable - sleeping"
                sleep 2
              done
              echo "PostgreSQL is up!"
              
              echo "Waiting for Redis..."
              until nc -z redis-service 6379; do
                echo "Redis is unavailable - sleeping"  
                sleep 2
              done
              echo "Redis is up!"
              
              echo "All dependencies are ready!"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 100m
              memory: 64Mi
      containers:
        - name: orchestrator
          image: plugin-pipeline-orchestrator:v1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
          env:
            - name: NODE_ENV
              value: "production"
            - name: LOG_LEVEL
              value: "info"
            - name: PORT
              value: "8080"
            - name: METRICS_PORT
              value: "9090"
            - name: HEALTH_PORT
              value: "8081"
            
            # Kubernetes configuration
            - name: KUBERNETES_IN_CLUSTER
              value: "true"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            
            # Docker registry configuration
            - name: DOCKER_REGISTRY_URL
              valueFrom:
                configMapKeyRef:
                  name: pipeline-config
                  key: docker-registry-url
            
            # Service mesh configuration
            - name: SERVICE_MESH_PROVIDER
              valueFrom:
                configMapKeyRef:
                  name: pipeline-config
                  key: service-mesh-provider
            
            # Database configuration
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: pipeline-secrets
                  key: database-url
            
            # Redis configuration
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: pipeline-secrets
                  key: redis-url
            
            # Security scanner configuration
            - name: SNYK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: pipeline-secrets
                  key: snyk-token
                  optional: true
            
            # Registry credentials
            - name: NPM_TOKEN
              valueFrom:
                secretKeyRef:
                  name: pipeline-secrets
                  key: npm-token
                  optional: true
            
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: pipeline-secrets
                  key: github-token
                  optional: true
                  
          envFrom:
            - configMapRef:
                name: pipeline-config
            - secretRef:
                name: pipeline-secrets
          
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            - name: cache
              mountPath: /app/cache
            - name: tmp
              mountPath: /tmp
            - name: docker-socket
              mountPath: /var/run/docker.sock
              readOnly: true
            - name: kubeconfig
              mountPath: /app/.kube
              readOnly: true
          
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 2
              memory: 4Gi
          
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: health
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: health
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          
          startupProbe:
            httpGet:
              path: /health/startup
              port: health
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30
          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
        
        - name: docker-in-docker
          image: docker:24-dind
          securityContext:
            privileged: true
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ""
            - name: DOCKER_DRIVER
              value: overlay2
          volumeMounts:
            - name: docker-storage
              mountPath: /var/lib/docker
            - name: docker-tmp
              mountPath: /tmp
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1
              memory: 2Gi
      
      volumes:
        - name: config
          configMap:
            name: pipeline-config
            defaultMode: 0644
        
        - name: cache
          emptyDir:
            sizeLimit: 10Gi
        
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
            type: Socket
        
        - name: docker-storage
          emptyDir:
            sizeLimit: 20Gi
        
        - name: docker-tmp
          emptyDir:
            sizeLimit: 1Gi
        
        - name: kubeconfig
          secret:
            secretName: pipeline-kubeconfig
            defaultMode: 0600
            optional: true
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - plugin-pipeline-orchestrator
                topologyKey: kubernetes.io/hostname
        
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/worker
                    operator: Exists
      
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      
      terminationGracePeriodSeconds: 60
      
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "2"
          - name: edns0
---
apiVersion: v1
kind: Service
metadata:
  name: plugin-pipeline-orchestrator
  namespace: plugin-pipeline
  labels:
    app: plugin-pipeline-orchestrator
    app.kubernetes.io/name: plugin-pipeline-orchestrator
    app.kubernetes.io/component: orchestrator
    app.kubernetes.io/part-of: plugin-pipeline
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: metrics
      protocol: TCP
    - name: health
      port: 8081
      targetPort: health
      protocol: TCP
  selector:
    app: plugin-pipeline-orchestrator
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: plugin-pipeline-orchestrator-hpa
  namespace: plugin-pipeline
  labels:
    app: plugin-pipeline-orchestrator
    app.kubernetes.io/name: plugin-pipeline-orchestrator
    app.kubernetes.io/component: orchestrator
    app.kubernetes.io/part-of: plugin-pipeline
  annotations:
    plugin-pipeline/description: "HPA for plugin pipeline orchestrator"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: plugin-pipeline-orchestrator
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      selectPolicy: Min
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      selectPolicy: Max
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
        - type: Percent
          value: 100
          periodSeconds: 60