apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "plugin-orchestrator.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "plugin-orchestrator.labels" . | nindent 4 }}
  annotations:
    deployment.kubernetes.io/revision: "{{ .Release.Revision }}"
    {{- if .Values.pluginOrchestrator.annotations }}
    {{- toYaml .Values.pluginOrchestrator.annotations | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.pluginOrchestrator.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  selector:
    matchLabels:
      {{- include "plugin-orchestrator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "{{ .Values.pluginOrchestrator.containerPorts.metrics }}"
        {{- if .Values.pluginOrchestrator.podAnnotations }}
        {{- toYaml .Values.pluginOrchestrator.podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        {{- include "plugin-orchestrator.selectorLabels" . | nindent 8 }}
        {{- if .Values.pluginOrchestrator.podLabels }}
        {{- toYaml .Values.pluginOrchestrator.podLabels | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.pluginOrchestrator.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "plugin-orchestrator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.pluginOrchestrator.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 60
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.pluginOrchestrator.securityContext | nindent 12 }}
          image: "{{ .Values.pluginOrchestrator.image.registry }}/{{ .Values.pluginOrchestrator.image.repository }}:{{ .Values.pluginOrchestrator.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.pluginOrchestrator.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.pluginOrchestrator.containerPorts.http }}
              protocol: TCP
            - name: health
              containerPort: {{ .Values.pluginOrchestrator.containerPorts.health }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.pluginOrchestrator.containerPorts.metrics }}
              protocol: TCP
          env:
            # Basic configuration
            - name: NODE_ENV
              value: {{ .Values.pluginOrchestrator.env.NODE_ENV | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.pluginOrchestrator.env.LOG_LEVEL | quote }}
            - name: PORT
              value: {{ .Values.pluginOrchestrator.containerPorts.http | quote }}
            - name: HEALTH_PORT
              value: {{ .Values.pluginOrchestrator.containerPorts.health | quote }}
            - name: METRICS_PORT
              value: {{ .Values.pluginOrchestrator.containerPorts.metrics | quote }}
            
            # Kubernetes configuration
            - name: KUBERNETES_IN_CLUSTER
              value: {{ .Values.pluginOrchestrator.env.KUBERNETES_IN_CLUSTER | quote }}
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            
            # Database configuration
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "plugin-orchestrator.secretName" . }}
                  key: database-url
            
            # Redis configuration
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "plugin-orchestrator.secretName" . }}
                  key: redis-url
            
            # Docker registry configuration
            - name: DOCKER_REGISTRY_URL
              value: {{ .Values.pluginOrchestrator.config.docker.registryUrl | quote }}
            
            # Service mesh configuration
            - name: SERVICE_MESH_PROVIDER
              value: {{ .Values.pluginOrchestrator.config.serviceMesh.provider | quote }}
            
            # Monitoring configuration
            - name: PROMETHEUS_ENABLED
              value: {{ .Values.pluginOrchestrator.config.monitoring.prometheus.enabled | quote }}
            - name: TRACING_ENABLED
              value: {{ .Values.pluginOrchestrator.config.monitoring.tracing.enabled | quote }}
            - name: TRACING_ENDPOINT
              value: {{ .Values.pluginOrchestrator.config.monitoring.tracing.endpoint | quote }}
            - name: TRACING_SAMPLING_RATE
              value: {{ .Values.pluginOrchestrator.config.monitoring.tracing.samplingRate | quote }}
            
            # Security configuration
            - name: SECURITY_TRIVY_ENABLED
              value: {{ .Values.pluginOrchestrator.config.security.scanners.trivy.enabled | quote }}
            
            # Additional environment variables
            {{- range $key, $value := .Values.pluginOrchestrator.extraEnv }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            
            # Secret environment variables
            {{- if .Values.pluginOrchestrator.config.security.scanners.snyk.enabled }}
            - name: SNYK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "plugin-orchestrator.secretName" . }}
                  key: snyk-token
            {{- end }}
          
          envFrom:
            - configMapRef:
                name: {{ include "plugin-orchestrator.fullname" . }}-config
          
          {{- if .Values.healthChecks.livenessProbe.enabled }}
          livenessProbe:
            {{- toYaml .Values.healthChecks.livenessProbe.httpGet | nindent 12 }}
            initialDelaySeconds: {{ .Values.healthChecks.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.healthChecks.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.healthChecks.livenessProbe.successThreshold }}
          {{- end }}
          
          {{- if .Values.healthChecks.readinessProbe.enabled }}
          readinessProbe:
            {{- toYaml .Values.healthChecks.readinessProbe.httpGet | nindent 12 }}
            initialDelaySeconds: {{ .Values.healthChecks.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.healthChecks.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.healthChecks.readinessProbe.successThreshold }}
          {{- end }}
          
          {{- if .Values.healthChecks.startupProbe.enabled }}
          startupProbe:
            {{- toYaml .Values.healthChecks.startupProbe.httpGet | nindent 12 }}
            initialDelaySeconds: {{ .Values.healthChecks.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.healthChecks.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.healthChecks.startupProbe.successThreshold }}
          {{- end }}
          
          resources:
            {{- toYaml .Values.pluginOrchestrator.resources | nindent 12 }}
          
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: /app/data
            {{- end }}
            {{- if .Values.pluginOrchestrator.extraVolumeMounts }}
            {{- toYaml .Values.pluginOrchestrator.extraVolumeMounts | nindent 12 }}
            {{- end }}
          
          # Graceful shutdown
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    echo "Initiating graceful shutdown..."
                    # Send SIGTERM to the process
                    kill -TERM 1
                    # Wait for graceful shutdown
                    sleep 30
      
      volumes:
        - name: config
          configMap:
            name: {{ include "plugin-orchestrator.fullname" . }}-config
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: cache
          emptyDir:
            sizeLimit: 5Gi
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "plugin-orchestrator.fullname" . }}-data
        {{- end }}
        {{- if .Values.pluginOrchestrator.extraVolumes }}
        {{- toYaml .Values.pluginOrchestrator.extraVolumes | nindent 8 }}
        {{- end }}
      
      {{- with .Values.pluginOrchestrator.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- with .Values.pluginOrchestrator.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- with .Values.pluginOrchestrator.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # Priority and preemption
      {{- if .Values.pluginOrchestrator.priorityClassName }}
      priorityClassName: {{ .Values.pluginOrchestrator.priorityClassName }}
      {{- end }}
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "2"
          - name: edns0