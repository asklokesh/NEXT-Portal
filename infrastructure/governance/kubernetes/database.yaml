apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: governance-system
type: Opaque
stringData:
  username: governance_user
  password: governance_secure_password_2024
  database: governance
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: governance-system
data:
  postgresql.conf: |
    # PostgreSQL configuration for governance system
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_duration = on
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    
    # Security
    ssl = on
    ssl_cert_file = '/etc/ssl/certs/server.crt'
    ssl_key_file = '/etc/ssl/private/server.key'
  
  init-governance-db.sql: |
    -- Create governance database schema
    
    -- Extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "ltree";
    
    -- Governance policies table
    CREATE TABLE IF NOT EXISTS governance_policies (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(255) NOT NULL,
        version VARCHAR(50) NOT NULL,
        category VARCHAR(100) NOT NULL,
        severity VARCHAR(50) NOT NULL,
        rules JSONB NOT NULL,
        scope JSONB NOT NULL,
        enforcement JSONB NOT NULL,
        metadata JSONB NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        UNIQUE(name, version)
    );
    
    -- Compliance assessments table
    CREATE TABLE IF NOT EXISTS compliance_assessments (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        framework VARCHAR(100) NOT NULL,
        target_id VARCHAR(255) NOT NULL,
        status VARCHAR(50) NOT NULL,
        score INTEGER NOT NULL CHECK (score >= 0 AND score <= 100),
        findings JSONB NOT NULL,
        evidence JSONB NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        completed_at TIMESTAMP WITH TIME ZONE,
        next_assessment_at TIMESTAMP WITH TIME ZONE
    );
    
    -- Security vulnerabilities table
    CREATE TABLE IF NOT EXISTS security_vulnerabilities (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        target_id VARCHAR(255) NOT NULL,
        target_type VARCHAR(100) NOT NULL,
        cve_id VARCHAR(50),
        severity VARCHAR(50) NOT NULL,
        score DECIMAL(3,1),
        title VARCHAR(500) NOT NULL,
        description TEXT,
        status VARCHAR(50) NOT NULL DEFAULT 'open',
        discovered_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        patched_at TIMESTAMP WITH TIME ZONE,
        metadata JSONB NOT NULL
    );
    
    -- Quality gate executions table
    CREATE TABLE IF NOT EXISTS quality_gate_executions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        gate_id UUID NOT NULL,
        target_id VARCHAR(255) NOT NULL,
        target_type VARCHAR(100) NOT NULL,
        status VARCHAR(50) NOT NULL,
        results JSONB NOT NULL,
        context JSONB NOT NULL,
        triggered_by VARCHAR(255) NOT NULL,
        started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        completed_at TIMESTAMP WITH TIME ZONE,
        duration_ms INTEGER
    );
    
    -- Audit log table
    CREATE TABLE IF NOT EXISTS audit_log (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        actor_type VARCHAR(50) NOT NULL,
        actor_id VARCHAR(255) NOT NULL,
        action VARCHAR(255) NOT NULL,
        resource_type VARCHAR(100) NOT NULL,
        resource_id VARCHAR(255) NOT NULL,
        outcome VARCHAR(50) NOT NULL,
        details JSONB NOT NULL,
        metadata JSONB,
        compliance_relevant BOOLEAN DEFAULT FALSE,
        frameworks VARCHAR(100)[] DEFAULT '{}',
        retention_days INTEGER DEFAULT 365
    );
    
    -- Alerts table
    CREATE TABLE IF NOT EXISTS governance_alerts (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        type VARCHAR(100) NOT NULL,
        severity VARCHAR(50) NOT NULL,
        title VARCHAR(500) NOT NULL,
        description TEXT,
        source_service VARCHAR(255) NOT NULL,
        source_component VARCHAR(255) NOT NULL,
        status VARCHAR(50) NOT NULL DEFAULT 'active',
        metadata JSONB NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        acknowledged_at TIMESTAMP WITH TIME ZONE,
        resolved_at TIMESTAMP WITH TIME ZONE,
        acknowledged_by VARCHAR(255),
        resolved_by VARCHAR(255)
    );
    
    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_governance_policies_category ON governance_policies(category);
    CREATE INDEX IF NOT EXISTS idx_governance_policies_severity ON governance_policies(severity);
    CREATE INDEX IF NOT EXISTS idx_governance_policies_created_at ON governance_policies(created_at);
    
    CREATE INDEX IF NOT EXISTS idx_compliance_assessments_framework ON compliance_assessments(framework);
    CREATE INDEX IF NOT EXISTS idx_compliance_assessments_target_id ON compliance_assessments(target_id);
    CREATE INDEX IF NOT EXISTS idx_compliance_assessments_status ON compliance_assessments(status);
    CREATE INDEX IF NOT EXISTS idx_compliance_assessments_created_at ON compliance_assessments(created_at);
    
    CREATE INDEX IF NOT EXISTS idx_security_vulnerabilities_target ON security_vulnerabilities(target_id, target_type);
    CREATE INDEX IF NOT EXISTS idx_security_vulnerabilities_severity ON security_vulnerabilities(severity);
    CREATE INDEX IF NOT EXISTS idx_security_vulnerabilities_status ON security_vulnerabilities(status);
    CREATE INDEX IF NOT EXISTS idx_security_vulnerabilities_cve_id ON security_vulnerabilities(cve_id);
    
    CREATE INDEX IF NOT EXISTS idx_quality_gate_executions_gate_id ON quality_gate_executions(gate_id);
    CREATE INDEX IF NOT EXISTS idx_quality_gate_executions_target ON quality_gate_executions(target_id, target_type);
    CREATE INDEX IF NOT EXISTS idx_quality_gate_executions_status ON quality_gate_executions(status);
    CREATE INDEX IF NOT EXISTS idx_quality_gate_executions_started_at ON quality_gate_executions(started_at);
    
    CREATE INDEX IF NOT EXISTS idx_audit_log_timestamp ON audit_log(timestamp);
    CREATE INDEX IF NOT EXISTS idx_audit_log_actor ON audit_log(actor_type, actor_id);
    CREATE INDEX IF NOT EXISTS idx_audit_log_action ON audit_log(action);
    CREATE INDEX IF NOT EXISTS idx_audit_log_resource ON audit_log(resource_type, resource_id);
    CREATE INDEX IF NOT EXISTS idx_audit_log_compliance ON audit_log(compliance_relevant) WHERE compliance_relevant = true;
    
    CREATE INDEX IF NOT EXISTS idx_governance_alerts_type ON governance_alerts(type);
    CREATE INDEX IF NOT EXISTS idx_governance_alerts_severity ON governance_alerts(severity);
    CREATE INDEX IF NOT EXISTS idx_governance_alerts_status ON governance_alerts(status);
    CREATE INDEX IF NOT EXISTS idx_governance_alerts_created_at ON governance_alerts(created_at);
    
    -- Create updated_at trigger function
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';
    
    -- Apply updated_at trigger to governance_policies
    DROP TRIGGER IF EXISTS update_governance_policies_updated_at ON governance_policies;
    CREATE TRIGGER update_governance_policies_updated_at
        BEFORE UPDATE ON governance_policies
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO governance_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO governance_user;
    GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO governance_user;
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: governance-system
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: governance-system
  labels:
    app: postgres
    component: database
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
          readOnly: true
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: database
        ports:
        - containerPort: 9187
          name: metrics
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
          items:
          - key: postgresql.conf
            path: postgresql.conf
      - name: postgres-init
        configMap:
          name: postgres-config
          items:
          - key: init-governance-db.sql
            path: 01-init-governance-db.sql
      securityContext:
        fsGroup: 999
      serviceAccountName: postgres
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: governance-system
  labels:
    app: postgres
    component: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: 9187
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres
  namespace: governance-system
  labels:
    app: postgres
    component: database