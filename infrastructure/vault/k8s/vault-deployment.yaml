apiVersion: v1
kind: Namespace
metadata:
  name: vault-system
  labels:
    name: vault-system
    app.kubernetes.io/name: vault
    app.kubernetes.io/part-of: backstage-platform
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
  namespace: vault-system
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: server
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vault-auth
rules:
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-auth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vault-auth
subjects:
- kind: ServiceAccount
  name: vault
  namespace: vault-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: vault-system
data:
  vault.hcl: |
    ui = true
    api_addr = "https://0.0.0.0:8200"
    cluster_addr = "https://0.0.0.0:8201"

    # High availability backend using integrated storage (Raft)
    storage "raft" {
      path = "/vault/data"
      node_id = "${HOSTNAME}"
      
      retry_join {
        leader_api_addr = "https://vault-0.vault-internal:8200"
      }
      retry_join {
        leader_api_addr = "https://vault-1.vault-internal:8200"
      }
      retry_join {
        leader_api_addr = "https://vault-2.vault-internal:8200"
      }

      autopilot {
        cleanup_dead_servers = true
        last_contact_threshold = "200ms"
        last_contact_failure_threshold = "10m"
        max_trailing_logs = 250000
        min_quorum = 3
        server_stabilization_time = "10s"
      }
    }

    # TLS Listener
    listener "tcp" {
      address     = "0.0.0.0:8200"
      tls_cert_file = "/vault/ssl/tls.crt"
      tls_key_file  = "/vault/ssl/tls.key"
      tls_min_version = "tls12"
      tls_require_and_verify_client_cert = false
      tls_disable_client_certs = true
    }

    # Cluster listener
    listener "tcp" {
      address     = "0.0.0.0:8201"
      purpose     = "cluster"
      tls_cert_file = "/vault/ssl/tls.crt"
      tls_key_file  = "/vault/ssl/tls.key"
    }

    # Auto-unsealing with Kubernetes secrets
    seal "kubernetes" {
      secret_name = "vault-unseal"
      secret_key = "unseal-key"
    }

    # Performance
    default_lease_ttl = "168h"
    max_lease_ttl = "8760h"
    disable_mlock = true
    
    # Logging
    log_level = "INFO"
    log_format = "json"
    
    # Telemetry
    telemetry {
      prometheus_retention_time = "24h"
      disable_hostname = true
    }

    # Cluster name
    cluster_name = "vault-k8s-cluster"

    # Plugin directory
    plugin_directory = "/vault/plugins"
---
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: vault-system
  labels:
    app.kubernetes.io/name: vault
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
    - name: https
      port: 8200
      targetPort: 8200
    - name: cluster
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: server
---
apiVersion: v1
kind: Service
metadata:
  name: vault-internal
  namespace: vault-system
  labels:
    app.kubernetes.io/name: vault
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: https
      port: 8200
      targetPort: 8200
    - name: cluster
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: server
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
  namespace: vault-system
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: server
spec:
  serviceName: vault-internal
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: vault
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault
        app.kubernetes.io/component: server
    spec:
      serviceAccountName: vault
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: vault
                  app.kubernetes.io/component: server
              topologyKey: kubernetes.io/hostname
      containers:
        - name: vault
          image: hashicorp/vault:1.16.1
          imagePullPolicy: IfNotPresent
          ports:
            - name: https
              containerPort: 8200
            - name: cluster
              containerPort: 8201
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_ADDR
              value: "https://127.0.0.1:8200"
            - name: VAULT_API_ADDR
              value: "https://$(HOSTNAME).vault-internal:8200"
            - name: VAULT_CLUSTER_ADDR
              value: "https://$(HOSTNAME).vault-internal:8201"
            - name: VAULT_LOG_LEVEL
              value: "info"
            - name: VAULT_LOG_FORMAT
              value: "json"
            - name: VAULT_RAFT_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: config
              mountPath: /vault/config/vault.hcl
              subPath: vault.hcl
              readOnly: true
            - name: data
              mountPath: /vault/data
            - name: audit
              mountPath: /vault/audit
            - name: ssl
              mountPath: /vault/ssl
              readOnly: true
          resources:
            limits:
              memory: "2Gi"
              cpu: "1000m"
            requests:
              memory: "1Gi"
              cpu: "500m"
          securityContext:
            capabilities:
              add: ["IPC_LOCK"]
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 100
            runAsGroup: 1000
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /v1/sys/health?standbyok=true
              port: 8200
              scheme: HTTPS
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /v1/sys/health?standbyok=true
              port: 8200
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: config
          configMap:
            name: vault-config
        - name: ssl
          secret:
            secretName: vault-tls
        - name: audit
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 50Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: vault-unseal
  namespace: vault-system
type: Opaque
data:
  unseal-key: "VGhpcyBpcyBhIGJhc2U2NC1lbmNvZGVkIHVuc2VhbCBrZXk="
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vault
  namespace: vault-system
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - vault.backstage.local
      secretName: vault-tls-cert
  rules:
    - host: vault.backstage.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: vault
                port:
                  number: 8200