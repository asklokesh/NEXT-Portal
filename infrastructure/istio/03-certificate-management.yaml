apiVersion: v1
kind: Secret
metadata:
  name: cacerts
  namespace: istio-system
  labels:
    istio.io/config: "true"
type: Opaque
data:
  # Root certificate for the mesh
  # These would be base64 encoded in production
  root-cert.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  cert-chain.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: certificate-rotation-config
  namespace: istio-system
data:
  rotation-interval: "24h"
  grace-period: "12h"
  cert-validity-period: "8760h" # 1 year
  root-ca-validity-period: "87600h" # 10 years
---
# Certificate rotation automation
apiVersion: batch/v1
kind: CronJob
metadata:
  name: certificate-rotation
  namespace: istio-system
spec:
  schedule: "0 2 * * *" # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: certificate-rotation
            version: v1
        spec:
          serviceAccountName: certificate-rotation
          containers:
          - name: cert-rotator
            image: istio/pilot:1.20.0
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting certificate rotation..."
              
              # Check certificate expiry
              CERT_EXPIRY=$(openssl x509 -in /etc/ssl/certs/cert-chain.pem -noout -enddate | cut -d= -f2)
              CURRENT_DATE=$(date)
              DAYS_TO_EXPIRY=$(( ($(date -d "$CERT_EXPIRY" +%s) - $(date +%s)) / 86400 ))
              
              echo "Certificate expires on: $CERT_EXPIRY"
              echo "Days to expiry: $DAYS_TO_EXPIRY"
              
              # Rotate if less than 30 days to expiry
              if [ $DAYS_TO_EXPIRY -lt 30 ]; then
                echo "Certificate rotation required"
                
                # Generate new certificate
                istioctl proxy-config secret istiod-$ISTIOD_POD_NAME.istio-system --file-only > /tmp/new-cert.yaml
                
                # Apply new certificate
                kubectl apply -f /tmp/new-cert.yaml -n istio-system
                
                # Restart istiod to pick up new certificates
                kubectl rollout restart deployment/istiod -n istio-system
                
                echo "Certificate rotation completed"
              else
                echo "Certificate rotation not required"
              fi
            env:
            - name: ISTIOD_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            volumeMounts:
            - name: cacerts
              mountPath: /etc/ssl/certs
              readOnly: true
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 512Mi
          volumes:
          - name: cacerts
            secret:
              secretName: cacerts
          restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: certificate-rotation
  namespace: istio-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: certificate-rotation
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch", "update"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: certificate-rotation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: certificate-rotation
subjects:
- kind: ServiceAccount
  name: certificate-rotation
  namespace: istio-system
---
# Certificate monitoring and alerting
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: certificate-metrics
  namespace: istio-system
  labels:
    app: certificate-monitoring
spec:
  selector:
    matchLabels:
      app: certificate-exporter
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: certificate-exporter
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: certificate-exporter
  template:
    metadata:
      labels:
        app: certificate-exporter
        version: v1
    spec:
      serviceAccountName: certificate-rotation
      containers:
      - name: certificate-exporter
        image: enix/x509-certificate-exporter:3.13.0
        ports:
        - containerPort: 9090
          name: metrics
        args:
        - --port=9090
        - --include-cert-glob=/etc/ssl/certs/*.pem
        - --include-kubesecrets-glob=istio-system/*
        - --watch-kube-secrets
        - --listen-address=0.0.0.0:9090
        - --log-level=info
        volumeMounts:
        - name: cacerts
          mountPath: /etc/ssl/certs
          readOnly: true
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: cacerts
        secret:
          secretName: cacerts
---
apiVersion: v1
kind: Service
metadata:
  name: certificate-exporter
  namespace: istio-system
  labels:
    app: certificate-exporter
spec:
  selector:
    app: certificate-exporter
  ports:
  - name: metrics
    port: 9090
    targetPort: 9090