#!/bin/bash # Production Setup Script for SaaS IDP Portal # This script prepares the application for production deployment with high concurrency support set -e echo "Setting up SaaS IDP Portal for Production..." # Colors for output RED='\033[0;31m' GREEN='\033[0;32m' YELLOW='\033[1;33m' BLUE='\033[0;34m' NC='\033[0m' # No Color # Function to print colored output print_status() { echo -e "${BLUE}[INFO]${NC} $1" } print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1" } print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1" } print_error() { echo -e "${RED}[ERROR]${NC} $1" } # Check if running as root if [[ $EUID -eq 0 ]]; then print_error "This script should not be run as root for security reasons" exit 1 fi # Check Node.js version print_status "Checking Node.js version..." NODE_VERSION=$(node --version | cut -d'v' -f2) REQUIRED_VERSION="18.0.0" if ! command -v node &> /dev/null; then print_error "Node.js is not installed. Please install Node.js 18+ first." exit 1 fi print_success "Node.js version: $NODE_VERSION" # Install PM2 globally if not present if ! command -v pm2 &> /dev/null; then print_status "Installing PM2 globally..." npm install -g pm2 print_success "PM2 installed successfully" else print_success "PM2 is already installed" fi # Create logs directory print_status "Creating logs directory..." mkdir -p logs chmod 755 logs # Install dependencies print_status "Installing production dependencies..." npm ci --only=production # Build the application print_status "Building application for production..." npm run build # Set up system limits for high concurrency print_status "Checking system limits..." CURRENT_ULIMIT=$(ulimit -n) RECOMMENDED_ULIMIT=65536 if [ "$CURRENT_ULIMIT" -lt "$RECOMMENDED_ULIMIT" ]; then print_warning "Current file descriptor limit ($CURRENT_ULIMIT) is below recommended ($RECOMMENDED_ULIMIT)" print_warning "Consider running: ulimit -n $RECOMMENDED_ULIMIT" print_warning "Or add to /etc/security/limits.conf:" print_warning " * soft nofile $RECOMMENDED_ULIMIT" print_warning " * hard nofile $RECOMMENDED_ULIMIT" fi # Configure PM2 print_status "Configuring PM2..." pm2 install pm2-logrotate pm2 set pm2-logrotate:max_size 10M pm2 set pm2-logrotate:retain 30 pm2 set pm2-logrotate:compress true # Generate PM2 startup script print_status "Setting up PM2 startup script..." pm2 startup # Database setup (if needed) if [ -f "prisma/schema.prisma" ]; then print_status "Setting up database..." npm run db:generate npm run db:migrate fi # Performance optimizations print_status "Applying performance optimizations..." # Create .env.production if it doesn't exist if [ ! -f ".env.production" ]; then print_status "Creating production environment file..." cat > .env.production << EOF NODE_ENV=production PORT=4400 NEXT_TELEMETRY_DISABLED=1 # Database (update with your production values) DATABASE_URL="postgresql://username:password@localhost:5432/saas_idp_prod" # Redis (update with your production values) REDIS_URL="redis://localhost:6379" # Backstage backend URL BACKSTAGE_BACKEND_URL="http://localhost:4402" # Security NEXTAUTH_SECRET="your-nextauth-secret-here-change-in-production" NEXTAUTH_URL="https://your-domain.com" # Performance NEXT_TELEMETRY_DISABLED=1 NODE_OPTIONS="--max-old-space-size=4096" EOF print_warning "Created .env.production - please update with your production values!" fi # Create nginx configuration directory print_status "Setting up nginx configuration..." sudo mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled 2>/dev/null || { print_warning "Could not create nginx directories (no sudo access). Manual nginx setup required." } # Performance testing setup print_status "Setting up performance testing..." cat > performance-test.sh << 'EOF' #!/bin/bash # Quick performance test script echo " Running performance tests..." # Test concurrent connections echo "Testing with 100 concurrent users for 30 seconds..." npm run test:performance -- --vus=100 --duration=30s # Test API endpoints echo "Testing API endpoints..." curl -w "@curl-format.txt" -o /dev/null -s "http://localhost:4400/api/health" echo "Performance test completed!" EOF chmod +x performance-test.sh # Create curl format file for performance testing cat > curl-format.txt << 'EOF' time_namelookup: %{time_namelookup}\n time_connect: %{time_connect}\n time_appconnect: %{time_appconnect}\n time_pretransfer: %{time_pretransfer}\n time_redirect: %{time_redirect}\n time_starttransfer: %{time_starttransfer}\n ----------\n time_total: %{time_total}\n EOF # Create monitoring script print_status "Creating monitoring script..." cat > monitor.sh << 'EOF' #!/bin/bash echo "SaaS IDP Portal Monitoring" echo "==============================" echo "PM2 Status:" pm2 status echo -e "\nSystem Resources:" echo "Memory Usage: $(free -h | awk 'NR==2{printf "%.1f%% (%s/%s)\n", $3*100/$2, $3, $2}')" echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%" echo "Disk Usage: $(df -h . | awk 'NR==2{printf "%s (%s)\n", $5, $4}')" echo -e "\nNetwork Connections:" netstat -an | grep :4400 | wc -l | awk '{print "Active connections on port 4400: " $1}' echo -e "\nApplication Health:" curl -s http://localhost:4400/api/health || echo "Health check failed" EOF chmod +x monitor.sh print_success "Production setup completed!" print_status "Next steps:" echo "1. Update .env.production with your production values" echo "2. Configure nginx: sudo cp nginx.conf /etc/nginx/sites-available/saas-idp" echo "3. Enable the site: sudo ln -s /etc/nginx/sites-available/saas-idp /etc/nginx/sites-enabled/" echo "4. Test nginx config: sudo nginx -t" echo "5. Reload nginx: sudo systemctl reload nginx" echo "6. Start production server: npm run start:production" echo "7. Save PM2 configuration: pm2 save" echo "8. Monitor with: ./monitor.sh" echo "9. Run performance tests: ./performance-test.sh" print_warning "Remember to:" echo "- Set up SSL certificates for HTTPS" echo "- Configure firewall rules" echo "- Set up database backups" echo "- Configure log rotation" echo "- Set up monitoring and alerting" print_success "Production setup ready!"