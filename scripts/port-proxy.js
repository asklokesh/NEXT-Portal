#!/usr/bin/env node /** * Simple HTTP proxy to forward port 3000 to 4400 for legacy compatibility * This ensures users can access the portal on the expected port 3000 */ const http = require('http'); const httpProxy = require('http-proxy'); const proxy = httpProxy.createProxyServer({}); const target = 'http://localhost:4400'; const server = http.createServer((req, res) => { console.log(`[PROXY] ${req.method} ${req.url} -> ${target}`); // Add CORS headers if needed res.setHeader('Access-Control-Allow-Origin', '*'); res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS'); res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization'); if (req.method === 'OPTIONS') { res.writeHead(204); res.end(); return; } proxy.web(req, res, { target }, (err) => { console.error(`[PROXY ERROR] ${err.message}`); res.writeHead(503, { 'Content-Type': 'text/plain' }); res.end('Portal temporarily unavailable. Please try accessing http://localhost:4400 directly.'); }); }); // Handle WebSocket proxying server.on('upgrade', (req, socket, head) => { console.log(`[PROXY WS] ${req.url} -> ${target}`); proxy.ws(req, socket, head, { target }); }); const PORT = 3000; server.listen(PORT, () => { console.log(` Portal Proxy running on http://localhost:${PORT}`); console.log(` Forwarding to: ${target}`); console.log(` This fixes the 404 errors by routing traffic to the correct port`); }); // Graceful shutdown process.on('SIGTERM', () => { console.log('\n Portal Proxy shutting down gracefully...'); server.close(() => { process.exit(0); }); });