#!/bin/bash # Production Monitoring Setup Script for SaaS IDP # This script sets up the complete monitoring infrastructure set -euo pipefail # Configuration MONITORING_DIR="/opt/monitoring" CONFIG_DIR="/Users/lokesh/git/saas-idp/config/observability" BACKUP_DIR="/opt/monitoring/backups" LOG_FILE="/var/log/monitoring-setup.log" # Colors for output RED='\033[0;31m' GREEN='\033[0;32m' YELLOW='\033[1;33m' BLUE='\033[0;34m' NC='\033[0m' # No Color # Logging function log() { echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE" } error() { echo -e "${RED}[ERROR $(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE" } warn() { echo -e "${YELLOW}[WARN $(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE" } info() { echo -e "${BLUE}[INFO $(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE" } # Check if running as root check_root() { if [[ $EUID -ne 0 ]]; then error "This script must be run as root (use sudo)" exit 1 fi } # Check system requirements check_requirements() { log "Checking system requirements..." # Check available disk space (minimum 100GB) AVAILABLE_SPACE=$(df /opt --output=avail | tail -1) REQUIRED_SPACE=$((100 * 1024 * 1024)) # 100GB in KB if [[ $AVAILABLE_SPACE -lt $REQUIRED_SPACE ]]; then error "Insufficient disk space. Required: 100GB, Available: $((AVAILABLE_SPACE / 1024 / 1024))GB" exit 1 fi # Check memory (minimum 8GB) TOTAL_MEM=$(free -m | awk 'NR==2{print $2}') if [[ $TOTAL_MEM -lt 8192 ]]; then warn "Low memory detected: ${TOTAL_MEM}MB. Recommended: 8GB+" fi # Check Docker if ! command -v docker &> /dev/null; then error "Docker is not installed. Please install Docker first." exit 1 fi # Check Docker Compose if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then error "Docker Compose is not installed. Please install Docker Compose first." exit 1 fi log "System requirements check completed" } # Create necessary directories create_directories() { log "Creating monitoring directories..." mkdir -p "$MONITORING_DIR"/{prometheus,grafana,alertmanager,loki,promtail,jaeger} mkdir -p "$BACKUP_DIR"/{prometheus,grafana,alertmanager} mkdir -p /var/log/monitoring # Set permissions chown -R 472:472 "$MONITORING_DIR/grafana" # Grafana user chown -R 65534:65534 "$MONITORING_DIR/prometheus" # nobody user chown -R 65534:65534 "$MONITORING_DIR/alertmanager" chown -R 10001:10001 "$MONITORING_DIR/loki" # Loki user log "Directories created successfully" } # Generate SSL certificates generate_certificates() { log "Generating SSL certificates for monitoring services..." CERT_DIR="$MONITORING_DIR/certs" mkdir -p "$CERT_DIR" # Generate CA certificate openssl genrsa -out "$CERT_DIR/ca.key" 4096 openssl req -new -x509 -key "$CERT_DIR/ca.key" -sha256 -subj "/C=US/ST=CA/O=SaaS-IDP/CN=MonitoringCA" -days 3650 -out "$CERT_DIR/ca.crt" # Generate service certificates for service in prometheus grafana alertmanager; do openssl genrsa -out "$CERT_DIR/${service}.key" 4096 openssl req -subj "/C=US/ST=CA/O=SaaS-IDP/CN=${service}.saas-idp.com" -sha256 -new -key "$CERT_DIR/${service}.key" -out "$CERT_DIR/${service}.csr" openssl x509 -req -in "$CERT_DIR/${service}.csr" -CA "$CERT_DIR/ca.crt" -CAkey "$CERT_DIR/ca.key" -out "$CERT_DIR/${service}.crt" -days 365 -sha256 rm "$CERT_DIR/${service}.csr" done log "SSL certificates generated successfully" } # Setup Prometheus configuration setup_prometheus() { log "Setting up Prometheus configuration..." # Copy configuration files cp "$CONFIG_DIR/prometheus.yml" "$MONITORING_DIR/prometheus/" cp "$CONFIG_DIR/production-alert-rules.yml" "$MONITORING_DIR/prometheus/" cp "$CONFIG_DIR/slo-monitoring.yml" "$MONITORING_DIR/prometheus/" # Validate Prometheus configuration docker run --rm -v "$MONITORING_DIR/prometheus:/etc/prometheus" prom/prometheus:v2.47.0 promtool check config /etc/prometheus/prometheus.yml docker run --rm -v "$MONITORING_DIR/prometheus:/etc/prometheus" prom/prometheus:v2.47.0 promtool check rules /etc/prometheus/production-alert-rules.yml docker run --rm -v "$MONITORING_DIR/prometheus:/etc/prometheus" prom/prometheus:v2.47.0 promtool check rules /etc/prometheus/slo-monitoring.yml log "Prometheus configuration setup completed" } # Setup AlertManager configuration setup_alertmanager() { log "Setting up AlertManager configuration..." # Copy configuration files cp "$CONFIG_DIR/production-alertmanager.yml" "$MONITORING_DIR/alertmanager/alertmanager.yml" cp -r "$CONFIG_DIR/templates" "$MONITORING_DIR/alertmanager/" # Validate AlertManager configuration docker run --rm -v "$MONITORING_DIR/alertmanager:/etc/alertmanager" prom/alertmanager:v0.26.0 amtool check-config /etc/alertmanager/alertmanager.yml log "AlertManager configuration setup completed" } # Setup Grafana configuration setup_grafana() { log "Setting up Grafana configuration..." # Create Grafana directories mkdir -p "$MONITORING_DIR/grafana/dashboards" mkdir -p "$MONITORING_DIR/grafana/provisioning/datasources" mkdir -p "$MONITORING_DIR/grafana/provisioning/dashboards" # Copy dashboard configurations cp "$CONFIG_DIR/grafana/dashboards/"*.json "$MONITORING_DIR/grafana/dashboards/" # Create datasources configuration cat > "$MONITORING_DIR/grafana/provisioning/datasources/datasources.yml" << EOF apiVersion: 1 datasources: - name: Prometheus type: prometheus access: proxy url: http://prometheus:9090 isDefault: true editable: false - name: Loki type: loki access: proxy url: http://loki:3100 editable: false - name: Jaeger type: jaeger access: proxy url: http://jaeger:16686 editable: false - name: AlertManager type: camptocamp-prometheus-alertmanager-datasource access: proxy url: http://alertmanager:9093 editable: false EOF # Create dashboard provisioning configuration cat > "$MONITORING_DIR/grafana/provisioning/dashboards/dashboards.yml" << EOF apiVersion: 1 providers: - name: 'SaaS IDP Dashboards' orgId: 1 folder: 'SaaS IDP' type: file disableDeletion: false updateIntervalSeconds: 10 allowUiUpdates: true options: path: /var/lib/grafana/dashboards EOF log "Grafana configuration setup completed" } # Setup environment variables setup_environment() { log "Setting up environment variables..." ENV_FILE="$MONITORING_DIR/.env" cat > "$ENV_FILE" << EOF # Grafana Configuration GRAFANA_ADMIN_PASSWORD=$(openssl rand -base64 32) # SendGrid Configuration (for email alerts) SENDGRID_API_KEY=your_sendgrid_api_key_here # OAuth Configuration (for Grafana SSO) OAUTH_CLIENT_ID=your_oauth_client_id_here OAUTH_CLIENT_SECRET=your_oauth_client_secret_here # Database Credentials DB_USER=saas_idp_monitor DB_PASSWORD=$(openssl rand -base64 32) DB_NAME=saas_idp # Redis Configuration REDIS_PASSWORD=$(openssl rand -base64 32) # PagerDuty Integration Keys PAGERDUTY_P0_INTEGRATION_KEY=your_p0_integration_key_here PAGERDUTY_P1_INTEGRATION_KEY=your_p1_integration_key_here PAGERDUTY_SECURITY_INTEGRATION_KEY=your_security_integration_key_here # Slack Webhook URLs SLACK_WEBHOOK_URL=your_slack_webhook_url_here # Twilio Configuration (for SMS alerts) TWILIO_ACCOUNT_SID=your_twilio_account_sid_here TWILIO_AUTH_TOKEN=your_twilio_auth_token_here EOF chmod 600 "$ENV_FILE" warn "Please update the environment variables in $ENV_FILE with your actual values" log "Environment variables setup completed" } # Create backup script create_backup_script() { log "Creating backup script..." cat > /usr/local/bin/backup-monitoring.sh << 'EOF' #!/bin/bash # Monitoring Backup Script BACKUP_DIR="/opt/monitoring/backups" DATE=$(date +%Y%m%d_%H%M%S) # Create backup directories mkdir -p "$BACKUP_DIR/$DATE" # Backup Prometheus data tar -czf "$BACKUP_DIR/$DATE/prometheus-$DATE.tar.gz" -C /opt/monitoring prometheus/ # Backup Grafana data tar -czf "$BACKUP_DIR/$DATE/grafana-$DATE.tar.gz" -C /opt/monitoring grafana/ # Backup AlertManager data tar -czf "$BACKUP_DIR/$DATE/alertmanager-$DATE.tar.gz" -C /opt/monitoring alertmanager/ # Upload to S3 (uncomment and configure if needed) # aws s3 cp "$BACKUP_DIR/$DATE/" s3://your-backup-bucket/monitoring/ --recursive # Clean up old backups (keep last 7 days) find "$BACKUP_DIR" -type d -mtime +7 -exec rm -rf {} + echo "Backup completed: $BACKUP_DIR/$DATE" EOF chmod +x /usr/local/bin/backup-monitoring.sh # Create cron job for daily backups echo "0 2 * * * /usr/local/bin/backup-monitoring.sh" | crontab - log "Backup script created and scheduled" } # Setup log rotation setup_log_rotation() { log "Setting up log rotation..." cat > /etc/logrotate.d/monitoring << EOF /var/log/monitoring/*.log { daily missingok rotate 30 compress delaycompress copytruncate create 644 root root } /opt/monitoring/*/logs/*.log { daily missingok rotate 30 compress delaycompress copytruncate create 644 root root } EOF log "Log rotation setup completed" } # Start monitoring stack start_monitoring() { log "Starting monitoring stack..." cd "$CONFIG_DIR" # Pull all required images docker-compose -f docker-compose.monitoring.yml pull # Start services docker-compose -f docker-compose.monitoring.yml up -d # Wait for services to start log "Waiting for services to start..." sleep 30 # Check service health check_service_health log "Monitoring stack started successfully" } # Check service health check_service_health() { log "Checking service health..." services=( "http://localhost:9090/-/healthy:Prometheus" "http://localhost:9093/-/healthy:AlertManager" "http://localhost:3000/api/health:Grafana" "http://localhost:3100/ready:Loki" "http://localhost:9100/metrics:NodeExporter" "http://localhost:8080/metrics:cAdvisor" "http://localhost:16686/:Jaeger" ) for service in "${services[@]}"; do url="${service%%:*}" name="${service##*:}" if curl -f -s "$url" > /dev/null; then log "$name is healthy" else error "$name is not responding" fi done } # Create monitoring dashboard URLs create_dashboard_urls() { log "Creating dashboard access information..." cat > "$MONITORING_DIR/access-info.txt" << EOF SaaS IDP Monitoring Stack - Access Information ============================================= Grafana: http://localhost:3000 Default Login: admin / (check .env file for password) Prometheus: http://localhost:9090 AlertManager: http://localhost:9093 Jaeger: http://localhost:16686 Karma (AlertUI): http://localhost:8082 Node Exporter: http://localhost:9100 cAdvisor: http://localhost:8080 Dashboards Available: - Executive Overview: http://localhost:3000/d/executive-overview - Technical Operations: http://localhost:3000/d/technical-operations - Plugin Performance: http://localhost:3000/d/plugin-performance-enhanced - User Experience: http://localhost:3000/d/user-experience - Security Dashboard: http://localhost:3000/d/security-threat-detection Important Files: - Environment Variables: $MONITORING_DIR/.env - Backup Script: /usr/local/bin/backup-monitoring.sh - Setup Log: $LOG_FILE Next Steps: 1. Update environment variables in $MONITORING_DIR/.env 2. Configure notification channels (Slack, PagerDuty, etc.) 3. Set up DNS/reverse proxy for external access 4. Test alert rules and notifications 5. Schedule regular backup verification EOF log "Dashboard access information created at $MONITORING_DIR/access-info.txt" } # Test alert system test_alerts() { log "Testing alert system..." # Send a test alert to verify the notification pipeline cat > /tmp/test-alert.json << EOF [ { "labels": { "alertname": "TestAlert", "severity": "info", "priority": "P2", "service": "monitoring", "component": "test" }, "annotations": { "summary": "Test alert for monitoring system verification", "description": "This is a test alert to verify the monitoring and alerting pipeline is working correctly.", "runbook_url": "https://docs.saas-idp.com/runbooks/test-alert" }, "startsAt": "$(date -Iseconds)", "endsAt": "$(date -Iseconds -d '+1 minute')" } ] EOF if curl -X POST -H "Content-Type: application/json" -d @/tmp/test-alert.json http://localhost:9093/api/v1/alerts; then log "Test alert sent successfully" else warn "Failed to send test alert - please check AlertManager configuration" fi rm /tmp/test-alert.json } # Main execution main() { log "Starting SaaS IDP Production Monitoring Setup" check_root check_requirements create_directories generate_certificates setup_prometheus setup_alertmanager setup_grafana setup_environment create_backup_script setup_log_rotation start_monitoring create_dashboard_urls test_alerts log "Monitoring setup completed successfully!" echo -e "${GREEN}" cat << 'EOF' ╔═══════════════════════════════════════════════════════════════════════════════╗ ║ SaaS IDP Monitoring Setup Complete! ║ ╠═══════════════════════════════════════════════════════════════════════════════╣ ║ ║ ║ Grafana: http://localhost:3000 ║ ║ Prometheus: http://localhost:9090 ║ ║ AlertManager: http://localhost:9093 ║ ║ Jaeger: http://localhost:16686 ║ ║ ║ ║ Next Steps: ║ ║ 1. Update environment variables in /opt/monitoring/.env ║ ║ 2. Configure notification channels ║ ║ 3. Test alert notifications ║ ║ 4. Set up external access with reverse proxy ║ ║ ║ ║ Access info: /opt/monitoring/access-info.txt ║ ║ Setup log: /var/log/monitoring-setup.log ║ ║ ║ ╚═══════════════════════════════════════════════════════════════════════════════╝ EOF echo -e "${NC}" } # Handle script interruption trap 'error "Setup interrupted"; exit 1' INT TERM # Execute main function main "$@"