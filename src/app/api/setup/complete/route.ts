import { NextRequest, NextResponse } from 'next/server';
import { writeFile } from 'fs/promises';
import path from 'path';

export async function POST(request: NextRequest) {
 try {
 const setupData = await request.json();

 // Validate required fields
 if (!setupData.backstageUrl || !setupData.databaseUrl || !setupData.organizationName || !setupData.adminEmail) {
 return NextResponse.json(
 { success: false, error: 'Missing required configuration' },
 { status: 400 }
 );
 }

 // Generate environment configuration
 const envConfig = generateEnvConfig(setupData);

 // In production, you would save this securely
 // For development, we'll create a setup-complete marker
 const setupCompleteData = {
 completedAt: new Date().toISOString(),
 organizationName: setupData.organizationName,
 adminEmail: setupData.adminEmail,
 features: setupData.features || {},
 integrations: setupData.enabledIntegrations || [],
 plugins: setupData.installedPlugins || [],
 };

 // Store setup completion marker (in production, use database)
 if (process.env.NODE_ENV === 'development') {
 try {
 const setupPath = path.join(process.cwd(), '.setup-complete.json');
 await writeFile(setupPath, JSON.stringify(setupCompleteData, null, 2));
 } catch (error) {
 console.error('Failed to write setup file:', error);
 }
 }

 // Initialize default data in database
 // This would typically include:
 // - Creating admin user
 // - Setting up default teams
 // - Configuring initial permissions
 // - Installing selected plugins

 return NextResponse.json({
 success: true,
 message: 'Setup completed successfully',
 config: {
 organization: setupData.organizationName,
 features: setupData.features,
 integrations: setupData.enabledIntegrations,
 plugins: setupData.installedPlugins,
 },
 });
 } catch (error) {
 console.error('Setup completion error:', error);
 
 return NextResponse.json(
 { success: false, error: 'Failed to complete setup' },
 { status: 500 }
 );
 }
}

function generateEnvConfig(data: any): string {
 const config = [
 '# Generated by Backstage IDP Setup Wizard',
 `# Created at: ${new Date().toISOString()}`,
 '',
 '# Backstage Configuration',
 `BACKSTAGE_API_URL="${data.backstageUrl}"`,
 data.backstageToken ? `BACKSTAGE_AUTH_TOKEN="${data.backstageToken}"` : '',
 '',
 '# Database Configuration',
 `DATABASE_URL="${data.databaseUrl}"`,
 data.redisUrl ? `REDIS_URL="${data.redisUrl}"` : '',
 '',
 '# Organization Settings',
 `NEXT_PUBLIC_APP_NAME="${data.organizationName}"`,
 `ADMIN_EMAIL="${data.adminEmail}"`,
 data.organizationDomain ? `ORGANIZATION_DOMAIN="${data.organizationDomain}"` : '',
 '',
 '# Authentication',
 `AUTH_PROVIDER="${data.authProvider || 'backstage'}"`,
 `SESSION_TIMEOUT="${data.sessionTimeout || '24'}"`,
 '',
 '# Feature Flags',
 ];

 // Add feature flags
 if (data.features) {
 Object.entries(data.features).forEach(([feature, enabled]) => {
 config.push(`ENABLE_${feature.toUpperCase()}="${enabled}"`);
 });
 }

 // Add integration configs
 if (data.integrationConfigs) {
 config.push('', '# Integrations');
 Object.entries(data.integrationConfigs).forEach(([integration, conf]: [string, any]) => {
 if (conf) {
 Object.entries(conf).forEach(([key, value]) => {
 if (value && key !== 'token' && key !== 'password') {
 config.push(`${integration.toUpperCase()}_${key.toUpperCase()}="${value}"`);
 }
 });
 }
 });
 }

 return config.filter(Boolean).join('\n');
}