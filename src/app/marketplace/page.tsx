'use client'; import { useState, useEffect } from 'react'; import { Search, Filter, Package, Download, Star, GitBranch, Shield, Clock, Users, TrendingUp, Code, Layers, Zap, Database, Cloud, Lock, AlertCircle, CheckCircle, ExternalLink, Heart, Share2, Settings, ChevronDown, Grid, List, SortAsc, Calendar, Award, Sparkles, Cpu, Globe, Terminal, BookOpen, Play, Eye } from 'lucide-react'; import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Input } from '@/components/ui/input'; import { Badge } from '@/components/ui/badge'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; import { Checkbox } from '@/components/ui/checkbox'; import { Label } from '@/components/ui/label'; import { Separator } from '@/components/ui/separator'; import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'; import { Progress } from '@/components/ui/progress'; import { toast } from 'sonner'; import { motion, AnimatePresence } from 'framer-motion'; interface Plugin { id: string; name: string; displayName: string; description: string; category: string; version: string; author: { name: string; avatar?: string; verified?: boolean; }; downloads: number; stars: number; rating: number; reviews: number; tags: string[]; compatibility: { backstage: string; node: string; }; dependencies: string[]; size: string; license: string; lastUpdated: string; installed?: boolean; featured?: boolean; trending?: boolean; verified?: boolean; securityScore?: number; homepage?: string; repository?: string; documentation?: string; icon?: string; screenshots?: string[]; } const categories = [ { id: 'all', name: 'All Plugins', icon: Package }, { id: 'ci-cd', name: 'CI/CD', icon: GitBranch }, { id: 'monitoring', name: 'Monitoring', icon: TrendingUp }, { id: 'security', name: 'Security', icon: Shield }, { id: 'cloud', name: 'Cloud', icon: Cloud }, { id: 'database', name: 'Database', icon: Database }, { id: 'developer-tools', name: 'Developer Tools', icon: Code }, { id: 'infrastructure', name: 'Infrastructure', icon: Layers }, { id: 'analytics', name: 'Analytics', icon: TrendingUp }, { id: 'automation', name: 'Automation', icon: Zap }, { id: 'ai-ml', name: 'AI/ML', icon: Cpu }, { id: 'communication', name: 'Communication', icon: Users } ]; const mockPlugins: Plugin[] = [ { id: 'github-actions', name: '@backstage/plugin-github-actions', displayName: 'GitHub Actions', description: 'View and manage GitHub Actions workflows directly from Backstage', category: 'ci-cd', version: '0.6.15', author: { name: 'Spotify', verified: true }, downloads: 245000, stars: 1250, rating: 4.8, reviews: 342, tags: ['github', 'ci-cd', 'workflows', 'automation'], compatibility: { backstage: '>=1.20.0', node: '>=18.0.0' }, dependencies: ['@backstage/core', '@octokit/rest'], size: '2.4 MB', license: 'Apache-2.0', lastUpdated: '2024-01-15', featured: true, verified: true, securityScore: 95, homepage: 'https://backstage.io/plugins/github-actions', repository: 'https://github.com/backstage/backstage', icon: '' }, { id: 'kubernetes', name: '@backstage/plugin-kubernetes', displayName: 'Kubernetes', description: 'Visualize and manage Kubernetes resources for your services', category: 'infrastructure', version: '0.11.8', author: { name: 'Spotify', verified: true }, downloads: 189000, stars: 982, rating: 4.7, reviews: 278, tags: ['kubernetes', 'k8s', 'containers', 'orchestration'], compatibility: { backstage: '>=1.18.0', node: '>=16.0.0' }, dependencies: ['@backstage/core', '@kubernetes/client-node'], size: '3.1 MB', license: 'Apache-2.0', lastUpdated: '2024-01-20', trending: true, verified: true, securityScore: 92, icon: '' }, { id: 'pagerduty', name: '@backstage/plugin-pagerduty', displayName: 'PagerDuty', description: 'Integrate PagerDuty incidents and on-call schedules', category: 'monitoring', version: '0.8.3', author: { name: 'PagerDuty', verified: true }, downloads: 87000, stars: 456, rating: 4.5, reviews: 123, tags: ['monitoring', 'incidents', 'on-call', 'alerting'], compatibility: { backstage: '>=1.15.0', node: '>=16.0.0' }, dependencies: ['@backstage/core'], size: '1.8 MB', license: 'Apache-2.0', lastUpdated: '2024-01-10', verified: true, securityScore: 88, icon: '' }, { id: 'sonarqube', name: '@backstage/plugin-sonarqube', displayName: 'SonarQube', description: 'Display code quality metrics and security analysis from SonarQube', category: 'security', version: '0.7.12', author: { name: 'SonarSource', verified: true }, downloads: 134000, stars: 678, rating: 4.6, reviews: 234, tags: ['security', 'code-quality', 'static-analysis', 'testing'], compatibility: { backstage: '>=1.17.0', node: '>=16.0.0' }, dependencies: ['@backstage/core', 'axios'], size: '2.1 MB', license: 'Apache-2.0', lastUpdated: '2024-01-18', featured: true, verified: true, securityScore: 94, icon: '' }, { id: 'grafana', name: '@backstage/plugin-grafana', displayName: 'Grafana', description: 'Embed Grafana dashboards and alerts in your service catalog', category: 'monitoring', version: '0.9.5', author: { name: 'Grafana Labs', verified: true }, downloads: 156000, stars: 892, rating: 4.8, reviews: 312, tags: ['monitoring', 'dashboards', 'metrics', 'observability'], compatibility: { backstage: '>=1.19.0', node: '>=18.0.0' }, dependencies: ['@backstage/core', '@grafana/data'], size: '2.7 MB', license: 'Apache-2.0', lastUpdated: '2024-01-22', trending: true, verified: true, securityScore: 91, icon: '' }, { id: 'aws-lambda', name: '@roadiehq/backstage-plugin-aws-lambda', displayName: 'AWS Lambda', description: 'View and manage AWS Lambda functions from Backstage', category: 'cloud', version: '2.3.1', author: { name: 'Roadie', verified: true }, downloads: 67000, stars: 234, rating: 4.4, reviews: 89, tags: ['aws', 'lambda', 'serverless', 'cloud'], compatibility: { backstage: '>=1.16.0', node: '>=16.0.0' }, dependencies: ['@backstage/core', 'aws-sdk'], size: '1.9 MB', license: 'Apache-2.0', lastUpdated: '2024-01-12', verified: true, securityScore: 85, icon: '' }, { id: 'openai', name: '@backstage-community/plugin-openai', displayName: 'OpenAI Assistant', description: 'AI-powered code generation and documentation assistant', category: 'ai-ml', version: '0.3.0', author: { name: 'Community', verified: false }, downloads: 45000, stars: 567, rating: 4.7, reviews: 156, tags: ['ai', 'openai', 'gpt', 'code-generation', 'documentation'], compatibility: { backstage: '>=1.20.0', node: '>=18.0.0' }, dependencies: ['@backstage/core', 'openai'], size: '1.2 MB', license: 'MIT', lastUpdated: '2024-01-25', trending: true, featured: true, securityScore: 82, icon: '' }, { id: 'terraform', name: '@backstage/plugin-terraform', displayName: 'Terraform', description: 'Manage Terraform workspaces and infrastructure as code', category: 'infrastructure', version: '0.6.8', author: { name: 'HashiCorp', verified: true }, downloads: 98000, stars: 445, rating: 4.5, reviews: 167, tags: ['terraform', 'iac', 'infrastructure', 'cloud'], compatibility: { backstage: '>=1.18.0', node: '>=16.0.0' }, dependencies: ['@backstage/core'], size: '2.2 MB', license: 'Apache-2.0', lastUpdated: '2024-01-14', verified: true, securityScore: 90, icon: '' } ]; export default function MarketplacePage() { const [plugins, setPlugins] = useState<Plugin[]>(mockPlugins); const [filteredPlugins, setFilteredPlugins] = useState<Plugin[]>(mockPlugins); const [searchQuery, setSearchQuery] = useState(''); const [selectedCategory, setSelectedCategory] = useState('all'); const [sortBy, setSortBy] = useState('featured'); const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid'); const [selectedPlugin, setSelectedPlugin] = useState<Plugin | null>(null); const [installingPlugin, setInstallingPlugin] = useState<string | null>(null); const [filters, setFilters] = useState({ verified: false, featured: false, trending: false, installed: false, compatibleOnly: true }); useEffect(() => { filterAndSortPlugins(); }, [searchQuery, selectedCategory, sortBy, filters]); const filterAndSortPlugins = () => { let filtered = [...plugins]; // Category filter if (selectedCategory !== 'all') { filtered = filtered.filter(p => p.category === selectedCategory); } // Search filter if (searchQuery) { const query = searchQuery.toLowerCase(); filtered = filtered.filter(p => p.displayName.toLowerCase().includes(query) || p.description.toLowerCase().includes(query) || p.tags.some(tag => tag.toLowerCase().includes(query)) ); } // Additional filters if (filters.verified) { filtered = filtered.filter(p => p.verified); } if (filters.featured) { filtered = filtered.filter(p => p.featured); } if (filters.trending) { filtered = filtered.filter(p => p.trending); } if (filters.installed) { filtered = filtered.filter(p => p.installed); } // Sorting switch (sortBy) { case 'featured': filtered.sort((a, b) => { if (a.featured && !b.featured) return -1; if (!a.featured && b.featured) return 1; return b.stars - a.stars; }); break; case 'popular': filtered.sort((a, b) => b.downloads - a.downloads); break; case 'rating': filtered.sort((a, b) => b.rating - a.rating); break; case 'recent': filtered.sort((a, b) => new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime()); break; case 'name': filtered.sort((a, b) => a.displayName.localeCompare(b.displayName)); break; } setFilteredPlugins(filtered); }; const handleInstallPlugin = async (plugin: Plugin) => { setInstallingPlugin(plugin.id); // Simulate installation await new Promise(resolve => setTimeout(resolve, 2000)); setPlugins(prev => prev.map(p => p.id === plugin.id ? { ...p, installed: true } : p )); setInstallingPlugin(null); toast.success(`${plugin.displayName} installed successfully!`); }; const handleUninstallPlugin = async (plugin: Plugin) => { setInstallingPlugin(plugin.id); // Simulate uninstallation await new Promise(resolve => setTimeout(resolve, 1500)); setPlugins(prev => prev.map(p => p.id === plugin.id ? { ...p, installed: false } : p )); setInstallingPlugin(null); toast.success(`${plugin.displayName} uninstalled successfully!`); }; const formatNumber = (num: number): string => { if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`; if (num >= 1000) return `${(num / 1000).toFixed(1)}K`; return num.toString(); }; const PluginCard = ({ plugin }: { plugin: Plugin }) => ( <motion.div layout initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -20 }} whileHover={{ y: -4 }} transition={{ duration: 0.2 }} > <Card className="h-full hover:shadow-lg transition-all cursor-pointer" onClick={() => setSelectedPlugin(plugin)}> <CardHeader> <div className="flex items-start justify-between"> <div className="flex items-center gap-3"> <div className="text-3xl">{plugin.icon || ''}</div> <div> <CardTitle className="flex items-center gap-2"> {plugin.displayName} {plugin.verified && ( <Badge variant="secondary" className="gap-1"> <CheckCircle className="h-3 w-3" /> Verified </Badge> )} </CardTitle> <div className="flex items-center gap-2 mt-1"> <span className="text-sm text-muted-foreground"> by {plugin.author.name} </span> {plugin.author.verified && ( <CheckCircle className="h-3 w-3 text-blue-500" /> )} </div> </div> </div> <div className="flex flex-col items-end gap-1"> {plugin.featured && ( <Badge variant="default" className="gap-1"> <Sparkles className="h-3 w-3" /> Featured </Badge> )} {plugin.trending && ( <Badge variant="secondary" className="gap-1"> <TrendingUp className="h-3 w-3" /> Trending </Badge> )} </div> </div> </CardHeader> <CardContent className="space-y-4"> <p className="text-sm text-muted-foreground line-clamp-2"> {plugin.description} </p> <div className="flex flex-wrap gap-1"> {plugin.tags.slice(0, 3).map(tag => ( <Badge key={tag} variant="outline" className="text-xs"> {tag} </Badge> ))} {plugin.tags.length > 3 && ( <Badge variant="outline" className="text-xs"> +{plugin.tags.length - 3} </Badge> )} </div> <div className="grid grid-cols-3 gap-2 text-sm"> <div className="flex items-center gap-1"> <Download className="h-3 w-3 text-muted-foreground" /> <span>{formatNumber(plugin.downloads)}</span> </div> <div className="flex items-center gap-1"> <Star className="h-3 w-3 text-yellow-500" /> <span>{plugin.rating}</span> </div> <div className="flex items-center gap-1"> <Shield className="h-3 w-3 text-green-500" /> <span>{plugin.securityScore}%</span> </div> </div> <Separator /> <div className="flex items-center justify-between"> <span className="text-xs text-muted-foreground"> v{plugin.version} • {plugin.size} </span> {plugin.installed ? ( <Button size="sm" variant="secondary" disabled={installingPlugin === plugin.id} onClick={(e) => { e.stopPropagation(); handleUninstallPlugin(plugin); }} > {installingPlugin === plugin.id ? 'Processing...' : 'Installed'} </Button> ) : ( <Button size="sm" disabled={installingPlugin === plugin.id} onClick={(e) => { e.stopPropagation(); handleInstallPlugin(plugin); }} > {installingPlugin === plugin.id ? 'Installing...' : 'Install'} </Button> )} </div> </CardContent> </Card> </motion.div> ); const PluginListItem = ({ plugin }: { plugin: Plugin }) => ( <motion.div layout initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: 20 }} className="border rounded-lg p-4 hover:bg-accent transition-colors cursor-pointer" onClick={() => setSelectedPlugin(plugin)} > <div className="flex items-center justify-between"> <div className="flex items-center gap-4 flex-1"> <div className="text-2xl">{plugin.icon || ''}</div> <div className="flex-1"> <div className="flex items-center gap-2"> <h3 className="font-semibold">{plugin.displayName}</h3> {plugin.verified && ( <CheckCircle className="h-4 w-4 text-blue-500" /> )} {plugin.featured && ( <Badge variant="default" className="gap-1"> <Sparkles className="h-3 w-3" /> Featured </Badge> )} {plugin.trending && ( <Badge variant="secondary" className="gap-1"> <TrendingUp className="h-3 w-3" /> Trending </Badge> )} </div> <p className="text-sm text-muted-foreground mt-1"> {plugin.description} </p> <div className="flex items-center gap-4 mt-2"> <span className="text-sm text-muted-foreground"> by {plugin.author.name} </span> <div className="flex items-center gap-4 text-sm"> <span className="flex items-center gap-1"> <Download className="h-3 w-3" /> {formatNumber(plugin.downloads)} </span> <span className="flex items-center gap-1"> <Star className="h-3 w-3 text-yellow-500" /> {plugin.rating} </span> <span className="flex items-center gap-1"> <Shield className="h-3 w-3 text-green-500" /> {plugin.securityScore}% </span> </div> <span className="text-sm text-muted-foreground"> v{plugin.version} </span> </div> </div> </div> <div className="ml-4"> {plugin.installed ? ( <Button variant="secondary" disabled={installingPlugin === plugin.id} onClick={(e) => { e.stopPropagation(); handleUninstallPlugin(plugin); }} > {installingPlugin === plugin.id ? 'Processing...' : 'Installed'} </Button> ) : ( <Button disabled={installingPlugin === plugin.id} onClick={(e) => { e.stopPropagation(); handleInstallPlugin(plugin); }} > {installingPlugin === plugin.id ? 'Installing...' : 'Install'} </Button> )} </div> </div> </motion.div> ); return ( <div className="container mx-auto py-8 px-4"> <div className="mb-8"> <h1 className="text-4xl font-bold mb-2">Plugin Marketplace</h1> <p className="text-muted-foreground"> Discover and install plugins to extend your Backstage platform </p> </div> <div className="grid grid-cols-1 lg:grid-cols-4 gap-6"> {/* Filters Sidebar */} <div className="lg:col-span-1"> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Filter className="h-4 w-4" /> Filters </CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="space-y-3"> <Label>Categories</Label> {categories.map(category => ( <button key={category.id} onClick={() => setSelectedCategory(category.id)} className={`w-full flex items-center gap-2 px-3 py-2 rounded-md transition-colors ${ selectedCategory === category.id ? 'bg-primary text-primary-foreground' : 'hover:bg-accent' }`} > <category.icon className="h-4 w-4" /> <span className="text-sm">{category.name}</span> </button> ))} </div> <Separator /> <div className="space-y-3"> <Label>Filter Options</Label> <div className="space-y-2"> <label className="flex items-center gap-2"> <Checkbox checked={filters.verified} onCheckedChange={(checked) => setFilters(prev => ({ ...prev, verified: !!checked })) } /> <span className="text-sm">Verified Only</span> </label> <label className="flex items-center gap-2"> <Checkbox checked={filters.featured} onCheckedChange={(checked) => setFilters(prev => ({ ...prev, featured: !!checked })) } /> <span className="text-sm">Featured</span> </label> <label className="flex items-center gap-2"> <Checkbox checked={filters.trending} onCheckedChange={(checked) => setFilters(prev => ({ ...prev, trending: !!checked })) } /> <span className="text-sm">Trending</span> </label> <label className="flex items-center gap-2"> <Checkbox checked={filters.installed} onCheckedChange={(checked) => setFilters(prev => ({ ...prev, installed: !!checked })) } /> <span className="text-sm">Installed</span> </label> </div> </div> </CardContent> </Card> </div> {/* Main Content */} <div className="lg:col-span-3 space-y-4"> {/* Search and Controls */} <div className="flex flex-col sm:flex-row gap-4"> <div className="relative flex-1"> <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" /> <Input placeholder="Search plugins..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-10" /> </div> <div className="flex gap-2"> <Select value={sortBy} onValueChange={setSortBy}> <SelectTrigger className="w-[150px]"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="featured">Featured</SelectItem> <SelectItem value="popular">Most Popular</SelectItem> <SelectItem value="rating">Highest Rated</SelectItem> <SelectItem value="recent">Recently Updated</SelectItem> <SelectItem value="name">Name</SelectItem> </SelectContent> </Select> <div className="flex gap-1 border rounded-md"> <Button size="sm" variant={viewMode === 'grid' ? 'secondary' : 'ghost'} onClick={() => setViewMode('grid')} className="px-2" > <Grid className="h-4 w-4" /> </Button> <Button size="sm" variant={viewMode === 'list' ? 'secondary' : 'ghost'} onClick={() => setViewMode('list')} className="px-2" > <List className="h-4 w-4" /> </Button> </div> </div> </div> {/* Results Summary */} <div className="flex items-center justify-between"> <p className="text-sm text-muted-foreground"> Found {filteredPlugins.length} plugins </p> </div> {/* Plugins Grid/List */} <AnimatePresence mode="popLayout"> {viewMode === 'grid' ? ( <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4"> {filteredPlugins.map(plugin => ( <PluginCard key={plugin.id} plugin={plugin} /> ))} </div> ) : ( <div className="space-y-2"> {filteredPlugins.map(plugin => ( <PluginListItem key={plugin.id} plugin={plugin} /> ))} </div> )} </AnimatePresence> </div> </div> {/* Plugin Detail Modal */} <AnimatePresence> {selectedPlugin && ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4" onClick={() => setSelectedPlugin(null)} > <motion.div initial={{ scale: 0.9, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0.9, opacity: 0 }} className="bg-background rounded-lg max-w-4xl w-full max-h-[90vh] overflow-auto" onClick={(e) => e.stopPropagation()} > <div className="p-6 space-y-6"> <div className="flex items-start justify-between"> <div className="flex items-center gap-4"> <div className="text-5xl">{selectedPlugin.icon || ''}</div> <div> <h2 className="text-2xl font-bold flex items-center gap-2"> {selectedPlugin.displayName} {selectedPlugin.verified && ( <CheckCircle className="h-5 w-5 text-blue-500" /> )} </h2> <p className="text-muted-foreground"> {selectedPlugin.name} • v{selectedPlugin.version} </p> </div> </div> <Button variant="ghost" size="icon" onClick={() => setSelectedPlugin(null)} > × </Button> </div> <Tabs defaultValue="overview"> <TabsList> <TabsTrigger value="overview">Overview</TabsTrigger> <TabsTrigger value="installation">Installation</TabsTrigger> <TabsTrigger value="dependencies">Dependencies</TabsTrigger> <TabsTrigger value="reviews">Reviews</TabsTrigger> </TabsList> <TabsContent value="overview" className="space-y-4 mt-4"> <p className="text-lg">{selectedPlugin.description}</p> <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> <Card> <CardContent className="pt-6"> <div className="text-2xl font-bold"> {formatNumber(selectedPlugin.downloads)} </div> <p className="text-sm text-muted-foreground">Downloads</p> </CardContent> </Card> <Card> <CardContent className="pt-6"> <div className="text-2xl font-bold flex items-center gap-1"> {selectedPlugin.rating} <Star className="h-5 w-5 text-yellow-500" /> </div> <p className="text-sm text-muted-foreground"> {selectedPlugin.reviews} reviews </p> </CardContent> </Card> <Card> <CardContent className="pt-6"> <div className="text-2xl font-bold text-green-600"> {selectedPlugin.securityScore}% </div> <p className="text-sm text-muted-foreground">Security Score</p> </CardContent> </Card> <Card> <CardContent className="pt-6"> <div className="text-2xl font-bold"> {selectedPlugin.size} </div> <p className="text-sm text-muted-foreground">Size</p> </CardContent> </Card> </div> <div className="space-y-2"> <h3 className="font-semibold">Tags</h3> <div className="flex flex-wrap gap-2"> {selectedPlugin.tags.map(tag => ( <Badge key={tag} variant="secondary"> {tag} </Badge> ))} </div> </div> <div className="space-y-2"> <h3 className="font-semibold">Links</h3> <div className="flex gap-2"> {selectedPlugin.homepage && ( <Button variant="outline" size="sm" asChild> <a href={selectedPlugin.homepage} target="_blank" rel="noopener"> <Globe className="h-4 w-4 mr-2" /> Homepage </a> </Button> )} {selectedPlugin.repository && ( <Button variant="outline" size="sm" asChild> <a href={selectedPlugin.repository} target="_blank" rel="noopener"> <GitBranch className="h-4 w-4 mr-2" /> Repository </a> </Button> )} {selectedPlugin.documentation && ( <Button variant="outline" size="sm" asChild> <a href={selectedPlugin.documentation} target="_blank" rel="noopener"> <BookOpen className="h-4 w-4 mr-2" /> Documentation </a> </Button> )} </div> </div> </TabsContent> <TabsContent value="installation" className="space-y-4 mt-4"> <div className="space-y-4"> <div> <h3 className="font-semibold mb-2">Install via npm</h3> <pre className="bg-muted p-4 rounded-md"> <code>npm install {selectedPlugin.name}</code> </pre> </div> <div> <h3 className="font-semibold mb-2">Install via yarn</h3> <pre className="bg-muted p-4 rounded-md"> <code>yarn add {selectedPlugin.name}</code> </pre> </div> <div> <h3 className="font-semibold mb-2">Compatibility</h3> <ul className="space-y-1"> <li className="text-sm"> Backstage: {selectedPlugin.compatibility.backstage} </li> <li className="text-sm"> Node: {selectedPlugin.compatibility.node} </li> </ul> </div> </div> </TabsContent> <TabsContent value="dependencies" className="space-y-4 mt-4"> <div className="space-y-2"> <h3 className="font-semibold">Required Dependencies</h3> <ul className="space-y-1"> {selectedPlugin.dependencies.map(dep => ( <li key={dep} className="text-sm font-mono bg-muted px-2 py-1 rounded"> {dep} </li> ))} </ul> </div> </TabsContent> <TabsContent value="reviews" className="space-y-4 mt-4"> <div className="space-y-4"> <div className="flex items-center justify-between"> <div className="flex items-center gap-2"> <span className="text-3xl font-bold">{selectedPlugin.rating}</span> <div> <div className="flex items-center"> {[1, 2, 3, 4, 5].map(i => ( <Star key={i} className={`h-4 w-4 ${ i <= selectedPlugin.rating ? 'text-yellow-500 fill-yellow-500' : 'text-gray-300' }`} /> ))} </div> <p className="text-sm text-muted-foreground"> {selectedPlugin.reviews} reviews </p> </div> </div> <Button>Write a Review</Button> </div> <p className="text-muted-foreground text-center py-8"> Reviews coming soon... </p> </div> </TabsContent> </Tabs> <div className="flex justify-end gap-2"> <Button variant="outline" onClick={() => setSelectedPlugin(null)}> Close </Button> {selectedPlugin.installed ? ( <Button variant="secondary" disabled={installingPlugin === selectedPlugin.id} onClick={() => handleUninstallPlugin(selectedPlugin)} > {installingPlugin === selectedPlugin.id ? 'Processing...' : 'Uninstall Plugin'} </Button> ) : ( <Button disabled={installingPlugin === selectedPlugin.id} onClick={() => handleInstallPlugin(selectedPlugin)} > {installingPlugin === selectedPlugin.id ? 'Installing...' : 'Install Plugin'} </Button> )} </div> </div> </motion.div> </motion.div> )} </AnimatePresence> </div> ); }