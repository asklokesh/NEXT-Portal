/** * Email Service for Tenant Communications * Handles transactional emails, welcome messages, and notifications */ export interface EmailOptions { to: string | string[]; cc?: string | string[]; bcc?: string | string[]; subject: string; template?: string; data?: Record<string, any>; html?: string; text?: string; attachments?: EmailAttachment[]; } export interface EmailAttachment { filename: string; content: Buffer | string; contentType: string; } export interface EmailTemplate { name: string; subject: string; html: string; text?: string; requiredData: string[]; } /** * Email template definitions */ const EMAIL_TEMPLATES: Record<string, EmailTemplate> = { 'tenant-welcome': { name: 'Tenant Welcome', subject: 'Welcome to {{platformName}} - Complete Your Setup', html: ` <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;"> <div style="background: #f8f9fa; padding: 20px; text-align: center;"> <h1 style="color: #2c3e50;">Welcome to {{platformName}}</h1> </div> <div style="padding: 30px;"> <h2>Hi {{adminName}},</h2> <p>Welcome to {{platformName}}! Your tenant "<strong>{{tenantName}}</strong>" has been successfully created.</p> <div style="background: #e8f4fd; padding: 20px; border-radius: 8px; margin: 20px 0;"> <h3 style="margin-top: 0;">Next Steps:</h3> <ol> <li>Complete your initial setup using the link below</li> <li>Configure your authentication settings</li> <li>Install your first plugins</li> <li>Invite team members</li> </ol> </div> <div style="text-align: center; margin: 30px 0;"> <a href="{{setupUrl}}" style="background: #007bff; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;"> Complete Setup </a> </div> <div style="background: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0;"> <strong>Initial Password:</strong> {{initialPassword}} <br> <small>This password expires in {{expiryHours}} hours. Please change it during setup.</small> </div> <p style="color: #666; font-size: 14px;"> If you have any questions, please contact our support team. </p> </div> <div style="background: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666;"> This email was sent by {{platformName}} </div> </div> `, text: `Welcome to {{platformName}}! Hi {{adminName}}, Your tenant "{{tenantName}}" has been successfully created. Complete your setup: {{setupUrl}} Initial Password: {{initialPassword}} (expires in {{expiryHours}} hours) Next Steps: 1. Complete your initial setup 2. Configure authentication settings 3. Install your first plugins 4. Invite team members If you have any questions, please contact our support team.`, requiredData: ['platformName', 'adminName', 'tenantName', 'setupUrl', 'initialPassword', 'expiryHours'] }, 'tenant-suspended': { name: 'Tenant Suspended', subject: 'Your {{platformName}} Account Has Been Suspended', html: ` <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;"> <div style="background: #dc3545; color: white; padding: 20px; text-align: center;"> <h1>Account Suspended</h1> </div> <div style="padding: 30px;"> <h2>Hi {{adminName}},</h2> <p>Your {{platformName}} tenant "<strong>{{tenantName}}</strong>" has been suspended.</p> <div style="background: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0;"> <strong>Reason:</strong> {{reason}} <br><br> <strong>Suspended on:</strong> {{suspendedDate}} </div> <p>During the suspension period:</p> <ul> <li>Your portal will be inaccessible</li> <li>All services will be stopped</li> <li>Data will be preserved</li> </ul> <p>To reactivate your account, please contact our support team.</p> </div> </div> `, text: `Account Suspended Hi {{adminName}}, Your {{platformName}} tenant "{{tenantName}}" has been suspended. Reason: {{reason}} Suspended on: {{suspendedDate}} During suspension: - Portal will be inaccessible - All services will be stopped - Data will be preserved Contact support to reactivate your account.`, requiredData: ['platformName', 'adminName', 'tenantName', 'reason', 'suspendedDate'] }, 'tenant-reactivated': { name: 'Tenant Reactivated', subject: 'Your {{platformName}} Account Has Been Reactivated', html: ` <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;"> <div style="background: #28a745; color: white; padding: 20px; text-align: center;"> <h1>Account Reactivated</h1> </div> <div style="padding: 30px;"> <h2>Hi {{adminName}},</h2> <p>Great news! Your {{platformName}} tenant "<strong>{{tenantName}}</strong>" has been reactivated.</p> <div style="text-align: center; margin: 30px 0;"> <a href="{{portalUrl}}" style="background: #28a745; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;"> Access Your Portal </a> </div> <p>All your data and configurations have been preserved during the suspension period.</p> </div> </div> `, text: `Account Reactivated Hi {{adminName}}, Your {{platformName}} tenant "{{tenantName}}" has been reactivated. Access your portal: {{portalUrl}} All your data and configurations have been preserved.`, requiredData: ['platformName', 'adminName', 'tenantName', 'portalUrl'] }, 'tenant-upgraded': { name: 'Tenant Upgraded', subject: 'Your {{platformName}} Plan Has Been Upgraded', html: ` <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;"> <div style="background: #17a2b8; color: white; padding: 20px; text-align: center;"> <h1>Plan Upgraded</h1> </div> <div style="padding: 30px;"> <h2>Hi {{adminName}},</h2> <p>Your {{platformName}} tenant "<strong>{{tenantName}}</strong>" has been upgraded to {{newTier}}.</p> <div style="background: #d1ecf1; padding: 20px; border-radius: 8px; margin: 20px 0;"> <h3 style="margin-top: 0;">New Benefits:</h3> {{#each benefits}} <li>{{this}}</li> {{/each}} </div> <p>These changes are effective immediately. Visit your portal to explore the new features.</p> <div style="text-align: center; margin: 30px 0;"> <a href="{{portalUrl}}" style="background: #17a2b8; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;"> Explore New Features </a> </div> </div> </div> `, text: `Plan Upgraded Hi {{adminName}}, Your {{platformName}} tenant "{{tenantName}}" has been upgraded to {{newTier}}. New benefits: {{#each benefits}} - {{this}} {{/each}} These changes are effective immediately. Visit your portal: {{portalUrl}}`, requiredData: ['platformName', 'adminName', 'tenantName', 'newTier', 'benefits', 'portalUrl'] } }; /** * Mock email service (replace with actual email provider) */ class MockEmailService { async send(options: EmailOptions): Promise<{ success: boolean; messageId?: string; error?: string }> { console.log(' Mock Email Sent:', { to: options.to, subject: options.subject, template: options.template, data: options.data }); // Simulate email sending delay await new Promise(resolve => setTimeout(resolve, 100)); // Simulate occasional failures if (Math.random() < 0.05) { return { success: false, error: 'Simulated email delivery failure' }; } return { success: true, messageId: `mock-msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}` }; } } /** * Email service implementation */ class EmailService { private emailProvider: MockEmailService; private templates: Record<string, EmailTemplate>; constructor() { this.emailProvider = new MockEmailService(); this.templates = EMAIL_TEMPLATES; } /** * Send email using template */ async sendTemplatedEmail( to: string | string[], templateName: string, data: Record<string, any>, options: Partial<EmailOptions> = {} ): Promise<{ success: boolean; messageId?: string; error?: string }> { try { const template = this.templates[templateName]; if (!template) { return { success: false, error: `Template '${templateName}' not found` }; } // Validate required data const missingData = template.requiredData.filter(field => !(field in data)); if (missingData.length > 0) { return { success: false, error: `Missing required template data: ${missingData.join(', ')}` }; } // Render template const rendered = this.renderTemplate(template, data); const emailOptions: EmailOptions = { to, subject: rendered.subject, html: rendered.html, text: rendered.text, ...options }; return await this.emailProvider.send(emailOptions); } catch (error) { console.error('Email sending error:', error); return { success: false, error: 'Failed to send email' }; } } /** * Send plain email */ async send(options: EmailOptions): Promise<{ success: boolean; messageId?: string; error?: string }> { return await this.emailProvider.send(options); } /** * Render template with data */ private renderTemplate(template: EmailTemplate, data: Record<string, any>): { subject: string; html: string; text: string; } { const context = { ...data, platformName: data.platformName || process.env.PLATFORM_NAME || 'Developer Portal' }; return { subject: this.interpolate(template.subject, context), html: this.interpolate(template.html, context), text: this.interpolate(template.text || '', context) }; } /** * Simple template interpolation */ private interpolate(template: string, data: Record<string, any>): string { return template.replace(/\{\{(\w+)\}\}/g, (match, key) => { return data[key] || match; }); } /** * Add custom template */ addTemplate(name: string, template: EmailTemplate): void { this.templates[name] = template; } /** * Get available templates */ getTemplates(): string[] { return Object.keys(this.templates); } /** * Validate email template */ validateTemplate(templateName: string, data: Record<string, any>): { valid: boolean; errors: string[]; } { const template = this.templates[templateName]; const errors: string[] = []; if (!template) { errors.push(`Template '${templateName}' not found`); return { valid: false, errors }; } const missingData = template.requiredData.filter(field => !(field in data)); if (missingData.length > 0) { errors.push(`Missing required data: ${missingData.join(', ')}`); } return { valid: errors.length === 0, errors }; } } // Global email service instance const emailService = new EmailService(); /** * Convenience function for sending emails */ export async function sendEmail(options: EmailOptions): Promise<{ success: boolean; messageId?: string; error?: string }> { if (options.template && options.data) { return await emailService.sendTemplatedEmail( options.to, options.template, options.data, options ); } return await emailService.send(options); } /** * Send tenant-specific emails */ export const TenantEmails = { async sendWelcomeEmail(tenantData: { adminName: string; adminEmail: string; tenantName: string; setupUrl: string; initialPassword: string; expiryHours: number; }): Promise<{ success: boolean; messageId?: string; error?: string }> { return await emailService.sendTemplatedEmail( tenantData.adminEmail, 'tenant-welcome', tenantData ); }, async sendSuspensionEmail(tenantData: { adminName: string; adminEmail: string; tenantName: string; reason: string; suspendedDate: string; }): Promise<{ success: boolean; messageId?: string; error?: string }> { return await emailService.sendTemplatedEmail( tenantData.adminEmail, 'tenant-suspended', tenantData ); }, async sendReactivationEmail(tenantData: { adminName: string; adminEmail: string; tenantName: string; portalUrl: string; }): Promise<{ success: boolean; messageId?: string; error?: string }> { return await emailService.sendTemplatedEmail( tenantData.adminEmail, 'tenant-reactivated', tenantData ); }, async sendUpgradeEmail(tenantData: { adminName: string; adminEmail: string; tenantName: string; newTier: string; benefits: string[]; portalUrl: string; }): Promise<{ success: boolean; messageId?: string; error?: string }> { return await emailService.sendTemplatedEmail( tenantData.adminEmail, 'tenant-upgraded', tenantData ); } }; export { emailService, EmailService }; export default emailService;