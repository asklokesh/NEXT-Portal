/** * Jenkins Pipeline Template Generator * Generates production-ready Jenkinsfiles */ import { CICDTemplateConfig, GeneratedTemplate, TemplateMetadata } from '../'; import { BaseTemplateGenerator } from './index'; export class JenkinsGenerator extends BaseTemplateGenerator { getMetadata(): TemplateMetadata { return { name: 'Jenkins Pipeline', version: '2.0.0', description: 'Production-ready Jenkins pipeline with declarative syntax', author: 'Platform Team', tags: ['jenkins', 'ci/cd', 'automation'], requiredSecrets: [ 'DOCKER_REGISTRY_CREDENTIALS', 'SONAR_CREDENTIALS', 'SNYK_CREDENTIALS', 'SLACK_CREDENTIALS', 'DEPLOY_CREDENTIALS', 'AWS_CREDENTIALS' ], estimatedDuration: 25, costEstimate: { compute: 0.0, // Self-hosted storage: 0.0, network: 0.0 } }; } generate(config: CICDTemplateConfig): GeneratedTemplate { const metadata = this.getMetadata(); const files = new Map<string, string>(); // Main Jenkinsfile const jenkinsfile = this.generateJenkinsfile(config); files.set('Jenkinsfile', jenkinsfile); // Shared library files files.set('vars/deploymentHelper.groovy', this.generateDeploymentHelper(config)); files.set('vars/qualityGates.groovy', this.generateQualityGatesHelper(config)); files.set('vars/notificationHelper.groovy', this.generateNotificationHelper()); // Jenkins configuration as code files.set('jenkins.yaml', this.generateJenkinsConfig(config)); // Docker files for Jenkins agents files.set('jenkins/agents/Dockerfile', this.generateAgentDockerfile(config)); const documentation = this.generateDocumentation(config); return { metadata, content: jenkinsfile, files, documentation }; } protected validatePlatformSpecific(config: CICDTemplateConfig): boolean { return true; } private generateJenkinsfile(config: CICDTemplateConfig): string { return `@Library('shared-pipeline-library') _ pipeline { agent { label '${this.getAgentLabel(config.language)}' } options { timestamps() timeout(time: 1, unit: 'HOURS') buildDiscarder(logRotator(numToKeepStr: '10')) disableConcurrentBuilds() skipDefaultCheckout() } environment { // Global environment variables APP_NAME = '\${env.JOB_NAME.split('/')[0]}' VERSION = "\${env.BUILD_NUMBER}-\${env.GIT_COMMIT.take(7)}" ${config.dockerEnabled ? ` DOCKER_REGISTRY = credentials('docker-registry-url') DOCKER_IMAGE = "\${DOCKER_REGISTRY}/\${APP_NAME}"` : ''} ${this.getEnvironmentVariables(config)} } parameters { choice( name: 'ENVIRONMENT', choices: ['dev', 'staging', 'production'], description: 'Deployment environment' ) booleanParam( name: 'SKIP_TESTS', defaultValue: false, description: 'Skip test execution' ) booleanParam( name: 'FORCE_DEPLOY', defaultValue: false, description: 'Force deployment even if quality gates fail' ) } triggers { pollSCM('H/5 * * * *') cron('H 0 * * 0') // Weekly security scan } stages { stage('Checkout') { steps { checkout scm script { env.GIT_COMMIT_MSG = sh( script: 'git log -1 --pretty=%B', returnStdout: true ).trim() env.GIT_AUTHOR = sh( script: 'git log -1 --pretty=%ae', returnStdout: true ).trim() } } } stage('Setup') { steps { script { echo "Setting up build environment..." ${this.getSetupSteps(config)} } } } stage('Build') { steps { script { echo "Building application version \${VERSION}..." ${this.getBuildSteps(config)} } } post { success { archiveArtifacts artifacts: '${this.getBuildArtifacts(config.language)}', fingerprint: true } } } stage('Test') { when { expression { params.SKIP_TESTS != true } } parallel { stage('Unit Tests') { steps { script { echo "Running unit tests..." ${this.getUnitTestSteps(config)} } } post { always { junit '**/test-results/unit/*.xml' publishHTML([ reportDir: 'coverage', reportFiles: 'index.html', reportName: 'Coverage Report' ]) } } } stage('Integration Tests') { steps { script { echo "Running integration tests..." ${this.getIntegrationTestSteps(config)} } } post { always { junit '**/test-results/integration/*.xml' } } } ${config.projectType === 'frontend' ? `stage('E2E Tests') { steps { script { echo "Running E2E tests..." ${this.getE2ETestSteps(config)} } } post { always { publishHTML([ reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'E2E Test Report' ]) } } }` : ''} } } stage('Security Scan') { parallel { stage('SAST') { steps { script { echo "Running static analysis..." ${this.getSASTSteps(config)} } } } stage('Dependency Check') { steps { script { echo "Checking dependencies..." ${this.getDependencyCheckSteps(config)} } } } ${config.dockerEnabled ? `stage('Container Scan') { steps { script { echo "Scanning container image..." sh 'trivy image \${DOCKER_IMAGE}:\${VERSION}' } } }` : ''} } post { always { publishHTML([ reportDir: 'security-reports', reportFiles: 'index.html', reportName: 'Security Report' ]) } } } ${config.qualityGates ? `stage('Quality Gates') { steps { script { def qualityResult = qualityGates.check( coverage: ${config.qualityGates.codeCoverage || 80}, duplicates: ${config.qualityGates.duplicateCode || 5}, complexity: ${config.qualityGates.complexity || 10} ) if (!qualityResult && !params.FORCE_DEPLOY) { error("Quality gates failed. Use FORCE_DEPLOY to override.") } } } }` : ''} ${config.integrations?.sonarqube ? `stage('SonarQube Analysis') { steps { withSonarQubeEnv('SonarQube') { sh '${this.getSonarCommand(config.language)}' } timeout(time: 10, unit: 'MINUTES') { waitForQualityGate abortPipeline: true } } }` : ''} ${config.dockerEnabled ? `stage('Build Docker Image') { steps { script { docker.withRegistry("https://\${DOCKER_REGISTRY}", 'docker-credentials') { def customImage = docker.build( "\${DOCKER_IMAGE}:\${VERSION}", "--build-arg VERSION=\${VERSION} " + "--build-arg BUILD_DATE=\$(date -u +'%Y-%m-%dT%H:%M:%SZ') " + "--build-arg VCS_REF=\${GIT_COMMIT} ." ) customImage.push() customImage.push('latest') } } } }` : ''} ${config.environments ? this.generateDeploymentStages(config) : ''} ${config.performanceTesting ? `stage('Performance Test') { when { branch 'main' } steps { script { echo "Running performance tests..." sh ''' k6 run tests/performance/load-test.js k6 run tests/performance/stress-test.js ''' } } post { always { publishHTML([ reportDir: 'performance-reports', reportFiles: 'index.html', reportName: 'Performance Report' ]) } } }` : ''} } post { always { cleanWs() } success { script { notificationHelper.sendSuccess( channel: '#ci-cd', message: "Build #\${BUILD_NUMBER} succeeded" ) } } failure { script { notificationHelper.sendFailure( channel: '#ci-cd', message: "Build #\${BUILD_NUMBER} failed" ) } } unstable { script { notificationHelper.sendWarning( channel: '#ci-cd', message: "Build #\${BUILD_NUMBER} is unstable" ) } } } }`; } private generateDeploymentStages(config: CICDTemplateConfig): string { if (!config.environments) return ''; return config.environments.map(env => ` stage('Deploy to ${env.name}') { when { anyOf { branch '${this.getDeploymentBranch(env)}' expression { params.ENVIRONMENT == '${env.name}' } } } ${env.approvalRequired ? ` input { message "Deploy to ${env.name}?" ok "Deploy" submitter "devops,platform-team" parameters { string(name: 'REASON', defaultValue: '', description: 'Deployment reason') } }` : ''} steps { script { echo "Deploying to ${env.name}..." deploymentHelper.deploy( environment: '${env.name}', version: VERSION, strategy: '${config.deploymentStrategy || 'rolling'}', url: '${env.url || `https://${env.name}.example.com`}' ) } } post { success { script { ${env.healthChecks ? ` // Run health checks def healthStatus = deploymentHelper.healthCheck('${env.name}') if (!healthStatus) { error("Health checks failed for ${env.name}") }` : ''} // Run smoke tests sh "curl -f ${env.url || `https://${env.name}.example.com`}/health" } } failure { script { ${config.rollbackEnabled ? ` echo "Rolling back ${env.name}..." deploymentHelper.rollback('${env.name}')` : ''} } } } }`).join(''); } private generateDeploymentHelper(config: CICDTemplateConfig): string { return `def deploy(Map config) { def environment = config.environment def version = config.version def strategy = config.strategy ?: 'rolling' def url = config.url echo "Deploying version \${version} to \${environment} using \${strategy} strategy" switch(strategy) { case 'blue-green': deployBlueGreen(environment, version, url) break case 'canary': deployCanary(environment, version, url) break case 'rolling': default: deployRolling(environment, version, url) break } } def deployRolling(environment, version, url) { sh """ kubectl set image deployment/app app=\${DOCKER_IMAGE}:\${version} -n \${environment} kubectl rollout status deployment/app -n \${environment} """ } def deployBlueGreen(environment, version, url) { sh """ # Deploy to green environment kubectl apply -f k8s/deployment-green.yaml -n \${environment} kubectl set image deployment/app-green app=\${DOCKER_IMAGE}:\${version} -n \${environment} kubectl wait --for=condition=available deployment/app-green -n \${environment} # Switch traffic kubectl patch service app -p '{"spec":{"selector":{"version":"green"}}}' -n \${environment} # Cleanup blue kubectl delete deployment app-blue -n \${environment} || true """ } def deployCanary(environment, version, url) { sh """ # Deploy canary kubectl apply -f k8s/deployment-canary.yaml -n \${environment} kubectl set image deployment/app-canary app=\${DOCKER_IMAGE}:\${version} -n \${environment} # Gradual rollout kubectl scale deployment app-canary --replicas=1 -n \${environment} sleep 60 kubectl scale deployment app-canary --replicas=3 -n \${environment} sleep 120 # Full deployment kubectl set image deployment/app app=\${DOCKER_IMAGE}:\${version} -n \${environment} kubectl delete deployment app-canary -n \${environment} """ } def rollback(environment) { sh """ kubectl rollout undo deployment/app -n \${environment} kubectl rollout status deployment/app -n \${environment} """ } def healthCheck(environment) { def status = sh( script: "kubectl get pods -n \${environment} -o json | jq '.items[].status.phase' | grep -v Running", returnStatus: true ) return status == 0 } return this`; } private generateQualityGatesHelper(config: CICDTemplateConfig): string { return `def check(Map thresholds) { def coverage = thresholds.coverage ?: 80 def duplicates = thresholds.duplicates ?: 5 def complexity = thresholds.complexity ?: 10 def failed = false // Check code coverage def actualCoverage = sh( script: "cat coverage/coverage-summary.json | jq .total.lines.pct", returnStdout: true ).trim().toFloat() if (actualCoverage < coverage) { echo " Code coverage \${actualCoverage}% is below threshold \${coverage}%" failed = true } else { echo " Code coverage \${actualCoverage}% meets threshold" } // Check duplicate code def actualDuplicates = sh( script: "jscpd . --reporters json --silent | jq .statistics.total.percentage", returnStdout: true ).trim().toFloat() if (actualDuplicates > duplicates) { echo " Duplicate code \${actualDuplicates}% exceeds threshold \${duplicates}%" failed = true } else { echo " Duplicate code \${actualDuplicates}% within threshold" } // Check complexity def actualComplexity = sh( script: "npx code-complexity . --format json | jq .average", returnStdout: true ).trim().toFloat() if (actualComplexity > complexity) { echo " Complexity \${actualComplexity} exceeds threshold \${complexity}" failed = true } else { echo " Complexity \${actualComplexity} within threshold" } return !failed } return this`; } private generateNotificationHelper(): string { return `def sendSuccess(Map config) { def channel = config.channel ?: '#general' def message = config.message ?: 'Build succeeded' if (env.SLACK_WEBHOOK) { sh """ curl -X POST \${SLACK_WEBHOOK} \ -H 'Content-Type: application/json' \ -d '{ "channel": "\${channel}", "username": "Jenkins", "icon_emoji": ":jenkins:", "attachments": [{ "color": "good", "title": "Build Successful", "text": "\${message}", "fields": [ {"title": "Job", "value": "\${JOB_NAME}", "short": true}, {"title": "Build", "value": "#\${BUILD_NUMBER}", "short": true}, {"title": "Branch", "value": "\${GIT_BRANCH}", "short": true}, {"title": "Author", "value": "\${GIT_AUTHOR}", "short": true} ], "footer": "Jenkins CI", "ts": \${currentBuild.startTimeInMillis / 1000} }] }' """ } } def sendFailure(Map config) { def channel = config.channel ?: '#general' def message = config.message ?: 'Build failed' if (env.SLACK_WEBHOOK) { sh """ curl -X POST \${SLACK_WEBHOOK} \ -H 'Content-Type: application/json' \ -d '{ "channel": "\${channel}", "username": "Jenkins", "icon_emoji": ":jenkins:", "attachments": [{ "color": "danger", "title": "Build Failed", "text": "\${message}", "fields": [ {"title": "Job", "value": "\${JOB_NAME}", "short": true}, {"title": "Build", "value": "#\${BUILD_NUMBER}", "short": true}, {"title": "Branch", "value": "\${GIT_BRANCH}", "short": true}, {"title": "Author", "value": "\${GIT_AUTHOR}", "short": true} ], "footer": "Jenkins CI", "ts": \${currentBuild.startTimeInMillis / 1000} }] }' """ } } def sendWarning(Map config) { def channel = config.channel ?: '#general' def message = config.message ?: 'Build unstable' if (env.SLACK_WEBHOOK) { sh """ curl -X POST \${SLACK_WEBHOOK} \ -H 'Content-Type: application/json' \ -d '{ "channel": "\${channel}", "username": "Jenkins", "icon_emoji": ":jenkins:", "attachments": [{ "color": "warning", "title": "Build Unstable", "text": "\${message}", "fields": [ {"title": "Job", "value": "\${JOB_NAME}", "short": true}, {"title": "Build", "value": "#\${BUILD_NUMBER}", "short": true}, {"title": "Branch", "value": "\${GIT_BRANCH}", "short": true}, {"title": "Author", "value": "\${GIT_AUTHOR}", "short": true} ], "footer": "Jenkins CI", "ts": \${currentBuild.startTimeInMillis / 1000} }] }' """ } } return this`; } private generateJenkinsConfig(config: CICDTemplateConfig): string { return `jenkins: systemMessage: "Jenkins CI/CD for ${config.language} ${config.projectType}" numExecutors: 2 mode: NORMAL clouds: - kubernetes: name: "kubernetes" serverUrl: "https://kubernetes.default" jenkinsUrl: "http://jenkins:8080" jenkinsTunnel: "jenkins-agent:50000" containerCapStr: "10" connectTimeout: 5 readTimeout: 15 maxRequestsPerHostStr: "32" templates: - name: "${config.language}-agent" label: "${config.language}" nodeUsageMode: NORMAL containers: - name: "jnlp" image: "jenkins/inbound-agent:latest" - name: "${config.language}" image: "${this.getAgentImage(config.language)}" command: "cat" ttyEnabled: true resourceRequestCpu: "500m" resourceRequestMemory: "1Gi" resourceLimitCpu: "2000m" resourceLimitMemory: "4Gi" credentials: system: domainCredentials: - credentials: - usernamePassword: id: "docker-credentials" username: "\${DOCKER_USERNAME}" password: "\${DOCKER_PASSWORD}" description: "Docker Registry Credentials" - string: id: "sonar-token" secret: "\${SONAR_TOKEN}" description: "SonarQube Token" - string: id: "slack-webhook" secret: "\${SLACK_WEBHOOK}" description: "Slack Webhook URL" unclassified: location: url: "https://jenkins.example.com" gitscm: globalConfigName: "Jenkins" globalConfigEmail: "jenkins@example.com" sonarGlobalConfiguration: installations: - name: "SonarQube" serverUrl: "https://sonar.example.com" credentialsId: "sonar-token" security: queueItemAuthenticator: authenticators: - global: strategy: "triggeringUsersAuthorizationStrategy" jobs: - script: > multibranchPipelineJob('${config.language}-${config.projectType}') { branchSources { git { id('git') remote('https://github.com/example/repo.git') credentialsId('github-credentials') } } orphanedItemStrategy { discardOldItems { numToKeep(10) } } triggers { periodic(5) } }`; } private generateAgentDockerfile(config: CICDTemplateConfig): string { return `FROM jenkins/inbound-agent:latest USER root # Install common tools RUN apt-get update && apt-get install -y \\ curl \\ wget \\ git \\ jq \\ zip \\ unzip \\ && rm -rf /var/lib/apt/lists/* # Install language-specific tools ${this.getAgentDockerfileContent(config.language)} # Install kubectl RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \\ && chmod +x kubectl \\ && mv kubectl /usr/local/bin/ # Install Helm RUN curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash # Install Trivy RUN wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add - \\ && echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee -a /etc/apt/sources.list.d/trivy.list \\ && apt-get update \\ && apt-get install -y trivy USER jenkins`; } // Helper methods private getAgentLabel(language: string): string { return `${language}-agent`; } private getAgentImage(language: string): string { const images: Record<string, string> = { 'nodejs': 'node:20-bullseye', 'python': 'python:3.11-bullseye', 'java': 'maven:3.9-openjdk-17', 'golang': 'golang:1.21-bullseye', 'dotnet': 'mcr.microsoft.com/dotnet/sdk:8.0', 'rust': 'rust:1.75-bullseye', 'ruby': 'ruby:3.2-bullseye', 'php': 'php:8.2-cli-bullseye' }; return images[language] || 'ubuntu:22.04'; } private getEnvironmentVariables(config: CICDTemplateConfig): string { const vars: string[] = []; switch (config.language) { case 'nodejs': case 'typescript': case 'react': vars.push('NODE_ENV = "production"'); vars.push('NPM_CONFIG_CACHE = "$WORKSPACE/.npm"'); break; case 'python': vars.push('PYTHONPATH = "$WORKSPACE"'); vars.push('PIP_CACHE_DIR = "$WORKSPACE/.cache/pip"'); break; case 'java': vars.push('MAVEN_OPTS = "-Xmx1024m"'); vars.push('MAVEN_HOME = "/usr/share/maven"'); break; case 'golang': vars.push('GO111MODULE = "on"'); vars.push('GOPATH = "$WORKSPACE/.go"'); break; } if (config.integrations?.sonarqube) { vars.push('SONAR_HOST_URL = credentials("sonar-host-url")'); vars.push('SONAR_TOKEN = credentials("sonar-token")'); } return vars.join('\\n '); } private getSetupSteps(config: CICDTemplateConfig): string { switch (config.language) { case 'nodejs': case 'typescript': case 'react': return ` sh 'node --version' sh 'npm --version' sh 'npm ci'`; case 'python': return ` sh 'python --version' sh 'pip install -r requirements.txt'`; case 'java': return ` sh 'java -version' sh 'mvn --version' sh 'mvn clean'`; case 'golang': return ` sh 'go version' sh 'go mod download'`; default: return 'sh "echo Environment ready"'; } } private getBuildSteps(config: CICDTemplateConfig): string { switch (config.language) { case 'nodejs': case 'typescript': case 'react': return ` sh 'npm run build' sh 'npm run package'`; case 'python': return ` sh 'python setup.py build' sh 'python setup.py bdist_wheel'`; case 'java': return ` sh 'mvn clean compile package'`; case 'golang': return ` sh 'go build -o app'`; default: return 'sh "echo Build complete"'; } } private getUnitTestSteps(config: CICDTemplateConfig): string { switch (config.language) { case 'nodejs': case 'typescript': case 'react': return ` sh 'npm run test:unit -- --coverage' sh 'npm run test:coverage-report'`; case 'python': return ` sh 'pytest tests/unit --cov=src --cov-report=xml'`; case 'java': return ` sh 'mvn test -Dtest.type=unit' sh 'mvn jacoco:report'`; case 'golang': return ` sh 'go test -v -coverprofile=coverage.out ./...' sh 'go tool cover -html=coverage.out -o coverage.html'`; default: return 'sh "echo Running unit tests"'; } } private getIntegrationTestSteps(config: CICDTemplateConfig): string { return ` // Start test services sh 'docker-compose -f docker-compose.test.yml up -d' // Wait for services sh 'sleep 10' // Run tests ${this.getTestCommand(config.language, 'integration')} // Cleanup sh 'docker-compose -f docker-compose.test.yml down'`; } private getE2ETestSteps(config: CICDTemplateConfig): string { return ` sh 'npm run build' sh 'npm run start:test &' sh 'npx wait-on http://localhost:3000' sh 'npx playwright test'`; } private getSASTSteps(config: CICDTemplateConfig): string { return ` // Run language-specific SAST ${this.getSASTCommand(config.language)} // Run generic security checks sh 'grep -r "password\\|secret\\|token" --include="*.${this.getFileExtension(config.language)}" . || true'`; } private getSASTCommand(language: string): string { const commands: Record<string, string> = { 'nodejs': 'sh "npx eslint-plugin-security"', 'python': 'sh "bandit -r src/"', 'java': 'sh "mvn spotbugs:check"', 'golang': 'sh "gosec ./..."', 'dotnet': 'sh "dotnet tool run security-scan"', 'rust': 'sh "cargo audit"', 'ruby': 'sh "brakeman"', 'php': 'sh "phpcs-security-audit"' }; return commands[language] || 'sh "echo SAST not configured"'; } private getDependencyCheckSteps(config: CICDTemplateConfig): string { return ` ${this.getDependencyScanCommand(config.language)} // Generate report sh 'mkdir -p security-reports' sh 'echo "Dependency check complete" > security-reports/dependencies.txt'`; } private getSonarCommand(language: string): string { const commands: Record<string, string> = { 'nodejs': 'sonar-scanner', 'python': 'sonar-scanner', 'java': 'mvn sonar:sonar', 'golang': 'sonar-scanner', 'dotnet': 'dotnet sonarscanner end', 'rust': 'sonar-scanner', 'ruby': 'sonar-scanner', 'php': 'sonar-scanner' }; return commands[language] || 'sonar-scanner'; } private getDeploymentBranch(env: any): string { const branches: Record<string, string> = { 'production': 'main', 'staging': 'staging', 'development': 'develop', 'qa': 'qa' }; return branches[env.type] || 'develop'; } private getAgentDockerfileContent(language: string): string { const content: Record<string, string> = { 'nodejs': ` # Install Node.js RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \\ && apt-get install -y nodejs \\ && npm install -g npm@latest`, 'python': ` # Install Python RUN apt-get install -y python3 python3-pip python3-venv \\ && pip3 install --upgrade pip setuptools wheel`, 'java': ` # Install Java and Maven RUN apt-get install -y openjdk-17-jdk maven`, 'golang': ` # Install Go RUN wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz \\ && tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz \\ && rm go1.21.0.linux-amd64.tar.gz ENV PATH=$PATH:/usr/local/go/bin`, 'dotnet': ` # Install .NET SDK RUN wget https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb -O packages-microsoft-prod.deb \\ && dpkg -i packages-microsoft-prod.deb \\ && rm packages-microsoft-prod.deb \\ && apt-get update \\ && apt-get install -y dotnet-sdk-8.0` }; return content[language] || '# No specific tools for this language'; } private getFileExtension(language: string): string { const extensions: Record<string, string> = { 'nodejs': 'js', 'typescript': 'ts', 'react': 'jsx', 'python': 'py', 'java': 'java', 'golang': 'go', 'dotnet': 'cs', 'rust': 'rs', 'ruby': 'rb', 'php': 'php' }; return extensions[language] || 'txt'; } private generateDocumentation(config: CICDTemplateConfig): string { return `# Jenkins Pipeline Documentation ## Overview This repository uses Jenkins for continuous integration and deployment with declarative pipeline syntax. ## Pipeline Structure ### Stages 1. **Checkout**: Clone repository and gather git information 2. **Setup**: Prepare build environment 3. **Build**: Build application and create artifacts 4. **Test**: Run unit, integration, and E2E tests in parallel 5. **Security Scan**: SAST, dependency check, and container scanning 6. **Quality Gates**: Check code quality metrics 7. **SonarQube Analysis**: Code quality analysis (if enabled) 8. **Build Docker Image**: Create and push container image (if enabled) 9. **Deploy**: Deploy to environments based on branch or manual trigger 10. **Performance Test**: Run performance tests on main branch ## Configuration ### Required Credentials ${this.getMetadata().requiredSecrets?.map(s => `- \`${s}\``).join('\\n')} ### Parameters - \`ENVIRONMENT\`: Target deployment environment - \`SKIP_TESTS\`: Skip test execution - \`FORCE_DEPLOY\`: Force deployment even if quality gates fail ## Shared Libraries ### deploymentHelper Handles deployment strategies: - Rolling deployment - Blue-green deployment - Canary deployment ### qualityGates Checks quality metrics: - Code coverage - Duplicate code - Complexity ### notificationHelper Sends notifications to: - Slack - Email - Teams (if configured) ## Agent Configuration Using Kubernetes agents with language-specific containers: - Node.js: \`node:20-bullseye\` - Python: \`python:3.11-bullseye\` - Java: \`maven:3.9-openjdk-17\` - Go: \`golang:1.21-bullseye\` ## Testing ### Test Types - **Unit Tests**: Individual component testing - **Integration Tests**: Component interaction testing - **E2E Tests**: End-to-end workflow testing - **Performance Tests**: Load and stress testing ### Coverage Requirements Minimum coverage: ${config.coverageThreshold || 80}% ## Quality Gates ${config.qualityGates ? Object.entries(config.qualityGates) .map(([key, value]) => `- **${key}**: ${value}`) .join('\\n') : 'No quality gates configured.'} ## Deployment ### Environments ${config.environments?.map(env => ` #### ${env.name} - **Branch**: ${this.getDeploymentBranch(env)} - **URL**: ${env.url || 'TBD'} - **Approval**: ${env.approvalRequired ? 'Required' : 'Automatic'} `).join('')} ### Strategy Using ${config.deploymentStrategy || 'rolling'} deployment strategy. ## Troubleshooting ### Common Issues #### Build Failures \`\`\`bash # Check Jenkins logs jenkins logs -f <build-number> # Verify workspace jenkins workspace <job-name> # Check agent status kubectl get pods -l jenkins=agent \`\`\` #### Test Failures - Review test reports in Jenkins UI - Check test artifacts - Verify test environment configuration #### Deployment Failures - Check deployment credentials - Verify target environment - Review deployment logs ## Local Development ### Running Pipeline Locally \`\`\`bash # Install Jenkins CLI wget http://jenkins.example.com/jnlpJars/jenkins-cli.jar # Validate Jenkinsfile java -jar jenkins-cli.jar -s http://jenkins.example.com declarative-linter < Jenkinsfile # Trigger build java -jar jenkins-cli.jar -s http://jenkins.example.com build <job-name> \`\`\` ## Jenkins Configuration as Code Configuration is managed via \`jenkins.yaml\` using JCasC plugin. ## Support Contact the Platform Team for Jenkins-related issues.`; } }