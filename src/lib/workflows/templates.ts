import { WorkflowDefinition } from './workflow-engine'; // Pre-built workflow templates for common scenarios export const WORKFLOW_TEMPLATES: Record<string, WorkflowDefinition> = { SERVICE_DEPLOYMENT: { id: 'service-deployment-template', name: 'Service Deployment Workflow', description: 'Standard workflow for deploying services with approvals and notifications', version: '1.0.0', category: 'deployment', trigger: { type: 'manual', config: {} }, steps: [ { id: 'validate-deployment', name: 'Validate Deployment Request', type: 'condition', description: 'Validate deployment parameters and prerequisites', config: { validationRules: [ 'service_name_provided', 'environment_specified', 'image_tag_valid' ] }, conditions: [ { field: 'input.service_name', operator: 'exists', value: true }, { field: 'input.environment', operator: 'exists', value: true }, { field: 'input.image_tag', operator: 'exists', value: true } ], onSuccess: 'security-scan', onFailure: 'notify-validation-failure' }, { id: 'security-scan', name: 'Security Vulnerability Scan', type: 'api_call', description: 'Run security scan on the container image', config: { method: 'POST', url: '{{SECURITY_SCANNER_URL}}/scan', headers: { 'Authorization': 'Bearer {{SECURITY_SCANNER_TOKEN}}' }, body: { image: '{{input.image_tag}}', severity_threshold: 'high' } }, timeout: 300, onSuccess: 'check-security-results', onFailure: 'notify-security-failure' }, { id: 'check-security-results', name: 'Check Security Scan Results', type: 'condition', description: 'Verify security scan passed', conditions: [ { field: 'step_security-scan.data.vulnerabilities.critical', operator: 'equals', value: 0 }, { field: 'step_security-scan.data.vulnerabilities.high', operator: 'less_than', value: 3 } ], onSuccess: 'request-deployment-approval', onFailure: 'notify-security-issues' }, { id: 'request-deployment-approval', name: 'Request Deployment Approval', type: 'approval', description: 'Get approval from team leads before deploying to production', config: { title: 'Deployment Approval Required', description: 'Please approve deployment of {{input.service_name}} to {{input.environment}}', approvers: ['{{input.team_lead}}', '{{PLATFORM_TEAM_LEAD}}'], requiredApprovals: 1, expirationHours: 24, data: { service: '{{input.service_name}}', environment: '{{input.environment}}', image: '{{input.image_tag}}', requestedBy: '{{startedBy}}' } }, onSuccess: 'notify-approval-granted', onFailure: 'notify-approval-denied', timeout: 86400 // 24 hours }, { id: 'notify-approval-granted', name: 'Notify Approval Granted', type: 'notification', description: 'Notify team that deployment was approved', config: { recipients: ['{{startedBy}}', '{{input.team_members}}'], subject: 'Deployment Approved: {{input.service_name}}', message: 'Your deployment request for {{input.service_name}} to {{input.environment}} has been approved and will proceed.' }, onSuccess: 'execute-deployment' }, { id: 'execute-deployment', name: 'Execute Deployment', type: 'api_call', description: 'Deploy the service to the target environment', config: { method: 'POST', url: '{{DEPLOYMENT_API_URL}}/deploy', headers: { 'Authorization': 'Bearer {{DEPLOYMENT_API_TOKEN}}' }, body: { service: '{{input.service_name}}', environment: '{{input.environment}}', image: '{{input.image_tag}}', config: '{{input.deployment_config}}' } }, timeout: 600, retryCount: 2, retryDelay: 30, onSuccess: 'verify-deployment', onFailure: 'handle-deployment-failure' }, { id: 'verify-deployment', name: 'Verify Deployment Health', type: 'api_call', description: 'Verify the deployed service is healthy', config: { method: 'GET', url: '{{MONITORING_URL}}/health/{{input.service_name}}', headers: { 'Authorization': 'Bearer {{MONITORING_TOKEN}}' } }, timeout: 120, onSuccess: 'notify-deployment-success', onFailure: 'notify-deployment-health-issues' }, { id: 'notify-deployment-success', name: 'Notify Deployment Success', type: 'notification', description: 'Notify team of successful deployment', config: { recipients: ['{{startedBy}}', '{{input.team_members}}', '{{PLATFORM_TEAM}}'], subject: 'Deployment Successful: {{input.service_name}}', message: 'Successfully deployed {{input.service_name}} version {{input.image_tag}} to {{input.environment}}. Service is healthy and operational.' } }, { id: 'notify-validation-failure', name: 'Notify Validation Failure', type: 'notification', description: 'Notify about validation failures', config: { recipients: ['{{startedBy}}'], subject: 'Deployment Validation Failed', message: 'Deployment request validation failed. Please check your input parameters and try again.' } }, { id: 'notify-security-failure', name: 'Notify Security Scan Failure', type: 'notification', description: 'Notify about security scan failures', config: { recipients: ['{{startedBy}}', '{{SECURITY_TEAM}}'], subject: 'Security Scan Failed: {{input.service_name}}', message: 'Security scan failed for {{input.image_tag}}. Deployment cannot proceed until security issues are resolved.' } }, { id: 'notify-security-issues', name: 'Notify Security Issues Found', type: 'notification', description: 'Notify about security vulnerabilities found', config: { recipients: ['{{startedBy}}', '{{SECURITY_TEAM}}'], subject: 'Security Issues Found: {{input.service_name}}', message: 'Security scan found vulnerabilities in {{input.image_tag}}. Please address these issues before deployment.' } }, { id: 'notify-approval-denied', name: 'Notify Approval Denied', type: 'notification', description: 'Notify that deployment was denied', config: { recipients: ['{{startedBy}}'], subject: 'Deployment Denied: {{input.service_name}}', message: 'Your deployment request for {{input.service_name}} was denied. Please contact your team lead for more information.' } }, { id: 'handle-deployment-failure', name: 'Handle Deployment Failure', type: 'notification', description: 'Handle deployment failure and notify team', config: { recipients: ['{{startedBy}}', '{{PLATFORM_TEAM}}'], subject: 'Deployment Failed: {{input.service_name}}', message: 'Deployment of {{input.service_name}} to {{input.environment}} failed. Platform team has been notified.' } }, { id: 'notify-deployment-health-issues', name: 'Notify Deployment Health Issues', type: 'notification', description: 'Notify about post-deployment health issues', config: { recipients: ['{{startedBy}}', '{{PLATFORM_TEAM}}'], subject: 'Deployment Health Issues: {{input.service_name}}', message: 'Deployment completed but health checks are failing for {{input.service_name}}. Please investigate.' } } ], variables: { SECURITY_SCANNER_URL: process.env.SECURITY_SCANNER_URL || 'https://security-scanner.internal', DEPLOYMENT_API_URL: process.env.DEPLOYMENT_API_URL || 'https://deployment-api.internal', MONITORING_URL: process.env.MONITORING_URL || 'https://monitoring.internal', PLATFORM_TEAM_LEAD: process.env.PLATFORM_TEAM_LEAD || 'platform-lead@company.com', PLATFORM_TEAM: process.env.PLATFORM_TEAM || 'platform-team@company.com', SECURITY_TEAM: process.env.SECURITY_TEAM || 'security-team@company.com' }, permissions: { execute: ['developer', 'devops', 'team-lead'], approve: ['team-lead', 'platform-lead'], view: ['developer', 'devops', 'team-lead', 'platform-team'] }, enabled: true, createdBy: 'system', createdAt: new Date(), updatedAt: new Date() }, USER_ONBOARDING: { id: 'user-onboarding-template', name: 'New User Onboarding', description: 'Workflow for onboarding new team members', version: '1.0.0', category: 'onboarding', trigger: { type: 'manual', config: {} }, steps: [ { id: 'validate-user-info', name: 'Validate User Information', type: 'condition', description: 'Validate required user information is provided', conditions: [ { field: 'input.email', operator: 'exists', value: true }, { field: 'input.full_name', operator: 'exists', value: true }, { field: 'input.team', operator: 'exists', value: true }, { field: 'input.role', operator: 'exists', value: true } ], onSuccess: 'create-accounts', onFailure: 'notify-validation-error' }, { id: 'create-accounts', name: 'Create User Accounts', type: 'api_call', description: 'Create user accounts in various systems', config: { method: 'POST', url: '{{USER_MANAGEMENT_API}}/users', body: { email: '{{input.email}}', name: '{{input.full_name}}', team: '{{input.team}}', role: '{{input.role}}', manager: '{{input.manager}}' } }, onSuccess: 'assign-permissions', onFailure: 'notify-account-creation-failure' }, { id: 'assign-permissions', name: 'Assign Role-based Permissions', type: 'api_call', description: 'Assign appropriate permissions based on role', config: { method: 'POST', url: '{{RBAC_API}}/assign-role', body: { userId: '{{step_create-accounts.data.userId}}', role: '{{input.role}}', team: '{{input.team}}' } }, onSuccess: 'setup-development-environment', onFailure: 'notify-permission-failure' }, { id: 'setup-development-environment', name: 'Setup Development Environment', type: 'api_call', description: 'Provision development tools and access', config: { method: 'POST', url: '{{DEV_PROVISIONING_API}}/provision', body: { userId: '{{step_create-accounts.data.userId}}', team: '{{input.team}}', tools: '{{input.required_tools}}' } }, onSuccess: 'send-welcome-email', onFailure: 'notify-provisioning-failure' }, { id: 'send-welcome-email', name: 'Send Welcome Email', type: 'notification', description: 'Send welcome email with onboarding information', config: { recipients: ['{{input.email}}'], subject: 'Welcome to {{COMPANY_NAME}} - Your Account is Ready!', message: `Welcome {{input.full_name}}! Your account has been created and you now have access to our development platform. Your login credentials: - Email: {{input.email}} - Temporary password will be sent separately Next steps: 1. Log in to the developer portal 2. Complete your profile setup 3. Join your team Slack channel: #{{input.team}} 4. Schedule onboarding meeting with your manager If you have any questions, please reach out to your manager {{input.manager}} or the platform team.` }, onSuccess: 'notify-manager' }, { id: 'notify-manager', name: 'Notify Manager', type: 'notification', description: 'Notify manager about new team member setup', config: { recipients: ['{{input.manager}}'], subject: 'New Team Member Onboarded: {{input.full_name}}', message: `{{input.full_name}} has been successfully onboarded to your team. Their account is active and they have been granted {{input.role}} permissions. Please schedule an onboarding meeting to get them started.` }, onSuccess: 'schedule-follow-up' }, { id: 'schedule-follow-up', name: 'Schedule Follow-up Check', type: 'delay', description: 'Wait 7 days before follow-up', config: { delaySeconds: 604800 // 7 days }, onSuccess: 'send-follow-up' }, { id: 'send-follow-up', name: 'Send Follow-up', type: 'notification', description: 'Check on new user after one week', config: { recipients: ['{{input.email}}', '{{input.manager}}'], subject: 'Onboarding Follow-up: {{input.full_name}}', message: `Hi {{input.full_name}}, it's been a week since you joined! How is your onboarding going? If you need any help or have questions, please don't hesitate to reach out.` } }, { id: 'notify-validation-error', name: 'Notify Validation Error', type: 'notification', config: { recipients: ['{{startedBy}}'], subject: 'User Onboarding - Validation Error', message: 'User onboarding failed due to missing required information. Please provide all required fields.' } }, { id: 'notify-account-creation-failure', name: 'Notify Account Creation Failure', type: 'notification', config: { recipients: ['{{startedBy}}', '{{IT_TEAM}}'], subject: 'User Account Creation Failed', message: 'Failed to create user account for {{input.full_name}}. IT team has been notified.' } }, { id: 'notify-permission-failure', name: 'Notify Permission Assignment Failure', type: 'notification', config: { recipients: ['{{startedBy}}', '{{SECURITY_TEAM}}'], subject: 'Permission Assignment Failed', message: 'Failed to assign permissions for {{input.full_name}}. Security team has been notified.' } }, { id: 'notify-provisioning-failure', name: 'Notify Provisioning Failure', type: 'notification', config: { recipients: ['{{startedBy}}', '{{PLATFORM_TEAM}}'], subject: 'Development Environment Provisioning Failed', message: 'Failed to provision development environment for {{input.full_name}}. Platform team has been notified.' } } ], variables: { COMPANY_NAME: process.env.COMPANY_NAME || 'Your Company', USER_MANAGEMENT_API: process.env.USER_MANAGEMENT_API || 'https://user-mgmt.internal', RBAC_API: process.env.RBAC_API || 'https://rbac.internal', DEV_PROVISIONING_API: process.env.DEV_PROVISIONING_API || 'https://dev-provision.internal', IT_TEAM: process.env.IT_TEAM || 'it-team@company.com', SECURITY_TEAM: process.env.SECURITY_TEAM || 'security-team@company.com', PLATFORM_TEAM: process.env.PLATFORM_TEAM || 'platform-team@company.com' }, permissions: { execute: ['hr', 'manager', 'admin'], approve: ['manager', 'hr-lead'], view: ['hr', 'manager', 'admin'] }, enabled: true, createdBy: 'system', createdAt: new Date(), updatedAt: new Date() }, INCIDENT_RESPONSE: { id: 'incident-response-template', name: 'Incident Response Workflow', description: 'Automated incident response and escalation workflow', version: '1.0.0', category: 'incident_response', trigger: { type: 'webhook', config: { endpoint: '/workflows/incident-response' } }, steps: [ { id: 'assess-severity', name: 'Assess Incident Severity', type: 'condition', description: 'Determine incident severity based on impact', conditions: [ { field: 'input.affected_users', operator: 'greater_than', value: 1000 } ], config: { severity_mapping: { critical: 'affected_users > 1000 OR revenue_impact > 10000', high: 'affected_users > 100 OR revenue_impact > 1000', medium: 'affected_users > 10 OR revenue_impact > 100', low: 'other' } }, onSuccess: 'create-incident-ticket' }, { id: 'create-incident-ticket', name: 'Create Incident Ticket', type: 'api_call', description: 'Create ticket in incident management system', config: { method: 'POST', url: '{{INCIDENT_MANAGEMENT_API}}/incidents', body: { title: '{{input.title}}', description: '{{input.description}}', severity: '{{variables.calculated_severity}}', affected_services: '{{input.affected_services}}', reported_by: '{{input.reported_by}}' } }, onSuccess: 'notify-on-call' }, { id: 'notify-on-call', name: 'Notify On-call Engineer', type: 'api_call', description: 'Alert on-call engineer via PagerDuty/OpsGenie', config: { method: 'POST', url: '{{PAGERDUTY_API}}/incidents', headers: { 'Authorization': 'Token token={{PAGERDUTY_TOKEN}}' }, body: { incident: { type: 'incident', title: '{{input.title}}', service: { id: '{{PAGERDUTY_SERVICE_ID}}', type: 'service_reference' }, urgency: '{{variables.calculated_severity}}', body: { type: 'incident_body', details: '{{input.description}}' } } } }, onSuccess: 'start-war-room', onFailure: 'escalate-notification' }, { id: 'start-war-room', name: 'Start War Room', type: 'api_call', description: 'Create incident war room in Slack/Teams', config: { method: 'POST', url: '{{SLACK_API}}/conversations.create', headers: { 'Authorization': 'Bearer {{SLACK_TOKEN}}' }, body: { name: 'incident-{{step_create-incident-ticket.data.incident_id}}', is_private: false, initial_users: '{{input.incident_team}}' } }, onSuccess: 'post-incident-summary' }, { id: 'post-incident-summary', name: 'Post Incident Summary', type: 'api_call', description: 'Post incident details to war room', config: { method: 'POST', url: '{{SLACK_API}}/chat.postMessage', headers: { 'Authorization': 'Bearer {{SLACK_TOKEN}}' }, body: { channel: '{{step_start-war-room.data.channel.id}}', text: ` INCIDENT: {{input.title}}\n\nSeverity: {{variables.calculated_severity}}\nAffected Services: {{input.affected_services}}\nTicket: {{step_create-incident-ticket.data.ticket_url}}\n\nIncident Commander: {{input.incident_commander}}` } }, onSuccess: 'monitor-resolution-time' }, { id: 'monitor-resolution-time', name: 'Monitor Resolution Time', type: 'delay', description: 'Wait 30 minutes before checking resolution status', config: { delaySeconds: 1800 // 30 minutes }, onSuccess: 'check-resolution-status' }, { id: 'check-resolution-status', name: 'Check Resolution Status', type: 'api_call', description: 'Check if incident has been resolved', config: { method: 'GET', url: '{{INCIDENT_MANAGEMENT_API}}/incidents/{{step_create-incident-ticket.data.incident_id}}' }, onSuccess: 'evaluate-resolution' }, { id: 'evaluate-resolution', name: 'Evaluate Resolution', type: 'condition', description: 'Check if incident is resolved', conditions: [ { field: 'step_check-resolution-status.data.status', operator: 'equals', value: 'resolved' } ], onSuccess: 'close-incident', onFailure: 'escalate-incident' }, { id: 'escalate-incident', name: 'Escalate Incident', type: 'notification', description: 'Escalate unresolved incident to management', config: { recipients: ['{{ENGINEERING_MANAGER}}', '{{CTO}}'], subject: 'ESCALATION: Unresolved Incident {{step_create-incident-ticket.data.incident_id}}', message: `Incident {{input.title}} has not been resolved after 30 minutes. Manual intervention may be required.\n\nTicket: {{step_create-incident-ticket.data.ticket_url}}\nWar Room: {{step_start-war-room.data.channel.name}}` }, onSuccess: 'schedule-management-review' }, { id: 'close-incident', name: 'Close Incident', type: 'api_call', description: 'Close incident ticket and clean up', config: { method: 'PATCH', url: '{{INCIDENT_MANAGEMENT_API}}/incidents/{{step_create-incident-ticket.data.incident_id}}', body: { status: 'closed', closed_at: '{{current_timestamp}}' } }, onSuccess: 'schedule-post-mortem' }, { id: 'schedule-post-mortem', name: 'Schedule Post-mortem', type: 'api_call', description: 'Schedule post-mortem meeting for significant incidents', config: { method: 'POST', url: '{{CALENDAR_API}}/events', body: { summary: 'Post-mortem: {{input.title}}', description: 'Post-mortem analysis for incident {{step_create-incident-ticket.data.incident_id}}', attendees: '{{input.incident_team}}', duration: 60 } } }, { id: 'escalate-notification', name: 'Escalate Notification Failure', type: 'notification', description: 'Escalate when primary notification fails', config: { recipients: ['{{BACKUP_ON_CALL}}', '{{ENGINEERING_MANAGER}}'], subject: 'CRITICAL: Primary On-call Notification Failed', message: 'Primary on-call notification failed for incident {{input.title}}. Manual intervention required.' } }, { id: 'schedule-management-review', name: 'Schedule Management Review', type: 'api_call', description: 'Schedule management review for escalated incidents', config: { method: 'POST', url: '{{CALENDAR_API}}/events', body: { summary: 'Incident Review: {{input.title}}', description: 'Management review of escalated incident', attendees: ['{{ENGINEERING_MANAGER}}', '{{CTO}}', '{{input.incident_commander}}'], duration: 30 } } } ], variables: { INCIDENT_MANAGEMENT_API: process.env.INCIDENT_MANAGEMENT_API || 'https://incidents.internal', PAGERDUTY_API: process.env.PAGERDUTY_API || 'https://api.pagerduty.com', SLACK_API: process.env.SLACK_API || 'https://slack.com/api', CALENDAR_API: process.env.CALENDAR_API || 'https://calendar.internal', PAGERDUTY_SERVICE_ID: process.env.PAGERDUTY_SERVICE_ID || 'SERVICE_ID', ENGINEERING_MANAGER: process.env.ENGINEERING_MANAGER || 'eng-manager@company.com', CTO: process.env.CTO || 'cto@company.com', BACKUP_ON_CALL: process.env.BACKUP_ON_CALL || 'backup-oncall@company.com' }, permissions: { execute: ['developer', 'sre', 'on-call'], approve: ['manager', 'sre-lead'], view: ['developer', 'sre', 'manager'] }, enabled: true, createdBy: 'system', createdAt: new Date(), updatedAt: new Date() }, COMPLIANCE_AUDIT: { id: 'compliance-audit-template', name: 'Compliance Audit Workflow', description: 'Automated compliance checking and audit trail generation', version: '1.0.0', category: 'compliance', trigger: { type: 'schedule', config: { cron: '0 0 * * 1' // Weekly on Monday } }, steps: [ { id: 'collect-system-data', name: 'Collect System Data', type: 'api_call', description: 'Collect data from all monitored systems', config: { method: 'GET', url: '{{COMPLIANCE_API}}/collect-data', headers: { 'Authorization': 'Bearer {{COMPLIANCE_TOKEN}}' } }, onSuccess: 'run-compliance-checks' }, { id: 'run-compliance-checks', name: 'Run Compliance Checks', type: 'api_call', description: 'Execute all compliance validation rules', config: { method: 'POST', url: '{{COMPLIANCE_API}}/validate', body: { data: '{{step_collect-system-data.data}}', rules: ['SOC2', 'GDPR', 'HIPAA', 'SOX'], severity_threshold: 'medium' } }, onSuccess: 'evaluate-results' }, { id: 'evaluate-results', name: 'Evaluate Compliance Results', type: 'condition', description: 'Check if any compliance violations were found', conditions: [ { field: 'step_run-compliance-checks.data.violations.critical', operator: 'equals', value: 0 }, { field: 'step_run-compliance-checks.data.violations.high', operator: 'less_than', value: 3 } ], onSuccess: 'generate-compliance-report', onFailure: 'handle-violations' }, { id: 'generate-compliance-report', name: 'Generate Compliance Report', type: 'api_call', description: 'Generate detailed compliance report', config: { method: 'POST', url: '{{REPORTING_API}}/generate-report', body: { type: 'compliance', data: '{{step_run-compliance-checks.data}}', format: 'pdf', recipients: ['{{COMPLIANCE_OFFICER}}', '{{SECURITY_TEAM}}'] } }, onSuccess: 'send-success-notification' }, { id: 'handle-violations', name: 'Handle Compliance Violations', type: 'notification', description: 'Notify about compliance violations', config: { recipients: ['{{COMPLIANCE_OFFICER}}', '{{SECURITY_TEAM}}', '{{CTO}}'], subject: 'URGENT: Compliance Violations Detected', message: 'Compliance audit found violations that require immediate attention. Report attached.', priority: 'high' }, onSuccess: 'create-remediation-tickets' }, { id: 'create-remediation-tickets', name: 'Create Remediation Tickets', type: 'api_call', description: 'Create tickets for each compliance violation', config: { method: 'POST', url: '{{TICKETING_API}}/bulk-create', body: { template: 'compliance-violation', violations: '{{step_run-compliance-checks.data.violations}}', priority: 'high', assignee_team: 'security' } } }, { id: 'send-success-notification', name: 'Send Success Notification', type: 'notification', description: 'Notify about successful compliance check', config: { recipients: ['{{COMPLIANCE_OFFICER}}'], subject: 'Compliance Audit Completed Successfully', message: 'Weekly compliance audit completed with no major violations detected.' } } ], variables: { COMPLIANCE_API: process.env.COMPLIANCE_API || 'https://compliance.internal', REPORTING_API: process.env.REPORTING_API || 'https://reports.internal', TICKETING_API: process.env.TICKETING_API || 'https://tickets.internal', COMPLIANCE_OFFICER: process.env.COMPLIANCE_OFFICER || 'compliance@company.com', SECURITY_TEAM: process.env.SECURITY_TEAM || 'security-team@company.com', CTO: process.env.CTO || 'cto@company.com' }, permissions: { execute: ['compliance-officer', 'security-lead', 'admin'], approve: ['compliance-officer', 'cto'], view: ['compliance-officer', 'security-team', 'audit-team'] }, enabled: true, createdBy: 'system', createdAt: new Date(), updatedAt: new Date() } }; // Helper function to create workflow from template export function createWorkflowFromTemplate( templateId: string, customizations: Partial<WorkflowDefinition> = {} ): WorkflowDefinition { const template = WORKFLOW_TEMPLATES[templateId]; if (!template) { throw new Error(`Workflow template ${templateId} not found`); } // Deep clone template const workflow = JSON.parse(JSON.stringify(template)); // Apply customizations Object.assign(workflow, customizations); // Generate new ID if not provided if (!customizations.id) { workflow.id = `${templateId}-${Date.now()}`; } // Update timestamps workflow.createdAt = new Date(); workflow.updatedAt = new Date(); return workflow; } // Get available templates export function getAvailableTemplates(): Array<{ id: string; name: string; description: string; category: string; }> { return Object.values(WORKFLOW_TEMPLATES).map(template => ({ id: template.id, name: template.name, description: template.description || '', category: template.category })); } export default WORKFLOW_TEMPLATES;