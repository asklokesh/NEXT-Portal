/**
 * Soundcheck Report Generator
 * Generates various report formats for quality assessments
 */

interface ServiceData {
 id: string;
 name: string;
 team: string;
 score: number;
 categories: Record<string, number>;
 issues: Array<{
 severity: string;
 category: string;
 check: string;
 description: string;
 }>;
 lastAssessment: string;
}

interface ReportData {
 title: string;
 generatedAt: string;
 services: ServiceData[];
 summary: {
 totalServices: number;
 averageScore: number;
 criticalIssues: number;
 recommendations: string[];
 };
}

export class SoundcheckReportGenerator {
 /**
 * Generate CSV report
 */
 static generateCSV(data: ReportData): string {
 const headers = [
 'Service Name',
 'Team',
 'Overall Score',
 'Security Score',
 'Reliability Score', 
 'Performance Score',
 'Documentation Score',
 'Testing Score',
 'Critical Issues',
 'Last Assessment'
 ];

 const rows = data.services.map(service => [
 service.name,
 service.team,
 service.score.toString(),
 (service.categories.security || 0).toString(),
 (service.categories.reliability || 0).toString(),
 (service.categories.performance || 0).toString(),
 (service.categories.documentation || 0).toString(),
 (service.categories.testing || 0).toString(),
 service.issues.filter(i => i.severity === 'critical').length.toString(),
 service.lastAssessment
 ]);

 const csvContent = [
 headers.join(','),
 ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
 ].join('\n');

 return csvContent;
 }

 /**
 * Generate JSON report
 */
 static generateJSON(data: ReportData): string {
 return JSON.stringify(data, null, 2);
 }

 /**
 * Generate Markdown report
 */
 static generateMarkdown(data: ReportData): string {
 const markdown = `# ${data.title}

**Generated:** ${new Date(data.generatedAt).toLocaleString()}

## Executive Summary

- **Total Services:** ${data.summary.totalServices}
- **Average Quality Score:** ${data.summary.averageScore}%
- **Critical Issues:** ${data.summary.criticalIssues}

## Service Quality Overview

| Service | Team | Score | Security | Reliability | Performance | Documentation | Testing | Critical Issues |
|---------|------|-------|----------|-------------|-------------|---------------|---------|-----------------|
${data.services.map(service => 
 `| ${service.name} | ${service.team} | ${service.score}% | ${service.categories.security || 0}% | ${service.categories.reliability || 0}% | ${service.categories.performance || 0}% | ${service.categories.documentation || 0}% | ${service.categories.testing || 0}% | ${service.issues.filter(i => i.severity === 'critical').length} |`
).join('\n')}

## Top Recommendations

${data.summary.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

## Detailed Service Analysis

${data.services.map(service => `
### ${service.name}

**Team:** ${service.team} 
**Overall Score:** ${service.score}% 
**Last Assessment:** ${service.lastAssessment}

#### Category Scores
- Security: ${service.categories.security || 0}%
- Reliability: ${service.categories.reliability || 0}%
- Performance: ${service.categories.performance || 0}%
- Documentation: ${service.categories.documentation || 0}%
- Testing: ${service.categories.testing || 0}%

#### Active Issues
${service.issues.length > 0 ? 
 service.issues.map(issue => `- **${issue.severity.toUpperCase()}** (${issue.category}): ${issue.description}`).join('\n') :
 'No active issues found.'
}
`).join('\n')}

---
*Report generated by Soundcheck Quality Platform*
`;

 return markdown;
 }

 /**
 * Generate PDF-ready HTML report
 */
 static generateHTML(data: ReportData): string {
 const html = `<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>${data.title}</title>
 <style>
 body {
 font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
 line-height: 1.6;
 color: #333;
 max-width: 1200px;
 margin: 0 auto;
 padding: 20px;
 }
 .header {
 border-bottom: 2px solid #e5e7eb;
 padding-bottom: 20px;
 margin-bottom: 30px;
 }
 .summary {
 display: grid;
 grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
 gap: 20px;
 margin-bottom: 30px;
 }
 .summary-card {
 background: #f9fafb;
 padding: 20px;
 border-radius: 8px;
 border-left: 4px solid #3b82f6;
 }
 .summary-card h3 {
 margin: 0 0 5px 0;
 font-size: 14px;
 text-transform: uppercase;
 color: #6b7280;
 }
 .summary-card .value {
 font-size: 24px;
 font-weight: bold;
 color: #1f2937;
 }
 table {
 width: 100%;
 border-collapse: collapse;
 margin-bottom: 30px;
 }
 th, td {
 padding: 12px;
 text-align: left;
 border-bottom: 1px solid #e5e7eb;
 }
 th {
 background-color: #f9fafb;
 font-weight: 600;
 }
 .score {
 font-weight: bold;
 }
 .score.excellent { color: #059669; }
 .score.good { color: #d97706; }
 .score.poor { color: #dc2626; }
 .service-detail {
 margin-bottom: 40px;
 padding: 20px;
 border: 1px solid #e5e7eb;
 border-radius: 8px;
 }
 .category-scores {
 display: grid;
 grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
 gap: 15px;
 margin: 15px 0;
 }
 .category-score {
 background: #f3f4f6;
 padding: 10px;
 border-radius: 6px;
 text-align: center;
 }
 .issue {
 padding: 10px;
 margin: 5px 0;
 border-radius: 6px;
 border-left: 4px solid;
 }
 .issue.critical {
 background: #fef2f2;
 border-left-color: #dc2626;
 }
 .issue.high {
 background: #fffbeb;
 border-left-color: #d97706;
 }
 .issue.medium {
 background: #fefce8;
 border-left-color: #ca8a04;
 }
 .footer {
 margin-top: 40px;
 padding-top: 20px;
 border-top: 1px solid #e5e7eb;
 text-align: center;
 color: #6b7280;
 font-size: 14px;
 }
 </style>
</head>
<body>
 <div class="header">
 <h1>${data.title}</h1>
 <p><strong>Generated:</strong> ${new Date(data.generatedAt).toLocaleString()}</p>
 </div>

 <div class="summary">
 <div class="summary-card">
 <h3>Total Services</h3>
 <div class="value">${data.summary.totalServices}</div>
 </div>
 <div class="summary-card">
 <h3>Average Score</h3>
 <div class="value">${data.summary.averageScore}%</div>
 </div>
 <div class="summary-card">
 <h3>Critical Issues</h3>
 <div class="value">${data.summary.criticalIssues}</div>
 </div>
 </div>

 <h2>Service Quality Overview</h2>
 <table>
 <thead>
 <tr>
 <th>Service</th>
 <th>Team</th>
 <th>Overall Score</th>
 <th>Security</th>
 <th>Reliability</th>
 <th>Performance</th>
 <th>Documentation</th>
 <th>Testing</th>
 <th>Critical Issues</th>
 </tr>
 </thead>
 <tbody>
 ${data.services.map(service => {
 const getScoreClass = (score: number) => {
 if (score >= 90) return 'excellent';
 if (score >= 75) return 'good';
 return 'poor';
 };
 
 return `<tr>
 <td><strong>${service.name}</strong></td>
 <td>${service.team}</td>
 <td><span class="score ${getScoreClass(service.score)}">${service.score}%</span></td>
 <td>${service.categories.security || 0}%</td>
 <td>${service.categories.reliability || 0}%</td>
 <td>${service.categories.performance || 0}%</td>
 <td>${service.categories.documentation || 0}%</td>
 <td>${service.categories.testing || 0}%</td>
 <td>${service.issues.filter(i => i.severity === 'critical').length}</td>
 </tr>`;
 }).join('')}
 </tbody>
 </table>

 <h2>Recommendations</h2>
 <ul>
 ${data.summary.recommendations.map(rec => `<li>${rec}</li>`).join('')}
 </ul>

 <h2>Detailed Service Analysis</h2>
 ${data.services.map(service => `
 <div class="service-detail">
 <h3>${service.name}</h3>
 <p><strong>Team:</strong> ${service.team}</p>
 <p><strong>Overall Score:</strong> <span class="score ${service.score >= 90 ? 'excellent' : service.score >= 75 ? 'good' : 'poor'}">${service.score}%</span></p>
 <p><strong>Last Assessment:</strong> ${service.lastAssessment}</p>
 
 <h4>Category Scores</h4>
 <div class="category-scores">
 <div class="category-score">
 <div>Security</div>
 <strong>${service.categories.security || 0}%</strong>
 </div>
 <div class="category-score">
 <div>Reliability</div>
 <strong>${service.categories.reliability || 0}%</strong>
 </div>
 <div class="category-score">
 <div>Performance</div>
 <strong>${service.categories.performance || 0}%</strong>
 </div>
 <div class="category-score">
 <div>Documentation</div>
 <strong>${service.categories.documentation || 0}%</strong>
 </div>
 <div class="category-score">
 <div>Testing</div>
 <strong>${service.categories.testing || 0}%</strong>
 </div>
 </div>

 <h4>Active Issues</h4>
 ${service.issues.length > 0 ? 
 service.issues.map(issue => `
 <div class="issue ${issue.severity}">
 <strong>${issue.severity.toUpperCase()}</strong> (${issue.category}): ${issue.description}
 </div>
 `).join('') :
 '<p>No active issues found.</p>'
 }
 </div>
 `).join('')}

 <div class="footer">
 <p>Report generated by Soundcheck Quality Platform</p>
 </div>
</body>
</html>`;

 return html;
 }

 /**
 * Download file helper
 */
 static downloadFile(content: string, filename: string, mimeType: string) {
 const blob = new Blob([content], { type: mimeType });
 const url = URL.createObjectURL(blob);
 const link = document.createElement('a');
 link.href = url;
 link.download = filename;
 document.body.appendChild(link);
 link.click();
 document.body.removeChild(link);
 URL.revokeObjectURL(url);
 }

 /**
 * Export report in specified format
 */
 static exportReport(data: ReportData, format: 'csv' | 'json' | 'markdown' | 'html') {
 const timestamp = new Date().toISOString().split('T')[0];
 const baseFilename = `soundcheck-report-${timestamp}`;

 switch (format) {
 case 'csv':
 this.downloadFile(
 this.generateCSV(data),
 `${baseFilename}.csv`,
 'text/csv'
 );
 break;
 case 'json':
 this.downloadFile(
 this.generateJSON(data),
 `${baseFilename}.json`,
 'application/json'
 );
 break;
 case 'markdown':
 this.downloadFile(
 this.generateMarkdown(data),
 `${baseFilename}.md`,
 'text/markdown'
 );
 break;
 case 'html':
 this.downloadFile(
 this.generateHTML(data),
 `${baseFilename}.html`,
 'text/html'
 );
 break;
 }
 }
}