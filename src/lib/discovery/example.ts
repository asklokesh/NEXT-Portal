/** * Example usage of the GitHub Discovery System * * This file demonstrates how to use all components of the GitHub discovery system * including scanning, importing, and scheduling. */ import { GitHubScanner, type GitHubConfig, type ScanOptions } from './GitHubScanner'; import { getGitHubScheduler, type ScheduledScanConfig } from './GitHubScheduler'; // Example 1: Basic Repository Scanning export async function basicScanExample() { console.log('=== Basic Repository Scanning Example ==='); const config: GitHubConfig = { token: process.env.GITHUB_TOKEN || 'your-github-token-here', }; const scanner = new GitHubScanner(config); const scanOptions: ScanOptions = { organizations: ['facebook', 'microsoft'], // Example organizations users: ['torvalds'], // Example user includePrivate: false, // Only public repos for this example includeArchived: false, includeForks: true, batchSize: 20, maxConcurrent: 3, dryRun: true, // Safe mode - no actual imports }; try { const result = await scanner.scanRepositories(scanOptions); console.log(` Scan completed successfully!`); console.log(` Summary:`); console.log(` Total repositories scanned: ${result.totalScanned}`); console.log(` With catalog-info.yaml: ${result.summary.withCatalogInfo}`); console.log(` Auto-generated entries: ${result.summary.autoGenerated}`); console.log(` Private repositories: ${result.summary.private}`); console.log(` Archived repositories: ${result.summary.archived}`); console.log(` Errors encountered: ${result.errors.length}`); console.log(`\n Languages found:`); Object.entries(result.summary.byLanguage) .sort(([,a], [,b]) => b - a) .slice(0, 10) .forEach(([lang, count]) => { console.log(` ${lang}: ${count} repositories`); }); console.log(`\n Frameworks detected:`); Object.entries(result.summary.byFramework) .sort(([,a], [,b]) => b - a) .forEach(([framework, count]) => { console.log(` ${framework}: ${count} repositories`); }); console.log(`\n Rate limit info:`); console.log(` Remaining: ${result.rateLimitInfo.remaining}/${result.rateLimitInfo.limit}`); console.log(` Resets at: ${result.rateLimitInfo.resetTime.toISOString()}`); // Show some example repositories console.log(`\n Example repositories found:`); result.repositories.slice(0, 5).forEach(repo => { console.log(` ${repo.full_name} (${repo.language || 'Unknown'}) - ${repo.stargazers_count} stars`); if (repo.framework_detection.framework) { console.log(` Framework: ${repo.framework_detection.framework} (${repo.framework_detection.confidence}% confidence)`); } if (repo.has_catalog_info) { console.log(` Has catalog-info.yaml`); } else if (repo.auto_generated_catalog) { console.log(` Auto-generated catalog entry`); } }); return result; } catch (error) { console.error(' Scan failed:', error); throw error; } } // Example 2: Import Repositories to Catalog export async function importRepositoriesExample(repositories: any[]) { console.log('\n=== Repository Import Example ==='); const importOptions = { overwriteExisting: false, skipValidation: false, generateMissing: true, defaultOwner: 'platform-team', defaultLifecycle: 'experimental', addTags: ['github-discovered', 'auto-imported'], }; try { const response = await fetch('/api/catalog/discovery/github/import', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ repositories: repositories.slice(0, 10), // Import first 10 for example options: importOptions, }), }); if (!response.ok) { throw new Error(`Import failed: ${response.statusText}`); } const result = await response.json(); console.log(` Import completed!`); console.log(` Summary:`); console.log(` Successfully imported: ${result.data.imported}`); console.log(` Skipped: ${result.data.skipped}`); console.log(` Errors: ${result.data.errors}`); console.log(`\n Import breakdown:`); Object.entries(result.data.summary.byKind).forEach(([kind, count]) => { console.log(` ${kind}: ${count} entities`); }); if (result.data.details.errors.length > 0) { console.log(`\n Import errors:`); result.data.details.errors.slice(0, 5).forEach((error: any) => { console.log(` ${error.repository}: ${error.error}`); }); } return result.data; } catch (error) { console.error(' Import failed:', error); throw error; } } // Example 3: Set Up Scheduled Scanning export async function setupScheduledScanExample() { console.log('\n=== Scheduled Scan Setup Example ==='); const scheduler = getGitHubScheduler(); const scheduledConfig: ScheduledScanConfig = { id: `github-scan-${Date.now()}`, name: 'Daily Organization Scan', description: 'Automatically scan organization repositories daily and import new services', enabled: true, schedule: '0 2 * * *', // Daily at 2 AM UTC githubConfig: { token: process.env.GITHUB_TOKEN || 'your-github-token-here', }, scanOptions: { organizations: ['my-organization'], includePrivate: true, includeArchived: false, includeForks: false, batchSize: 50, maxConcurrent: 5, dryRun: false, }, importOptions: { overwriteExisting: false, generateMissing: true, defaultOwner: 'platform-team', defaultLifecycle: 'experimental', addTags: ['github-scheduled', 'auto-discovered'], }, notifications: { onSuccess: [ 'https://hooks.slack.com/services/YOUR/WEBHOOK/URL', 'platform-team@company.com', ], onFailure: [ 'https://hooks.slack.com/services/YOUR/ERROR/WEBHOOK', 'platform-team@company.com', ], }, retention: { keepLogs: 100, keepResults: 30, }, metadata: { team: 'platform', environment: 'production', criticality: 'high', }, }; try { await scheduler.addScheduledScan(scheduledConfig); console.log(` Scheduled scan created: ${scheduledConfig.name}`); // Get scheduler statistics const stats = scheduler.getStats(); console.log(` Scheduler statistics:`); console.log(` Total configurations: ${stats.totalConfigs}`); console.log(` Active configurations: ${stats.activeConfigs}`); console.log(` Total executions: ${stats.totalExecutions}`); console.log(` Success rate: ${stats.totalExecutions > 0 ? ((stats.successfulExecutions / stats.totalExecutions) * 100).toFixed(1) : 0}%`); if (stats.nextExecution) { console.log(` Next execution: ${stats.nextExecution.toISOString()}`); } return scheduledConfig; } catch (error) { console.error(' Failed to set up scheduled scan:', error); throw error; } } // Example 4: Monitor and Manage Scheduled Scans export async function manageScheduledScansExample() { console.log('\n=== Scheduled Scan Management Example ==='); try { // Get all scheduled scans const response = await fetch('/api/catalog/discovery/github/scheduler'); const schedulerData = await response.json(); console.log(` Current scheduled scans: ${schedulerData.data.configurations.length}`); schedulerData.data.configurations.forEach((config: any, index: number) => { console.log(` ${index + 1}. ${config.name} (${config.enabled ? 'Enabled' : 'Disabled'})`); console.log(` Schedule: ${config.schedule}`); console.log(` Targets: ${[ ...(config.scanOptions.organizations || []).map((org: string) => `org:${org}`), ...(config.scanOptions.users || []).map((user: string) => `user:${user}`), ...(config.scanOptions.repositories || []).map((repo: string) => `repo:${repo}`), ].join(', ')}`); }); // Test a configuration if (schedulerData.data.configurations.length > 0) { const testConfig = schedulerData.data.configurations[0]; console.log(`\n Testing configuration: ${testConfig.name}`); const testResponse = await fetch('/api/catalog/discovery/github/scheduler/actions', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ action: 'test', configId: testConfig.id, }), }); const testResult = await testResponse.json(); console.log(` Configuration valid: ${testResult.data.configurationValid ? '' : ''}`); console.log(` GitHub connection: ${testResult.data.githubConnectionValid ? '' : ''}`); console.log(` Cron expression: ${testResult.data.cronExpressionValid ? '' : ''}`); console.log(` Scan targets: ${testResult.data.scanTargetsValid ? '' : ''}`); if (testResult.data.errors.length > 0) { console.log(` Errors: ${testResult.data.errors.join(', ')}`); } if (testResult.data.warnings.length > 0) { console.log(` Warnings: ${testResult.data.warnings.join(', ')}`); } } // Show execution history if (schedulerData.data.executionHistory && schedulerData.data.executionHistory.length > 0) { console.log(`\n Recent execution history:`); schedulerData.data.executionHistory.slice(0, 5).forEach((execution: any) => { const status = execution.status === 'completed' ? '' : execution.status === 'failed' ? '' : execution.status === 'running' ? '' : '⏸'; console.log(` ${status} ${execution.startTime} - ${execution.configId}`); if (execution.result) { console.log(` Scanned: ${execution.result.totalScanned}, Imported: ${execution.importSummary?.imported || 0}`); } if (execution.duration) { console.log(` Duration: ${(execution.duration / 1000).toFixed(1)}s`); } }); } return schedulerData.data; } catch (error) { console.error(' Failed to manage scheduled scans:', error); throw error; } } // Example 5: Complete Workflow export async function completeWorkflowExample() { console.log('\n === Complete GitHub Discovery Workflow ==='); try { // Step 1: Scan repositories console.log('\n1⃣ Scanning repositories...'); const scanResult = await basicScanExample(); // Step 2: Filter and select repositories to import console.log('\n2⃣ Filtering repositories for import...'); const repositoriesToImport = scanResult.repositories.filter((repo: any) => { // Example filtering criteria return !repo.archived && !repo.disabled && repo.stargazers_count >= 5 && // Only repos with some activity (repo.has_catalog_info || repo.auto_generated_catalog) && // Has catalog info repo.framework_detection.confidence > 70; // High confidence framework detection }); console.log(` Selected ${repositoriesToImport.length} repositories for import`); // Step 3: Import selected repositories if (repositoriesToImport.length > 0) { console.log('\n3⃣ Importing repositories...'); await importRepositoriesExample(repositoriesToImport); } // Step 4: Set up scheduled scanning for continuous discovery console.log('\n4⃣ Setting up scheduled scanning...'); await setupScheduledScanExample(); // Step 5: Monitor the system console.log('\n5⃣ Monitoring scheduled scans...'); await manageScheduledScansExample(); console.log('\n Complete workflow executed successfully!'); console.log('\n Next steps:'); console.log(' 1. Configure your GitHub authentication tokens'); console.log(' 2. Customize scan options for your organization'); console.log(' 3. Set up notifications for scheduled scans'); console.log(' 4. Monitor the catalog for new services'); console.log(' 5. Integrate with your CI/CD pipelines'); } catch (error) { console.error(' Workflow failed:', error); throw error; } } // Example usage in a Node.js script if (require.main === module) { // Run the complete workflow example completeWorkflowExample() .then(() => { console.log('\n All examples completed successfully!'); process.exit(0); }) .catch((error) => { console.error('\n Examples failed:', error); process.exit(1); }); } // Export functions for use in other modules export { basicScanExample, importRepositoriesExample, setupScheduledScanExample, manageScheduledScansExample, completeWorkflowExample, };