/** * Client Safe Wrapper Component * Prevents server-only components from causing client-side errors */ 'use client'; import React, { Suspense, ErrorBoundary } from 'react'; import { ModuleErrorBoundary, DefaultErrorFallback } from '@/lib/error/module-loading-handler'; import { isClient, FeatureDetection } from '@/lib/runtime/client-server-guards'; interface ClientSafeWrapperProps { children: React.ReactNode; fallback?: React.ComponentType<any>; loadingFallback?: React.ComponentType; serverOnly?: boolean; requireFeatures?: (keyof typeof FeatureDetection)[]; } /** * Loading spinner component */ function DefaultLoadingFallback() { return ( <div className="flex items-center justify-center p-8"> <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div> </div> ); } /** * Feature not supported fallback */ function FeatureNotSupportedFallback({ features }: { features: string[] }) { return ( <div className="p-4 border border-yellow-200 rounded-md bg-yellow-50"> <div className="flex"> <div className="flex-shrink-0"> <span className="text-yellow-400" aria-hidden="true"></span> </div> <div className="ml-3"> <h3 className="text-sm font-medium text-yellow-800"> Feature Not Supported </h3> <div className="mt-2 text-sm text-yellow-700"> <p> This component requires the following browser features: {features.join(', ')} </p> </div> </div> </div> </div> ); } /** * Server-only component fallback */ function ServerOnlyFallback() { return ( <div className="p-4 border border-blue-200 rounded-md bg-blue-50"> <div className="flex"> <div className="flex-shrink-0"> <span className="text-blue-400" aria-hidden="true"></span> </div> <div className="ml-3"> <h3 className="text-sm font-medium text-blue-800"> Server Component </h3> <div className="mt-2 text-sm text-blue-700"> <p> This component is only available during server-side rendering. </p> </div> </div> </div> </div> ); } /** * Client Safe Wrapper Component */ export function ClientSafeWrapper({ children, fallback = DefaultErrorFallback, loadingFallback = DefaultLoadingFallback, serverOnly = false, requireFeatures = [] }: ClientSafeWrapperProps) { // Check if this is a server-only component on the client if (serverOnly && isClient) { return <ServerOnlyFallback />; } // Check required features if (requireFeatures.length > 0 && isClient) { const missingFeatures = requireFeatures.filter( feature => !FeatureDetection[feature] ); if (missingFeatures.length > 0) { return <FeatureNotSupportedFallback features={missingFeatures} />; } } return ( <ModuleErrorBoundary fallback={fallback}> <Suspense fallback={React.createElement(loadingFallback)}> {children} </Suspense> </ModuleErrorBoundary> ); } /** * HOC version for easier component wrapping */ export function withClientSafeWrapper<P extends object>( Component: React.ComponentType<P>, options?: Omit<ClientSafeWrapperProps, 'children'> ) { const WrappedComponent = React.forwardRef<any, P>((props, ref) => ( <ClientSafeWrapper {...options}> <Component {...props} ref={ref} /> </ClientSafeWrapper> )); WrappedComponent.displayName = `withClientSafeWrapper(${Component.displayName || Component.name})`; return WrappedComponent; } /** * Hook for safe feature detection */ export function useFeatureDetection() { return { ...FeatureDetection, hasFeature: (feature: keyof typeof FeatureDetection) => FeatureDetection[feature], requiresFeatures: (features: (keyof typeof FeatureDetection)[]) => features.every(feature => FeatureDetection[feature]), getMissingFeatures: (features: (keyof typeof FeatureDetection)[]) => features.filter(feature => !FeatureDetection[feature]) }; } /** * Safe dynamic import hook */ export function useSafeDynamicImport<T>( importFn: () => Promise<{ default: T }>, deps: React.DependencyList = [] ) { const [component, setComponent] = React.useState<T | null>(null); const [loading, setLoading] = React.useState(true); const [error, setError] = React.useState<Error | null>(null); React.useEffect(() => { let cancelled = false; const loadComponent = async () => { try { setLoading(true); setError(null); const module = await importFn(); if (!cancelled) { setComponent(module.default); } } catch (err) { if (!cancelled) { setError(err as Error); console.error('Safe dynamic import failed:', err); } } finally { if (!cancelled) { setLoading(false); } } }; loadComponent(); return () => { cancelled = true; }; }, deps); return { component, loading, error }; } export default ClientSafeWrapper;