/** * Email Service for Onboarding * Handles all email communications during customer onboarding */ import { Logger } from 'pino'; import nodemailer from 'nodemailer'; import { compile } from 'handlebars'; import { EmailTemplate, EmailCategory } from './types'; export class EmailService { private logger: Logger; private transporter: nodemailer.Transporter; private templates: Map<string, EmailTemplate>; constructor(logger: Logger) { this.logger = logger; this.templates = new Map(); // Initialize email transporter this.transporter = nodemailer.createTransport({ host: process.env.SMTP_HOST || 'smtp.sendgrid.net', port: parseInt(process.env.SMTP_PORT || '587'), secure: false, auth: { user: process.env.SMTP_USER || 'apikey', pass: process.env.SMTP_PASS || process.env.SENDGRID_API_KEY || '' } }); this.loadTemplates(); } /** * Send email verification */ async sendVerificationEmail(data: { email: string; firstName: string; verificationToken: string; }): Promise<void> { const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/auth/verify?token=${data.verificationToken}`; const template = this.templates.get('email_verification'); if (!template) throw new Error('Email template not found'); const html = compile(template.htmlContent)({ firstName: data.firstName, verificationUrl, expiryTime: '1 hour' }); await this.sendEmail({ to: data.email, subject: template.subject, html, category: EmailCategory.VERIFICATION }); } /** * Send welcome email */ async sendWelcomeEmail(data: { email: string; firstName: string; trialDays: number; }): Promise<void> { const template = this.templates.get('welcome'); if (!template) throw new Error('Welcome template not found'); const html = compile(template.htmlContent)({ firstName: data.firstName, trialDays: data.trialDays, dashboardUrl: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`, documentationUrl: `${process.env.NEXT_PUBLIC_APP_URL}/docs`, supportEmail: process.env.SUPPORT_EMAIL || 'support@saas-idp.com' }); await this.sendEmail({ to: data.email, subject: template.subject, html, category: EmailCategory.WELCOME }); } /** * Send onboarding completion email */ async sendOnboardingCompleteEmail(data: { email: string; firstName: string; nextSteps: string[]; }): Promise<void> { const template = this.templates.get('onboarding_complete'); if (!template) throw new Error('Onboarding complete template not found'); const html = compile(template.htmlContent)({ firstName: data.firstName, nextSteps: data.nextSteps, dashboardUrl: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`, templatesUrl: `${process.env.NEXT_PUBLIC_APP_URL}/templates`, integrationsUrl: `${process.env.NEXT_PUBLIC_APP_URL}/integrations` }); await this.sendEmail({ to: data.email, subject: template.subject, html, category: EmailCategory.ONBOARDING }); } /** * Send trial reminder email */ async sendTrialReminderEmail(data: { email: string; firstName: string; daysRemaining: number; usage: { servicesCreated: number; integrationsConnected: number; teamMembersInvited: number; }; }): Promise<void> { const template = this.templates.get('trial_reminder'); if (!template) throw new Error('Trial reminder template not found'); const html = compile(template.htmlContent)({ firstName: data.firstName, daysRemaining: data.daysRemaining, usage: data.usage, upgradeUrl: `${process.env.NEXT_PUBLIC_APP_URL}/pricing`, scheduleCallUrl: `${process.env.NEXT_PUBLIC_APP_URL}/schedule-demo` }); await this.sendEmail({ to: data.email, subject: template.subject.replace('{{days}}', data.daysRemaining.toString()), html, category: EmailCategory.TRIAL_REMINDER }); } /** * Send enterprise welcome email */ async sendEnterpriseWelcomeEmail(data: { email: string; name: string; company: string; dedicatedInstanceUrl?: string; }): Promise<void> { const template = this.templates.get('enterprise_welcome'); if (!template) throw new Error('Enterprise welcome template not found'); const html = compile(template.htmlContent)({ name: data.name, company: data.company, dedicatedInstanceUrl: data.dedicatedInstanceUrl, calendarUrl: `${process.env.NEXT_PUBLIC_APP_URL}/schedule-onboarding`, resourcesUrl: `${process.env.NEXT_PUBLIC_APP_URL}/enterprise-resources` }); await this.sendEmail({ to: data.email, subject: template.subject, html, category: EmailCategory.WELCOME }); } /** * Send check-in email */ async sendCheckInEmail(data: { email: string; firstName: string; daysSinceSignup: number; healthScore: number; suggestions: string[]; }): Promise<void> { const template = this.templates.get('check_in'); if (!template) throw new Error('Check-in template not found'); const html = compile(template.htmlContent)({ firstName: data.firstName, daysSinceSignup: data.daysSinceSignup, healthScore: data.healthScore, suggestions: data.suggestions, dashboardUrl: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`, supportUrl: `${process.env.NEXT_PUBLIC_APP_URL}/support` }); await this.sendEmail({ to: data.email, subject: template.subject, html, category: EmailCategory.ONBOARDING }); } /** * Send feature announcement email */ async sendFeatureAnnouncementEmail(data: { email: string; firstName: string; featureName: string; featureDescription: string; ctaUrl: string; }): Promise<void> { const template = this.templates.get('feature_announcement'); if (!template) throw new Error('Feature announcement template not found'); const html = compile(template.htmlContent)({ firstName: data.firstName, featureName: data.featureName, featureDescription: data.featureDescription, ctaUrl: data.ctaUrl }); await this.sendEmail({ to: data.email, subject: template.subject.replace('{{feature}}', data.featureName), html, category: EmailCategory.FEATURE_ANNOUNCEMENT }); } /** * Send survey email */ async sendSurveyEmail(data: { email: string; firstName: string; surveyType: 'NPS' | 'CSAT' | 'CES'; surveyUrl: string; }): Promise<void> { const template = this.templates.get('survey'); if (!template) throw new Error('Survey template not found'); const html = compile(template.htmlContent)({ firstName: data.firstName, surveyType: data.surveyType, surveyUrl: data.surveyUrl, incentive: this.getSurveyIncentive(data.surveyType) }); await this.sendEmail({ to: data.email, subject: template.subject, html, category: EmailCategory.SURVEY }); } // Private helper methods private async sendEmail(options: { to: string; subject: string; html: string; category: EmailCategory; }): Promise<void> { try { const info = await this.transporter.sendMail({ from: process.env.FROM_EMAIL || '"SaaS IDP" <noreply@saas-idp.com>', to: options.to, subject: options.subject, html: options.html, headers: { 'X-Email-Category': options.category, 'X-Sent-By': 'onboarding-service' } }); this.logger.info( { messageId: info.messageId, to: options.to, category: options.category }, 'Email sent successfully' ); } catch (error) { this.logger.error( { error, to: options.to, category: options.category }, 'Failed to send email' ); throw error; } } private loadTemplates(): void { // Email verification template this.templates.set('email_verification', { id: 'email_verification', name: 'Email Verification', subject: 'Verify your email for SaaS IDP', htmlContent: ` <!DOCTYPE html> <html> <head> <style> body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; } .container { max-width: 600px; margin: 0 auto; padding: 20px; } .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; } .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; } .button { display: inline-block; padding: 12px 30px; background: #667eea; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; } .footer { text-align: center; margin-top: 30px; color: #666; font-size: 12px; } </style> </head> <body> <div class="container"> <div class="header"> <h1>Welcome to SaaS IDP!</h1> </div> <div class="content"> <h2>Hi {{firstName}},</h2> <p>Thanks for signing up! Please verify your email address to get started with your free trial.</p> <p style="text-align: center;"> <a href="{{verificationUrl}}" class="button">Verify Email Address</a> </p> <p>Or copy and paste this link into your browser:</p> <p style="word-break: break-all; background: #fff; padding: 10px; border-radius: 5px;">{{verificationUrl}}</p> <p><strong>This link will expire in {{expiryTime}}.</strong></p> <p>If you didn't create an account, you can safely ignore this email.</p> </div> <div class="footer"> <p>Â© 2024 SaaS IDP. All rights reserved.</p> </div> </div> </body> </html> `, textContent: 'Please verify your email address', variables: ['firstName', 'verificationUrl', 'expiryTime'], category: EmailCategory.VERIFICATION }); // Welcome email template this.templates.set('welcome', { id: 'welcome', name: 'Welcome Email', subject: 'Welcome to SaaS IDP - Your {{trialDays}}-Day Trial Has Started!', htmlContent: ` <!DOCTYPE html> <html> <head> <style> body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; } .container { max-width: 600px; margin: 0 auto; padding: 20px; } .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; } .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; } .button { display: inline-block; padding: 12px 30px; background: #667eea; color: white; text-decoration: none; border-radius: 5px; margin: 10px 5px; } .feature-list { background: white; padding: 20px; border-radius: 5px; margin: 20px 0; } .feature-list li { margin: 10px 0; } .footer { text-align: center; margin-top: 30px; color: #666; font-size: 12px; } </style> </head> <body> <div class="container"> <div class="header"> <h1>Welcome Aboard! </h1> <p>Your {{trialDays}}-day free trial is now active</p> </div> <div class="content"> <h2>Hi {{firstName}},</h2> <p>Congratulations! Your SaaS IDP account is ready. You now have full access to all premium features for the next {{trialDays}} days.</p> <div class="feature-list"> <h3>What's included in your trial:</h3> <ul> <li> Unlimited users and projects</li> <li> All premium integrations</li> <li> Advanced analytics and reporting</li> <li> Priority support</li> <li> Custom templates and workflows</li> </ul> </div> <p style="text-align: center;"> <a href="{{dashboardUrl}}" class="button">Go to Dashboard</a> <a href="{{documentationUrl}}" class="button" style="background: #764ba2;">View Documentation</a> </p> <h3>Getting Started:</h3> <ol> <li>Complete your organization profile</li> <li>Connect your first integration</li> <li>Create a service in the catalog</li> <li>Invite your team members</li> </ol> <p>Need help? Reply to this email or contact us at {{supportEmail}}</p> </div> <div class="footer"> <p>Â© 2024 SaaS IDP. All rights reserved.</p> </div> </div> </body> </html> `, textContent: 'Welcome to SaaS IDP', variables: ['firstName', 'trialDays', 'dashboardUrl', 'documentationUrl', 'supportEmail'], category: EmailCategory.WELCOME }); // Onboarding complete template this.templates.set('onboarding_complete', { id: 'onboarding_complete', name: 'Onboarding Complete', subject: 'You're All Set! Here's What's Next', htmlContent: ` <!DOCTYPE html> <html> <head> <style> body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; } .container { max-width: 600px; margin: 0 auto; padding: 20px; } .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; } .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; } .success-banner { background: #10b981; color: white; padding: 15px; border-radius: 5px; text-align: center; margin: 20px 0; } .next-steps { background: white; padding: 20px; border-radius: 5px; margin: 20px 0; } .button { display: inline-block; padding: 12px 30px; background: #667eea; color: white; text-decoration: none; border-radius: 5px; margin: 10px 5px; } .footer { text-align: center; margin-top: 30px; color: #666; font-size: 12px; } </style> </head> <body> <div class="container"> <div class="header"> <h1>Congratulations! </h1> <p>You've successfully completed onboarding</p> </div> <div class="content"> <h2>Great job, {{firstName}}!</h2> <div class="success-banner"> <strong> Your platform is ready for action!</strong> </div> <p>You've successfully set up your SaaS IDP account. Here's what we recommend doing next to get the most value from the platform:</p> <div class="next-steps"> <h3>Recommended Next Steps:</h3> <ul> {{#each nextSteps}} <li>{{this}}</li> {{/each}} </ul> </div> <p style="text-align: center;"> <a href="{{dashboardUrl}}" class="button">Go to Dashboard</a> <a href="{{templatesUrl}}" class="button" style="background: #764ba2;">Browse Templates</a> <a href="{{integrationsUrl}}" class="button" style="background: #10b981;">Setup Integrations</a> </p> <h3>Need Help?</h3> <p>Our customer success team is here to ensure you succeed:</p> <ul> <li> Check our comprehensive documentation</li> <li> Use the in-app chat for instant help</li> <li> Schedule a personalized walkthrough</li> <li> Email us anytime at support@saas-idp.com</li> </ul> </div> <div class="footer"> <p>Â© 2024 SaaS IDP. All rights reserved.</p> </div> </div> </body> </html> `, textContent: 'Onboarding complete', variables: ['firstName', 'nextSteps', 'dashboardUrl', 'templatesUrl', 'integrationsUrl'], category: EmailCategory.ONBOARDING }); // Add more templates... this.logger.info(`Loaded ${this.templates.size} email templates`); } private getSurveyIncentive(surveyType: string): string { switch (surveyType) { case 'NPS': return '2-week trial extension for completing'; case 'CSAT': return '$10 platform credit for your feedback'; case 'CES': return 'Priority support upgrade for participating'; default: return 'Exclusive rewards for your feedback'; } } }