version: '3.8'

services:
 # PostgreSQL Database
 postgres:
 image: postgres:15-alpine
 container_name: backstage-postgres
 environment:
 POSTGRES_DB: backstage_idp
 POSTGRES_USER: backstage_user
 POSTGRES_PASSWORD: backstage_password
 POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256'
 ports:
 - '5432:5432'
 volumes:
 - postgres_data:/var/lib/postgresql/data
 - ./database/init:/docker-entrypoint-initdb.d
 healthcheck:
 test: ['CMD-SHELL', 'pg_isready -U backstage_user -d backstage_idp']
 interval: 10s
 timeout: 5s
 retries: 5
 networks:
 - backstage-network

 # Redis Cache and Sessions
 redis:
 image: redis:7-alpine
 container_name: backstage-redis
 ports:
 - '6379:6379'
 volumes:
 - redis_data:/data
 command: redis-server --appendonly yes --requirepass ""
 healthcheck:
 test: ['CMD', 'redis-cli', 'ping']
 interval: 10s
 timeout: 5s
 retries: 5
 networks:
 - backstage-network

 # Prometheus for Metrics
 prometheus:
 image: prom/prometheus:latest
 container_name: backstage-prometheus
 ports:
 - '9090:9090'
 volumes:
 - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
 - prometheus_data:/prometheus
 command:
 - '--config.file=/etc/prometheus/prometheus.yml'
 - '--storage.tsdb.path=/prometheus'
 - '--web.console.libraries=/etc/prometheus/console_libraries'
 - '--web.console.templates=/etc/prometheus/consoles'
 - '--web.enable-lifecycle'
 networks:
 - backstage-network

 # Grafana for Dashboards
 grafana:
 image: grafana/grafana:latest
 container_name: backstage-grafana
 ports:
 - '3000:3000'
 environment:
 GF_SECURITY_ADMIN_PASSWORD: admin
 GF_USERS_ALLOW_SIGN_UP: false
 volumes:
 - grafana_data:/var/lib/grafana
 - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
 networks:
 - backstage-network

 # Elasticsearch for Search and Logging
 elasticsearch:
 image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
 container_name: backstage-elasticsearch
 environment:
 - discovery.type=single-node
 - xpack.security.enabled=false
 - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
 ports:
 - '9200:9200'
 - '9300:9300'
 volumes:
 - elasticsearch_data:/usr/share/elasticsearch/data
 healthcheck:
 test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
 interval: 30s
 timeout: 10s
 retries: 5
 networks:
 - backstage-network

 # Kibana for Log Visualization
 kibana:
 image: docker.elastic.co/kibana/kibana:8.11.0
 container_name: backstage-kibana
 ports:
 - '5601:5601'
 environment:
 ELASTICSEARCH_HOSTS: http://elasticsearch:9200
 depends_on:
 elasticsearch:
 condition: service_healthy
 networks:
 - backstage-network

 # Jaeger for Distributed Tracing
 jaeger:
 image: jaegertracing/all-in-one:latest
 container_name: backstage-jaeger
 ports:
 - '16686:16686' # Jaeger UI
 - '14268:14268' # HTTP collector
 environment:
 COLLECTOR_OTLP_ENABLED: true
 networks:
 - backstage-network

 # NGINX for Load Balancing (Optional)
 nginx:
 image: nginx:alpine
 container_name: backstage-nginx
 ports:
 - '80:80'
 - '443:443'
 volumes:
 - ./nginx/nginx.conf:/etc/nginx/nginx.conf
 - ./nginx/ssl:/etc/nginx/ssl
 depends_on:
 - postgres
 - redis
 networks:
 - backstage-network

volumes:
 postgres_data:
 driver: local
 redis_data:
 driver: local
 prometheus_data:
 driver: local
 grafana_data:
 driver: local
 elasticsearch_data:
 driver: local

networks:
 backstage-network:
 driver: bridge