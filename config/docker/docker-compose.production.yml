version: '3.8'

services:
 app:
 build:
 context: .
 dockerfile: Dockerfile.production
 image: backstage-idp-wrapper:latest
 container_name: backstage-idp-wrapper
 restart: unless-stopped
 ports:
 - "3000:3000"
 environment:
 # Application
 NODE_ENV: production
 NEXT_PUBLIC_APP_NAME: "Backstage IDP Platform"
 
 # Database
 DATABASE_URL: ${DATABASE_URL}
 
 # Backstage
 BACKSTAGE_API_URL: ${BACKSTAGE_API_URL:-http://backstage:7007}
 BACKSTAGE_AUTH_TOKEN: ${BACKSTAGE_AUTH_TOKEN}
 
 # Redis
 REDIS_HOST: redis
 REDIS_PORT: 6379
 REDIS_PASSWORD: ${REDIS_PASSWORD}
 
 # Monitoring
 SENTRY_DSN: ${SENTRY_DSN}
 METRICS_AUTH_TOKEN: ${METRICS_AUTH_TOKEN}
 
 # Security
 SESSION_SECRET: ${SESSION_SECRET}
 ENCRYPTION_KEY: ${ENCRYPTION_KEY}
 
 depends_on:
 postgres:
 condition: service_healthy
 redis:
 condition: service_healthy
 networks:
 - backstage-network
 volumes:
 - app-logs:/app/logs
 deploy:
 resources:
 limits:
 cpus: '2'
 memory: 2G
 reservations:
 cpus: '1'
 memory: 1G
 logging:
 driver: "json-file"
 options:
 max-size: "10m"
 max-file: "3"

 postgres:
 image: postgres:15-alpine
 container_name: backstage-postgres
 restart: unless-stopped
 environment:
 POSTGRES_USER: ${POSTGRES_USER:-backstage}
 POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
 POSTGRES_DB: ${POSTGRES_DB:-backstage_idp}
 PGDATA: /var/lib/postgresql/data/pgdata
 volumes:
 - postgres-data:/var/lib/postgresql/data
 networks:
 - backstage-network
 healthcheck:
 test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-backstage}"]
 interval: 10s
 timeout: 5s
 retries: 5
 deploy:
 resources:
 limits:
 cpus: '1'
 memory: 1G

 redis:
 image: redis:7-alpine
 container_name: backstage-redis
 restart: unless-stopped
 command: >
 redis-server
 --requirepass ${REDIS_PASSWORD}
 --maxmemory 256mb
 --maxmemory-policy allkeys-lru
 --save 60 1000
 --save 300 10
 --save 900 1
 volumes:
 - redis-data:/data
 networks:
 - backstage-network
 healthcheck:
 test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
 interval: 10s
 timeout: 5s
 retries: 5
 deploy:
 resources:
 limits:
 cpus: '0.5'
 memory: 512M

 nginx:
 image: nginx:alpine
 container_name: backstage-nginx
 restart: unless-stopped
 ports:
 - "80:80"
 - "443:443"
 volumes:
 - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
 - ./nginx/conf.d:/etc/nginx/conf.d:ro
 - ./nginx/ssl:/etc/nginx/ssl:ro
 - nginx-cache:/var/cache/nginx
 depends_on:
 - app
 networks:
 - backstage-network
 deploy:
 resources:
 limits:
 cpus: '0.5'
 memory: 256M

 # Optional: Prometheus for metrics collection
 prometheus:
 image: prom/prometheus:latest
 container_name: backstage-prometheus
 restart: unless-stopped
 ports:
 - "9090:9090"
 volumes:
 - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
 - prometheus-data:/prometheus
 command:
 - '--config.file=/etc/prometheus/prometheus.yml'
 - '--storage.tsdb.path=/prometheus'
 - '--web.console.libraries=/usr/share/prometheus/console_libraries'
 - '--web.console.templates=/usr/share/prometheus/consoles'
 - '--web.enable-lifecycle'
 networks:
 - backstage-network
 deploy:
 resources:
 limits:
 cpus: '0.5'
 memory: 512M

 # Optional: Grafana for visualization
 grafana:
 image: grafana/grafana:latest
 container_name: backstage-grafana
 restart: unless-stopped
 ports:
 - "3001:3000"
 environment:
 GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
 GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
 GF_USERS_ALLOW_SIGN_UP: false
 volumes:
 - grafana-data:/var/lib/grafana
 - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
 depends_on:
 - prometheus
 networks:
 - backstage-network
 deploy:
 resources:
 limits:
 cpus: '0.5'
 memory: 512M

volumes:
 postgres-data:
 redis-data:
 app-logs:
 nginx-cache:
 prometheus-data:
 grafana-data:

networks:
 backstage-network:
 driver: bridge