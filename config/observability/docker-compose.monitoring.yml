# Production Monitoring Stack for SaaS IDP
# This compose file sets up the complete monitoring infrastructure

version: '3.8'

services:
  # Prometheus - Metrics Collection and Storage
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus-saas-idp
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./production-alert-rules.yml:/etc/prometheus/production-alert-rules.yml:ro
      - ./slo-monitoring.yml:/etc/prometheus/slo-monitoring.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AlertManager - Alert Management and Routing
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager-saas-idp
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alertmanager.saas-idp.com'
      - '--log.level=info'
    ports:
      - "9093:9093"
    volumes:
      - ./production-alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./templates/:/etc/alertmanager/templates/:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Visualization and Dashboards
  grafana:
    image: grafana/grafana-enterprise:10.1.0
    container_name: grafana-saas-idp
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,camptocamp-prometheus-alertmanager-datasource
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.sendgrid.net:587
      - GF_SMTP_USER=apikey
      - GF_SMTP_PASSWORD=${SENDGRID_API_KEY}
      - GF_SMTP_FROM_ADDRESS=alerts@saas-idp.com
      - GF_SMTP_FROM_NAME=SaaS IDP Monitoring
      - GF_SERVER_ROOT_URL=https://grafana.saas-idp.com
      - GF_AUTH_GENERIC_OAUTH_ENABLED=true
      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=https://auth.saas-idp.com/oauth/authorize
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=https://auth.saas-idp.com/oauth/token
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: loki-saas-idp
    restart: unless-stopped
    ports:
      - "3100:3100"
    command:
      - '-config.file=/etc/loki/local-config.yaml'
      - '-target=all'
    volumes:
      - ./loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Promtail - Log Collection Agent
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail-saas-idp
    restart: unless-stopped
    command:
      - '-config.file=/etc/promtail/config.yml'
    volumes:
      - ./promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - promtail_data:/promtail
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M

  # Node Exporter - System Metrics
  node_exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter-saas-idp
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor-saas-idp
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Blackbox Exporter - Endpoint Monitoring
  blackbox_exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: blackbox-exporter-saas-idp
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: jaeger-saas-idp
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "6831:6831/udp"
      - "6832:6832/udp"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger_data:/badger
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # OpenTelemetry Collector
  otel_collector:
    image: otel/opentelemetry-collector-contrib:0.86.0
    container_name: otel-collector-saas-idp
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter
    volumes:
      - ./otel-collector.yml:/etc/otel-collector-config.yaml:ro
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Redis Exporter - Cache Metrics
  redis_exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: redis-exporter-saas-idp
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    ports:
      - "9121:9121"
    networks:
      - monitoring
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # Postgres Exporter - Database Metrics
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter-saas-idp
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - monitoring
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # Webhook Receiver for Custom Alerts
  webhook_receiver:
    image: adnanh/webhook:2.8.1
    container_name: webhook-receiver-saas-idp
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - ./webhooks:/etc/webhook:ro
      - ./scripts:/scripts:ro
    command:
      - -verbose
      - -hooks=/etc/webhook/hooks.json
      - -hotreload
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # Karma - AlertManager UI
  karma:
    image: lmierzwa/karma:v0.118
    container_name: karma-saas-idp
    restart: unless-stopped
    environment:
      - ALERTMANAGER_URI=http://alertmanager:9093
      - PORT=8080
    ports:
      - "8082:8080"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

# Volumes for persistent data
volumes:
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/monitoring/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/monitoring/grafana
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/monitoring/alertmanager
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/monitoring/loki
  promtail_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/monitoring/promtail
  jaeger_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/monitoring/jaeger

# Networks
networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  app_network:
    external: true
    name: saas_idp_network