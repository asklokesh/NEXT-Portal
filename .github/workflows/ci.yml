name: CI

on:
 push:
 branches: [ main, develop ]
 pull_request:
 branches: [ main, develop ]

env:
 NODE_VERSION: '20'
 
jobs:
 lint:
 runs-on: ubuntu-latest
 steps:
 - uses: actions/checkout@v4
 
 - name: Setup Node.js
 uses: actions/setup-node@v4
 with:
 node-version: ${{ env.NODE_VERSION }}
 cache: 'npm'
 
 - name: Install dependencies
 run: npm ci
 
 - name: Run ESLint
 run: npm run lint
 
 - name: Run TypeScript check
 run: npm run typecheck

 test:
 runs-on: ubuntu-latest
 services:
 postgres:
 image: postgres:15-alpine
 env:
 POSTGRES_USER: test
 POSTGRES_PASSWORD: test
 POSTGRES_DB: test_db
 options: >-
 --health-cmd pg_isready
 --health-interval 10s
 --health-timeout 5s
 --health-retries 5
 ports:
 - 5432:5432
 
 redis:
 image: redis:7-alpine
 options: >-
 --health-cmd "redis-cli ping"
 --health-interval 10s
 --health-timeout 5s
 --health-retries 5
 ports:
 - 6379:6379
 
 steps:
 - uses: actions/checkout@v4
 
 - name: Setup Node.js
 uses: actions/setup-node@v4
 with:
 node-version: ${{ env.NODE_VERSION }}
 cache: 'npm'
 
 - name: Install dependencies
 run: npm ci
 
 - name: Generate Prisma Client
 run: npx prisma generate
 
 - name: Run database migrations
 run: npx prisma migrate deploy
 env:
 DATABASE_URL: postgresql://test:test@localhost:5432/test_db?schema=public
 
 - name: Run unit tests
 run: npm run test:ci
 env:
 DATABASE_URL: postgresql://test:test@localhost:5432/test_db?schema=public
 REDIS_HOST: localhost
 REDIS_PORT: 6379
 
 - name: Upload coverage reports
 uses: codecov/codecov-action@v3
 with:
 file: ./coverage/coverage-final.json
 flags: unittests
 name: codecov-umbrella

 security:
 runs-on: ubuntu-latest
 steps:
 - uses: actions/checkout@v4
 
 - name: Run Trivy vulnerability scanner
 uses: aquasecurity/trivy-action@master
 with:
 scan-type: 'fs'
 scan-ref: '.'
 format: 'sarif'
 output: 'trivy-results.sarif'
 
 - name: Upload Trivy scan results
 uses: github/codeql-action/upload-sarif@v2
 with:
 sarif_file: 'trivy-results.sarif'
 
 - name: Run npm audit
 run: npm audit --audit-level=moderate

 build:
 runs-on: ubuntu-latest
 needs: [lint, test]
 steps:
 - uses: actions/checkout@v4
 
 - name: Setup Node.js
 uses: actions/setup-node@v4
 with:
 node-version: ${{ env.NODE_VERSION }}
 cache: 'npm'
 
 - name: Install dependencies
 run: npm ci
 
 - name: Generate Prisma Client
 run: npx prisma generate
 
 - name: Build application
 run: npm run build
 env:
 DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
 SKIP_ENV_VALIDATION: true
 
 - name: Upload build artifacts
 uses: actions/upload-artifact@v3
 with:
 name: build-artifacts
 path: |
 .next/
 public/
 prisma/
 retention-days: 7

 e2e:
 runs-on: ubuntu-latest
 needs: build
 services:
 postgres:
 image: postgres:15-alpine
 env:
 POSTGRES_USER: test
 POSTGRES_PASSWORD: test
 POSTGRES_DB: test_db
 options: >-
 --health-cmd pg_isready
 --health-interval 10s
 --health-timeout 5s
 --health-retries 5
 ports:
 - 5432:5432
 
 steps:
 - uses: actions/checkout@v4
 
 - name: Setup Node.js
 uses: actions/setup-node@v4
 with:
 node-version: ${{ env.NODE_VERSION }}
 cache: 'npm'
 
 - name: Install dependencies
 run: npm ci
 
 - name: Download build artifacts
 uses: actions/download-artifact@v3
 with:
 name: build-artifacts
 
 - name: Install Playwright browsers
 run: npx playwright install --with-deps
 
 - name: Run E2E tests
 run: npm run test:e2e
 env:
 DATABASE_URL: postgresql://test:test@localhost:5432/test_db?schema=public
 E2E_TEST: true
 
 - name: Upload Playwright report
 uses: actions/upload-artifact@v3
 if: always()
 with:
 name: playwright-report
 path: playwright-report/
 retention-days: 30