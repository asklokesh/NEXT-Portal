name: Progressive Delivery Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
    paths:
      - 'src/**'
      - 'infrastructure/**'
      - 'Dockerfile*'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'infrastructure/**'
      - 'Dockerfile*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBERNETES_NAMESPACE: default
  DEPLOYMENT_TIMEOUT: 1800 # 30 minutes

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  progressive-deployment-dev:
    if: github.ref == 'refs/heads/develop'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > ~/.kube/config
          kubectl config set-context --current --namespace=${{ env.KUBERNETES_NAMESPACE }}

      - name: Deploy with Canary Strategy
        run: |
          # Deploy using our progressive delivery system
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Rollout
          metadata:
            name: saas-idp-dev
            namespace: ${{ env.KUBERNETES_NAMESPACE }}
            labels:
              app: saas-idp
              environment: development
          spec:
            replicas: 3
            strategy:
              canary:
                maxSurge: "25%"
                maxUnavailable: 1
                steps:
                - setWeight: 10
                - pause: {duration: 30s}
                - analysis:
                    templates:
                    - templateName: success-rate
                    args:
                    - name: service-name
                      value: saas-idp-dev
                - setWeight: 25
                - pause: {duration: 60s}
                - analysis:
                    templates:
                    - templateName: success-rate
                    - templateName: avg-response-time
                - setWeight: 50
                - pause: {duration: 120s}
                - analysis:
                    templates:
                    - templateName: success-rate
                    - templateName: avg-response-time
                canaryService: saas-idp-dev-canary
                stableService: saas-idp-dev-stable
                trafficRouting:
                  istio:
                    virtualService:
                      name: saas-idp-dev-vs
                      routes:
                      - primary
                    destinationRule:
                      name: saas-idp-dev-dr
                      canarySubsetName: canary
                      stableSubsetName: stable
            selector:
              matchLabels:
                app: saas-idp
                environment: development
            template:
              metadata:
                labels:
                  app: saas-idp
                  environment: development
              spec:
                containers:
                - name: saas-idp
                  image: ${{ needs.build-and-test.outputs.image-tag }}
                  ports:
                  - containerPort: 3000
                  env:
                  - name: NODE_ENV
                    value: development
                  - name: DATABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: database-credentials
                        key: url
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 3000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /ready
                      port: 3000
                    initialDelaySeconds: 5
                    periodSeconds: 5
          EOF

      - name: Wait for rollout completion
        run: |
          kubectl rollout status rollout/saas-idp-dev --timeout=${{ env.DEPLOYMENT_TIMEOUT }}s
          
      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/saas-idp-dev
          
          # Get service endpoint
          SERVICE_IP=$(kubectl get svc saas-idp-dev -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$SERVICE_IP" ]; then
            SERVICE_IP=$(kubectl get svc saas-idp-dev -o jsonpath='{.spec.clusterIP}')
          fi
          
          # Run smoke tests
          curl -f http://$SERVICE_IP/health || exit 1
          curl -f http://$SERVICE_IP/api/health || exit 1

  progressive-deployment-staging:
    if: github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
          kubectl config set-context --current --namespace=${{ env.KUBERNETES_NAMESPACE }}

      - name: Deploy with Blue-Green Strategy
        run: |
          # Deploy using blue-green strategy for staging
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Rollout
          metadata:
            name: saas-idp-staging
            namespace: ${{ env.KUBERNETES_NAMESPACE }}
            labels:
              app: saas-idp
              environment: staging
          spec:
            replicas: 5
            strategy:
              blueGreen:
                activeService: saas-idp-staging-active
                previewService: saas-idp-staging-preview
                autoPromotionEnabled: false
                scaleDownDelaySeconds: 30
                prePromotionAnalysis:
                  templates:
                  - templateName: success-rate
                  - templateName: avg-response-time
                  - templateName: error-rate
                  args:
                  - name: service-name
                    value: saas-idp-staging
                postPromotionAnalysis:
                  templates:
                  - templateName: success-rate
                  args:
                  - name: service-name
                    value: saas-idp-staging
            selector:
              matchLabels:
                app: saas-idp
                environment: staging
            template:
              metadata:
                labels:
                  app: saas-idp
                  environment: staging
              spec:
                containers:
                - name: saas-idp
                  image: ${{ needs.build-and-test.outputs.image-tag }}
                  ports:
                  - containerPort: 3000
                  env:
                  - name: NODE_ENV
                    value: staging
                  - name: DATABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: database-credentials-staging
                        key: url
                  resources:
                    requests:
                      memory: "512Mi"
                      cpu: "500m"
                    limits:
                      memory: "1Gi"
                      cpu: "1000m"
          EOF

      - name: Wait for preview deployment
        run: |
          kubectl rollout status rollout/saas-idp-staging --timeout=${{ env.DEPLOYMENT_TIMEOUT }}s

      - name: Run integration tests
        run: |
          # Run comprehensive integration tests against preview service
          PREVIEW_IP=$(kubectl get svc saas-idp-staging-preview -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$PREVIEW_IP" ]; then
            PREVIEW_IP=$(kubectl get svc saas-idp-staging-preview -o jsonpath='{.spec.clusterIP}')
          fi
          
          # Run test suite
          npm run test:integration -- --host=http://$PREVIEW_IP

      - name: Manual approval gate
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Staging deployment approval required"
          issue-body: |
            Please review the staging deployment and approve if ready for promotion.
            
            **Deployment Details:**
            - Image: ${{ needs.build-and-test.outputs.image-tag }}
            - Commit: ${{ github.sha }}
            - Preview URL: http://staging-preview.example.com
            
            **Test Results:**
            - Integration tests: ✅ Passed
            - Performance tests: ✅ Passed
            - Security scan: ✅ Passed

      - name: Promote blue-green deployment
        run: |
          kubectl argo rollouts promote saas-idp-staging

  progressive-deployment-production:
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
    needs: [build-and-test, progressive-deployment-staging]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > ~/.kube/config
          kubectl config set-context --current --namespace=${{ env.KUBERNETES_NAMESPACE }}

      - name: Deploy with Advanced Canary Strategy
        run: |
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Rollout
          metadata:
            name: saas-idp-production
            namespace: ${{ env.KUBERNETES_NAMESPACE }}
            labels:
              app: saas-idp
              environment: production
          spec:
            replicas: 10
            strategy:
              canary:
                maxSurge: "25%"
                maxUnavailable: 1
                steps:
                # Phase 1: 5% canary
                - setWeight: 5
                - pause: {duration: 5m}
                - analysis:
                    templates:
                    - templateName: success-rate
                    - templateName: avg-response-time
                    - templateName: error-rate
                    - templateName: p99-response-time
                    args:
                    - name: service-name
                      value: saas-idp-production
                      
                # Phase 2: 10% canary
                - setWeight: 10
                - pause: {duration: 10m}
                - analysis:
                    templates:
                    - templateName: success-rate
                    - templateName: avg-response-time
                    - templateName: error-rate
                    - templateName: p99-response-time
                    
                # Phase 3: 25% canary
                - setWeight: 25
                - pause: {duration: 15m}
                - analysis:
                    templates:
                    - templateName: success-rate
                    - templateName: avg-response-time
                    - templateName: error-rate
                    - templateName: p99-response-time
                    
                # Phase 4: 50% canary
                - setWeight: 50
                - pause: {duration: 20m}
                - analysis:
                    templates:
                    - templateName: success-rate
                    - templateName: avg-response-time
                    - templateName: error-rate
                    - templateName: p99-response-time
                    
                # Phase 5: Full rollout
                - setWeight: 100
                - pause: {duration: 10m}
                
                canaryService: saas-idp-production-canary
                stableService: saas-idp-production-stable
                trafficRouting:
                  istio:
                    virtualService:
                      name: saas-idp-production-vs
                      routes:
                      - primary
                    destinationRule:
                      name: saas-idp-production-dr
                      canarySubsetName: canary
                      stableSubsetName: stable
            selector:
              matchLabels:
                app: saas-idp
                environment: production
            template:
              metadata:
                labels:
                  app: saas-idp
                  environment: production
              spec:
                containers:
                - name: saas-idp
                  image: ${{ needs.build-and-test.outputs.image-tag }}
                  ports:
                  - containerPort: 3000
                  env:
                  - name: NODE_ENV
                    value: production
                  - name: DATABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: database-credentials-prod
                        key: url
                  resources:
                    requests:
                      memory: "1Gi"
                      cpu: "1000m"
                    limits:
                      memory: "2Gi"
                      cpu: "2000m"
          EOF

      - name: Monitor deployment progress
        run: |
          # Monitor rollout with timeout
          kubectl rollout status rollout/saas-idp-production --timeout=${{ env.DEPLOYMENT_TIMEOUT }}s
          
          # Check final status
          STATUS=$(kubectl get rollout saas-idp-production -o jsonpath='{.status.phase}')
          if [ "$STATUS" != "Healthy" ]; then
            echo "Deployment failed with status: $STATUS"
            exit 1
          fi

      - name: Post-deployment verification
        run: |
          # Verify deployment health
          kubectl wait --for=condition=available --timeout=300s deployment/saas-idp-production
          
          # Run production health checks
          PROD_IP=$(kubectl get svc saas-idp-production-stable -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$PROD_IP" ]; then
            PROD_IP=$(kubectl get svc saas-idp-production-stable -o jsonpath='{.spec.clusterIP}')
          fi
          
          # Comprehensive health checks
          curl -f http://$PROD_IP/health || exit 1
          curl -f http://$PROD_IP/api/health || exit 1
          curl -f http://$PROD_IP/api/metrics || exit 1

      - name: Update deployment status
        if: always()
        run: |
          STATUS=$(kubectl get rollout saas-idp-production -o jsonpath='{.status.phase}')
          echo "Final deployment status: $STATUS"
          
          if [ "$STATUS" = "Healthy" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
            exit 1
          fi

  notify-deployment-status:
    if: always()
    needs: [progressive-deployment-dev, progressive-deployment-staging, progressive-deployment-production]
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Progressive Deployment Status:
            - Development: ${{ needs.progressive-deployment-dev.result }}
            - Staging: ${{ needs.progressive-deployment-staging.result }}
            - Production: ${{ needs.progressive-deployment-production.result }}
            
            Image: ${{ needs.build-and-test.outputs.image-tag }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}