name: Node.js Advanced CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*]
    tags:
      - 'v*'
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scan
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: false
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
          - dr

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PNPM_VERSION: 8

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # ============================================
  # Setup and Analysis
  # ============================================
  
  setup:
    name: Setup and Cache
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
      cache-key: ${{ steps.cache.outputs.cache-key }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(node -p "require('./package.json').version")-${{ github.sha }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Check deployment conditions
        id: deploy-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || \
             [[ "${{ github.ref }}" == refs/tags/* ]] || \
             [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .next/cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

  # ============================================
  # Code Quality
  # ============================================
  
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - run: pnpm install --frozen-lockfile
      
      - name: Lint code
        run: pnpm run lint
      
      - name: Check formatting
        run: pnpm run format:check
      
      - name: Type checking
        run: pnpm run typecheck
      
      - name: Check for circular dependencies
        run: npx madge --circular --extensions ts,tsx,js,jsx src

  complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - run: pnpm install --frozen-lockfile
      
      - name: Analyze complexity
        run: |
          npx code-complexity . \
            --limit 10 \
            --sort complexity \
            --format json > complexity.json
      
      - name: Check complexity threshold
        run: |
          MAX_COMPLEXITY=$(jq '.files | map(.complexity) | max' complexity.json)
          if (( $(echo "$MAX_COMPLEXITY > 15" | bc -l) )); then
            echo "Complexity exceeds threshold: $MAX_COMPLEXITY"
            exit 1
          fi
      
      - name: Upload complexity report
        uses: actions/upload-artifact@v3
        with:
          name: complexity-report
          path: complexity.json

  # ============================================
  # Build
  # ============================================
  
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, lint]
    strategy:
      matrix:
        node: [18, 20]
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      
      - run: pnpm install --frozen-lockfile
      
      - name: Build application
        run: |
          pnpm run build
          pnpm run build:check
        env:
          NODE_ENV: production
          VERSION: ${{ needs.setup.outputs.version }}
      
      - name: Bundle analysis
        if: matrix.node == 20
        run: |
          pnpm run analyze > bundle-stats.json
          SIZE=$(jq '.assets | map(.size) | add' bundle-stats.json)
          echo "Bundle size: $SIZE bytes"
          
          # Check bundle size limit (500KB)
          if [ "$SIZE" -gt 512000 ]; then
            echo "Bundle size exceeds limit"
            exit 1
          fi
      
      - name: Upload build artifacts
        if: matrix.node == 20
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            .next/
            build/
          retention-days: 7

  # ============================================
  # Testing
  # ============================================
  
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - run: pnpm install --frozen-lockfile
      
      - name: Run unit tests
        run: pnpm run test:unit --coverage
      
      - name: Generate coverage report
        run: |
          pnpm run test:coverage
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          echo "coverage=$COVERAGE" >> $GITHUB_ENV
      
      - name: Check coverage threshold
        run: |
          if (( $(echo "${{ env.coverage }} < 80" | bc -l) )); then
            echo "Coverage below threshold: ${{ env.coverage }}%"
            exit 1
          fi
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-unit
          path: |
            coverage/
            test-results/

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3.12-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - run: pnpm install --frozen-lockfile
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Setup database
        run: |
          pnpm run db:migrate
          pnpm run db:seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/testdb
      
      - name: Run integration tests
        run: pnpm run test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          RABBITMQ_URL: amqp://test:test@localhost:5672
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-integration
          path: test-results/

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - run: pnpm install --frozen-lockfile
      
      - name: Install Playwright
        run: pnpm exec playwright install --with-deps chromium
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Start application
        run: |
          pnpm run start:test &
          npx wait-on http://localhost:3000 -t 30000
        env:
          NODE_ENV: test
      
      - name: Run E2E tests
        run: pnpm run test:e2e
      
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
      
      - name: Upload test videos
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-videos
          path: test-results/videos/

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - run: pnpm install --frozen-lockfile
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Setup k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Start application
        run: |
          pnpm run start:perf &
          npx wait-on http://localhost:3000 -t 30000
      
      - name: Run load tests
        run: |
          k6 run tests/performance/load-test.js \
            --out json=load-results.json \
            --summary-export=load-summary.json
      
      - name: Run stress tests
        run: |
          k6 run tests/performance/stress-test.js \
            --out json=stress-results.json \
            --summary-export=stress-summary.json
      
      - name: Analyze performance results
        run: |
          P95_LATENCY=$(jq '.metrics.http_req_duration.p95' load-summary.json)
          ERROR_RATE=$(jq '.metrics.http_req_failed.rate' load-summary.json)
          
          echo "P95 Latency: ${P95_LATENCY}ms"
          echo "Error Rate: ${ERROR_RATE}"
          
          # Check thresholds
          if (( $(echo "$P95_LATENCY > 1000" | bc -l) )); then
            echo "P95 latency exceeds 1000ms threshold"
            exit 1
          fi
          
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "Error rate exceeds 1% threshold"
            exit 1
          fi
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            *-results.json
            *-summary.json
      
      - name: Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --config=.lighthouserc.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # ============================================
  # Security
  # ============================================
  
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
      
      - name: OWASP Dependency Check
        run: |
          pnpm audit --audit-level=moderate
          pnpm run audit:licenses
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            snyk-results.json

  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/nodejs

  # ============================================
  # Quality Gates
  # ============================================
  
  quality-gates:
    name: Quality Gates Check
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, complexity, security-scan]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Check quality metrics
        run: |
          echo "Checking quality gates..."
          
          # Code Coverage
          COVERAGE=$(cat test-results-unit/coverage/coverage-summary.json | jq '.total.lines.pct')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage below 80%: $COVERAGE%"
            exit 1
          fi
          echo "✅ Coverage: $COVERAGE%"
          
          # Complexity
          MAX_COMPLEXITY=$(cat complexity-report/complexity.json | jq '.files | map(.complexity) | max')
          if (( $(echo "$MAX_COMPLEXITY > 15" | bc -l) )); then
            echo "❌ Complexity too high: $MAX_COMPLEXITY"
            exit 1
          fi
          echo "✅ Max complexity: $MAX_COMPLEXITY"
          
          # Security
          VULNERABILITIES=$(cat security-reports/snyk-results.json | jq '.vulnerabilities | length' || echo 0)
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "⚠️  Found $VULNERABILITIES vulnerabilities"
          fi
          echo "✅ Security scan passed"
          
          echo "All quality gates passed!"

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - run: pnpm install --frozen-lockfile
      
      - name: Download coverage
        uses: actions/download-artifact@v3
        with:
          name: test-results-unit
      
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ============================================
  # Build and Push Docker Image
  # ============================================
  
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [setup, quality-gates]
    if: needs.setup.outputs.should-deploy == 'true'
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.setup.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'docker-scan.sarif'
      
      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'docker-scan.sarif'
      
      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  # ============================================
  # Deployment
  # ============================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, test-e2e]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster staging-cluster \
            --service app-service \
            --force-new-deployment \
            --task-definition app-staging:latest
      
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster staging-cluster \
            --services app-service
      
      - name: Run smoke tests
        run: |
          curl -f https://staging.example.com/health || exit 1
          pnpm run test:smoke --url https://staging.example.com
      
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, deploy-staging]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Create database backup
        run: |
          aws rds create-db-snapshot \
            --db-instance-identifier prod-db \
            --db-snapshot-identifier prod-db-backup-${{ github.sha }}
      
      - name: Deploy canary (10%)
        run: |
          aws ecs update-service \
            --cluster production-cluster \
            --service app-canary \
            --desired-count 1 \
            --task-definition app-production:${{ needs.setup.outputs.version }}
      
      - name: Monitor canary metrics
        run: |
          sleep 300  # Wait 5 minutes
          
          # Check error rate
          ERROR_RATE=$(aws cloudwatch get-metric-statistics \
            --namespace AWS/ECS \
            --metric-name HTTPCode_Target_5XX_Count \
            --dimensions Name=ServiceName,Value=app-canary \
            --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%S) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
            --period 300 \
            --statistics Sum \
            --query 'Datapoints[0].Sum' \
            --output text)
          
          if [ "$ERROR_RATE" -gt "10" ]; then
            echo "High error rate detected: $ERROR_RATE"
            exit 1
          fi
      
      - name: Deploy full production
        run: |
          aws ecs update-service \
            --cluster production-cluster \
            --service app-service \
            --task-definition app-production:${{ needs.setup.outputs.version }}
      
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster production-cluster \
            --services app-service
      
      - name: Remove canary
        run: |
          aws ecs update-service \
            --cluster production-cluster \
            --service app-canary \
            --desired-count 0
      
      - name: Invalidate CDN cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
      
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.setup.outputs.version }}
          release_name: Release v${{ needs.setup.outputs.version }}
          body: |
            ## Changes in this release
            - Docker image: `${{ needs.docker.outputs.image }}`
            - Deployment time: ${{ github.event.head_commit.timestamp }}
            
            ## Deployment checklist
            - [x] All tests passed
            - [x] Security scans completed
            - [x] Quality gates passed
            - [x] Staging deployment successful
            - [x] Production canary validated
          draft: false
          prerelease: false
      
      - name: Notify teams
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 Production deployment ${{ job.status }}
            Version: ${{ needs.setup.outputs.version }}
            URL: https://example.com
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # ============================================
  # Rollback
  # ============================================
  
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    environment:
      name: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Rollback deployment
        run: |
          # Get previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster production-cluster \
            --services app-service \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)
          
          # Update service with previous version
          aws ecs update-service \
            --cluster production-cluster \
            --service app-service \
            --task-definition $PREVIOUS_TASK_DEF
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: '⚠️  Production deployment rolled back',
              attachments: [{
                color: 'warning',
                title: 'Rollback Executed',
                text: 'Production deployment failed and was rolled back to previous version',
                fields: [
                  { title: 'Failed Version', value: '${{ needs.setup.outputs.version }}', short: true },
                  { title: 'Rollback Time', value: '$(date)', short: true }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}