apiVersion: v1
kind: Secret
metadata:
  name: saas-idp-secrets
  namespace: saas-idp-production
  labels:
    app: saas-idp
    environment: production
type: Opaque
stringData:
  # Database Secrets
  DATABASE_URL: "postgresql://saas_idp_user:CHANGE_ME_DB_PASSWORD@postgresql-primary.saas-idp-production.svc.cluster.local:5432/saas_idp_production"
  POSTGRES_PASSWORD: "CHANGE_ME_DB_PASSWORD"
  
  # Authentication & Security Secrets
  NEXTAUTH_SECRET: "CHANGE_ME_32_CHAR_NEXTAUTH_SECRET"
  JWT_SECRET: "CHANGE_ME_32_CHAR_JWT_SECRET"
  ENCRYPTION_KEY: "CHANGE_ME_32_CHAR_ENCRYPTION_KEY"
  SESSION_SECRET: "CHANGE_ME_SESSION_SECRET_KEY"
  
  # Redis Password
  REDIS_PASSWORD: "CHANGE_ME_REDIS_PASSWORD"
  
  # OAuth Provider Secrets
  GITHUB_CLIENT_SECRET: "CHANGE_ME_GITHUB_CLIENT_SECRET"
  GOOGLE_CLIENT_SECRET: "CHANGE_ME_GOOGLE_CLIENT_SECRET"
  
  # Backstage Token
  BACKSTAGE_TOKEN: "CHANGE_ME_BACKSTAGE_SERVICE_TOKEN"
  
  # External Service Tokens
  GRAFANA_TOKEN: "CHANGE_ME_GRAFANA_API_TOKEN"
  ELASTICSEARCH_PASSWORD: "CHANGE_ME_ELASTICSEARCH_PASSWORD"
  
  # Cloud Provider Secrets
  AWS_SECRET_ACCESS_KEY: "CHANGE_ME_AWS_SECRET_ACCESS_KEY"
  AZURE_CLIENT_SECRET: "CHANGE_ME_AZURE_CLIENT_SECRET"
  GCP_PRIVATE_KEY: |
    -----BEGIN PRIVATE KEY-----
    CHANGE_ME_GCP_PRIVATE_KEY
    -----END PRIVATE KEY-----
  
  # Monitoring & Logging Secrets
  SENTRY_DSN: "https://your-sentry-dsn.ingest.sentry.io/project-id"
  DATADOG_API_KEY: "CHANGE_ME_DATADOG_API_KEY"
  NEWRELIC_LICENSE_KEY: "CHANGE_ME_NEWRELIC_LICENSE_KEY"
  
  # Email Configuration
  SMTP_PASSWORD: "CHANGE_ME_SMTP_PASSWORD"
  
  # Webhook Secret
  WEBHOOK_SECRET: "CHANGE_ME_WEBHOOK_SECRET"
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: saas-idp-production
  labels:
    app: saas-idp
    component: tls
type: kubernetes.io/tls
data:
  # Base64 encoded TLS certificate and key
  # Generate these with your CA or use cert-manager
  tls.crt: LS0tLS1CRUdJTi... # Your base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi... # Your base64 encoded private key
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: saas-idp-production
  labels:
    app: saas-idp
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5jb20iOnsidXNlcm5hbWUiOiJ1c2VyIiwicGFzc3dvcmQiOiJwYXNzIiwiYXV0aCI6ImRYTmxjanB3WVhOeiJ9fX0=
---
# External Secrets Operator (if using external secret management)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-store
  namespace: saas-idp-production
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        secretRef:
          accessKeyID:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: saas-idp-external-secrets
  namespace: saas-idp-production
spec:
  refreshInterval: 300s # 5 minutes
  secretStoreRef:
    name: aws-secrets-store
    kind: SecretStore
  target:
    name: saas-idp-external-secrets
    creationPolicy: Owner
  data:
  - secretKey: database-password
    remoteRef:
      key: saas-idp/production/database
      property: password
  - secretKey: jwt-secret
    remoteRef:
      key: saas-idp/production/auth
      property: jwt-secret
  - secretKey: nextauth-secret
    remoteRef:
      key: saas-idp/production/auth
      property: nextauth-secret
---
# Sealed Secrets (Alternative approach)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: saas-idp-sealed-secrets
  namespace: saas-idp-production
spec:
  encryptedData:
    # These would be encrypted with the cluster's public key
    # Use kubeseal to generate these
    database-password: AgBy3i4OJSWK... 
    jwt-secret: AgAKAoiQpKDH...
    nextauth-secret: AgAjkl3mkKDH...
  template:
    metadata:
      name: saas-idp-sealed-secrets
      namespace: saas-idp-production
    type: Opaque