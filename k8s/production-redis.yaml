apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: saas-idp-production
  labels:
    app: redis
    environment: production
data:
  redis.conf: |
    # Redis configuration for production
    bind 0.0.0.0
    port 6379
    protected-mode yes
    requirepass CHANGE_ME_REDIS_PASSWORD
    
    # Memory management
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    
    # Logging
    loglevel notice
    logfile ""
    
    # Security
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    rename-command DEBUG ""
    rename-command CONFIG "CONFIG_SECRET_KEY"
    
    # Performance
    tcp-keepalive 300
    timeout 0
    tcp-backlog 511
    
    # AOF persistence
    appendonly yes
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # Client output buffer limits
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    
    # Slow log
    slowlog-log-slower-than 10000
    slowlog-max-len 128
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: saas-idp-production
  labels:
    app: redis
    environment: production
type: Opaque
stringData:
  redis-password: "CHANGE_ME_REDIS_PASSWORD"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: saas-idp-production
  labels:
    app: redis
    component: master
    environment: production
spec:
  serviceName: redis-master
  replicas: 1
  selector:
    matchLabels:
      app: redis
      component: master
  template:
    metadata:
      labels:
        app: redis
        component: master
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        runAsGroup: 1001
      
      containers:
      - name: redis
        image: redis:7.2-alpine
        command:
        - redis-server
        - /etc/redis/redis.conf
        
        ports:
        - name: redis
          containerPort: 6379
        
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        livenessProbe:
          tcpSocket:
            port: redis
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -a $REDIS_PASSWORD ping"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/redis.conf
          subPath: redis.conf
        
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.55.0
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
        
        ports:
        - name: metrics
          containerPort: 9121
        
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      
      terminationGracePeriodSeconds: 30
      
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app: redis
        component: master
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp3
      resources:
        requests:
          storage: 20Gi
---
# Redis Replica
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-replica
  namespace: saas-idp-production
  labels:
    app: redis
    component: replica
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: redis
      component: replica
  template:
    metadata:
      labels:
        app: redis
        component: replica
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        runAsGroup: 1001
      
      containers:
      - name: redis
        image: redis:7.2-alpine
        command:
        - redis-server
        - --slaveof
        - redis-master.saas-idp-production.svc.cluster.local
        - "6379"
        - --masterauth
        - $(REDIS_PASSWORD)
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 512mb
        - --maxmemory-policy
        - allkeys-lru
        
        ports:
        - name: redis
          containerPort: 6379
        
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        
        livenessProbe:
          tcpSocket:
            port: redis
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -a $REDIS_PASSWORD ping"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
        
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.55.0
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
        
        ports:
        - name: metrics
          containerPort: 9121
        
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
---
# Redis Services
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: saas-idp-production
  labels:
    app: redis
    component: master
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  type: ClusterIP
  selector:
    app: redis
    component: master
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  - name: metrics
    port: 9121
    targetPort: metrics
---
apiVersion: v1
kind: Service
metadata:
  name: redis-replica
  namespace: saas-idp-production
  labels:
    app: redis
    component: replica
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  type: ClusterIP
  selector:
    app: redis
    component: replica
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  - name: metrics
    port: 9121
    targetPort: metrics
---
# Redis Sentinel for High Availability
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-sentinel
  namespace: saas-idp-production
  labels:
    app: redis
    component: sentinel
    environment: production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: redis
      component: sentinel
  template:
    metadata:
      labels:
        app: redis
        component: sentinel
        environment: production
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        runAsGroup: 1001
      
      containers:
      - name: redis-sentinel
        image: redis:7.2-alpine
        command:
        - redis-sentinel
        - /etc/redis-sentinel/sentinel.conf
        
        ports:
        - name: sentinel
          containerPort: 26379
        
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        livenessProbe:
          tcpSocket:
            port: sentinel
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          tcpSocket:
            port: sentinel
          initialDelaySeconds: 5
          periodSeconds: 5
        
        volumeMounts:
        - name: sentinel-config
          mountPath: /etc/redis-sentinel/sentinel.conf
          subPath: sentinel.conf
        
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: sentinel-config
        configMap:
          name: redis-sentinel-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-sentinel-config
  namespace: saas-idp-production
  labels:
    app: redis
    component: sentinel
data:
  sentinel.conf: |
    port 26379
    sentinel monitor mymaster redis-master.saas-idp-production.svc.cluster.local 6379 2
    sentinel auth-pass mymaster CHANGE_ME_REDIS_PASSWORD
    sentinel down-after-milliseconds mymaster 30000
    sentinel parallel-syncs mymaster 1
    sentinel failover-timeout mymaster 180000
    sentinel deny-scripts-reconfig yes
---
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel
  namespace: saas-idp-production
  labels:
    app: redis
    component: sentinel
    environment: production
spec:
  type: ClusterIP
  selector:
    app: redis
    component: sentinel
  ports:
  - name: sentinel
    port: 26379
    targetPort: sentinel
---
# PodDisruptionBudgets
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-master-pdb
  namespace: saas-idp-production
  labels:
    app: redis
    component: master
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: redis
      component: master
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-replica-pdb
  namespace: saas-idp-production
  labels:
    app: redis
    component: replica
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: redis
      component: replica
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-sentinel-pdb
  namespace: saas-idp-production
  labels:
    app: redis
    component: sentinel
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: redis
      component: sentinel