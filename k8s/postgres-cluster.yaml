apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: saas-idp-production
data:
  POSTGRES_DB: "saas_idp"
  POSTGRES_USER: "idp_user"
  PGDATA: "/var/lib/postgresql/data/pgdata"
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: saas-idp-production
type: Opaque
data:
  # These should be base64 encoded and set via CI/CD or sealed secrets
  POSTGRES_PASSWORD: cGFzc3dvcmQxMjM=  # Change this in production!
  POSTGRES_REPLICATION_PASSWORD: cmVwbGljYXRpb24xMjM=
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: saas-idp-production
  labels:
    app: postgres
    role: primary
spec:
  serviceName: postgres-primary
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      role: primary
  template:
    metadata:
      labels:
        app: postgres
        role: primary
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: PGDATA
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: PGDATA
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_REPLICATION_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config-volume
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
      volumes:
      - name: postgres-config-volume
        configMap:
          name: postgres-init-script
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "gp3"
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: saas-idp-production
data:
  01-init-replication.sql: |
    -- Create replication user
    CREATE ROLE replicator WITH REPLICATION PASSWORD 'replication123';
    
    -- Create database and extensions
    CREATE DATABASE saas_idp OWNER idp_user;
    \c saas_idp;
    
    -- Enable required extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Create performance monitoring views
    CREATE OR REPLACE VIEW db_performance AS
    SELECT 
        query,
        calls,
        total_time,
        mean_time,
        stddev_time,
        rows
    FROM pg_stat_statements 
    ORDER BY total_time DESC 
    LIMIT 20;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-replica
  namespace: saas-idp-production
  labels:
    app: postgres
    role: replica
spec:
  replicas: 2
  selector:
    matchLabels:
      app: postgres
      role: replica
  template:
    metadata:
      labels:
        app: postgres
        role: replica
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: PGUSER
          value: "replicator"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_REPLICATION_PASSWORD
        - name: POSTGRES_MASTER_SERVICE
          value: "postgres-primary"
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_REPLICATION_PASSWORD
        volumeMounts:
        - name: postgres-replica-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Starting PostgreSQL replica..."
          
          # Wait for primary to be ready
          until pg_isready -h postgres-primary -p 5432 -U replicator; do
            echo "Waiting for primary..."
            sleep 2
          done
          
          # Create base backup from primary
          if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
            echo "Creating base backup from primary..."
            PGPASSWORD=$POSTGRES_REPLICATION_PASSWORD pg_basebackup \
              -h postgres-primary -D /var/lib/postgresql/data \
              -U replicator -v -P -W
            echo "standby_mode = 'on'" >> /var/lib/postgresql/data/recovery.conf
            echo "primary_conninfo = 'host=postgres-primary port=5432 user=replicator'" >> /var/lib/postgresql/data/recovery.conf
          fi
          
          # Start PostgreSQL
          exec postgres
      volumes:
      - name: postgres-replica-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
  namespace: saas-idp-production
  labels:
    app: postgres
    role: primary
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres
    role: primary
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica
  namespace: saas-idp-production
  labels:
    app: postgres
    role: replica
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres
    role: replica
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: saas-idp-production
  labels:
    app: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres
  clusterIP: None