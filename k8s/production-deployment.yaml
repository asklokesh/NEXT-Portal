apiVersion: apps/v1
kind: Deployment
metadata:
  name: saas-idp-app
  namespace: saas-idp-production
  labels:
    app: saas-idp
    component: app
    environment: production
    version: "1.0.0"
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Enterprise SaaS Internal Developer Portal Application"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: saas-idp
      component: app
  template:
    metadata:
      labels:
        app: saas-idp
        component: app
        environment: production
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/api/metrics"
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: saas-idp-service-account
      automountServiceAccountToken: true
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      # Init containers
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          until nc -z postgresql-primary.saas-idp-production.svc.cluster.local 5432; do
            echo "Waiting for database..."
            sleep 2
          done
          echo "Database is ready!"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      - name: wait-for-redis
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          until nc -z redis-master.saas-idp-production.svc.cluster.local 6379; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      - name: db-migrate
        image: saas-idp:latest
        command:
        - sh
        - -c
        - |
          echo "Running database migrations..."
          npx prisma migrate deploy
          echo "Migrations completed!"
        envFrom:
        - configMapRef:
            name: saas-idp-config
        - secretRef:
            name: saas-idp-secrets
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      containers:
      - name: saas-idp
        image: saas-idp:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 4400
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        env:
        - name: NEXTAUTH_URL
          value: "https://$(EXTERNAL_DOMAIN)"
        - name: CORS_ORIGIN
          value: "https://$(EXTERNAL_DOMAIN)"
        - name: ALLOWED_ORIGINS
          value: "https://$(EXTERNAL_DOMAIN)"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        
        envFrom:
        - configMapRef:
            name: saas-idp-config
        - secretRef:
            name: saas-idp-secrets
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        livenessProbe:
          httpGet:
            path: /api/health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /api/health/startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        - name: uploads
          mountPath: /app/uploads
        - name: tmp
          mountPath: /tmp
      
      # Sidecar containers
      - name: logging-agent
        image: fluent/fluent-bit:2.0
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: logs
          mountPath: /app/logs
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc/
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: logs
        emptyDir:
          sizeLimit: "1Gi"
      - name: cache
        emptyDir:
          sizeLimit: "500Mi"
      - name: uploads
        persistentVolumeClaim:
          claimName: saas-idp-uploads-pvc
      - name: tmp
        emptyDir:
          sizeLimit: "100Mi"
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      
      imagePullSecrets:
      - name: registry-credentials
      
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: application
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - saas-idp
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - application
      
      tolerations:
      - key: "application-nodes"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      terminationGracePeriodSeconds: 60
      
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy
  namespace: saas-idp-production
  labels:
    app: saas-idp
    component: nginx
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: saas-idp
      component: nginx
  template:
    metadata:
      labels:
        app: saas-idp
        component: nginx
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        sidecar.istio.io/inject: "true"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
      
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: tls-certs
          mountPath: /etc/nginx/ssl
          readOnly: true
        
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:0.11
        args:
        - -nginx.scrape-uri=http://localhost:80/nginx_status
        ports:
        - name: metrics
          containerPort: 9113
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: tls-certs
        secret:
          secretName: tls-secret
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - nginx
              topologyKey: kubernetes.io/hostname