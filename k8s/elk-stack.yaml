apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
  namespace: saas-idp-monitoring
data:
  elasticsearch.yml: |
    cluster.name: "saas-idp-logs"
    network.host: 0.0.0.0
    discovery.type: single-node
    xpack.security.enabled: false
    xpack.monitoring.collection.enabled: true
    
    # Performance settings
    indices.memory.index_buffer_size: 10%
    indices.queries.cache.size: 10%
    indices.fielddata.cache.size: 20%
    
    # Index lifecycle management
    action.auto_create_index: true
    
    # Logging
    logger.org.elasticsearch.discovery: DEBUG
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: saas-idp-monitoring
  labels:
    app: elasticsearch
spec:
  serviceName: elasticsearch
  replicas: 3
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        ports:
        - containerPort: 9200
          name: rest
          protocol: TCP
        - containerPort: 9300
          name: inter-node
          protocol: TCP
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
        - name: config
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        env:
        - name: cluster.name
          value: saas-idp-logs
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: discovery.seed_hosts
          value: "elasticsearch-0.elasticsearch,elasticsearch-1.elasticsearch,elasticsearch-2.elasticsearch"
        - name: cluster.initial_master_nodes
          value: "elasticsearch-0,elasticsearch-1,elasticsearch-2"
        - name: ES_JAVA_OPTS
          value: "-Xms2g -Xmx2g"
        - name: xpack.security.enabled
          value: "false"
        - name: xpack.monitoring.collection.enabled
          value: "true"
        resources:
          requests:
            memory: 4Gi
            cpu: 1000m
          limits:
            memory: 8Gi
            cpu: 2000m
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 90
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: elasticsearch-config
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: elasticsearch
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "gp3"
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: saas-idp-monitoring
  labels:
    app: elasticsearch
spec:
  selector:
    app: elasticsearch
  clusterIP: None
  ports:
    - port: 9200
      name: rest
    - port: 9300
      name: inter-node
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-client
  namespace: saas-idp-monitoring
  labels:
    app: elasticsearch
spec:
  selector:
    app: elasticsearch
  ports:
    - port: 9200
      name: rest
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
  namespace: saas-idp-monitoring
data:
  kibana.yml: |
    server.name: kibana
    server.host: "0.0.0.0"
    elasticsearch.hosts: [ "http://elasticsearch-client:9200" ]
    monitoring.ui.container.elasticsearch.enabled: true
    
    # Security
    xpack.security.enabled: false
    xpack.encryptedSavedObjects.encryptionKey: "a7a6311933d3503b89bc2dbc36572c4c"
    
    # Default index patterns
    kibana.defaultAppId: "discover"
    
    # Logging
    logging.level: info
    logging.appenders:
      default:
        type: console
        layout:
          type: json
    
    # Telemetry
    telemetry.enabled: false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: saas-idp-monitoring
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:8.11.0
        resources:
          requests:
            memory: 1Gi
            cpu: 500m
          limits:
            memory: 2Gi
            cpu: 1000m
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "http://elasticsearch-client:9200"
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: /usr/share/kibana/config/kibana.yml
          subPath: kibana.yml
        livenessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 120
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: kibana-config
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: saas-idp-monitoring
  labels:
    app: kibana
spec:
  ports:
  - port: 5601
    targetPort: 5601
    name: ui
  selector:
    app: kibana
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: saas-idp-monitoring
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    xpack.monitoring.elasticsearch.hosts: [ "http://elasticsearch-client:9200" ]
    
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
      http {
        port => 8080
        codec => json
      }
    }
    
    filter {
      if [kubernetes] {
        mutate {
          rename => { "[kubernetes][pod][name]" => "pod_name" }
          rename => { "[kubernetes][namespace]" => "namespace" }
          rename => { "[kubernetes][container][name]" => "container_name" }
        }
      }
      
      # Parse JSON logs
      if [message] =~ /^\{.*\}$/ {
        json {
          source => "message"
        }
      }
      
      # Parse application logs
      if [container_name] == "app" {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:log_message}" }
        }
      }
      
      # Add environment labels
      mutate {
        add_field => { "environment" => "production" }
        add_field => { "application" => "saas-idp" }
      }
      
      # Security log parsing
      if [log_message] =~ /SECURITY|security|Security/ {
        mutate {
          add_tag => [ "security" ]
          add_field => { "alert_level" => "high" }
        }
      }
      
      # Error log parsing
      if [level] == "ERROR" or [level] == "error" {
        mutate {
          add_tag => [ "error" ]
          add_field => { "alert_level" => "medium" }
        }
      }
      
      # Performance monitoring
      if [log_message] =~ /response_time|latency|duration/ {
        grok {
          match => { "log_message" => "response_time:%{NUMBER:response_time:float}" }
        }
        
        if [response_time] {
          if [response_time] > 1000 {
            mutate {
              add_tag => [ "slow_response" ]
            }
          }
        }
      }
    }
    
    output {
      elasticsearch {
        hosts => ["elasticsearch-client:9200"]
        index => "saas-idp-logs-%{+YYYY.MM.dd}"
        template_name => "saas-idp"
        template_pattern => "saas-idp-*"
        template => {
          "index_patterns" => ["saas-idp-*"]
          "settings" => {
            "number_of_shards" => 1
            "number_of_replicas" => 1
            "index.refresh_interval" => "5s"
          }
          "mappings" => {
            "properties" => {
              "@timestamp" => { "type" => "date" }
              "level" => { "type" => "keyword" }
              "message" => { "type" => "text" }
              "pod_name" => { "type" => "keyword" }
              "namespace" => { "type" => "keyword" }
              "container_name" => { "type" => "keyword" }
              "response_time" => { "type" => "float" }
            }
          }
        }
      }
      
      # Send security alerts to dedicated index
      if "security" in [tags] {
        elasticsearch {
          hosts => ["elasticsearch-client:9200"]
          index => "security-alerts-%{+YYYY.MM.dd}"
        }
      }
      
      stdout { codec => rubydebug }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: saas-idp-monitoring
  labels:
    app: logstash
spec:
  replicas: 2
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.11.0
        ports:
        - containerPort: 5044
          name: beats
        - containerPort: 8080
          name: http
        - containerPort: 9600
          name: monitoring
        resources:
          requests:
            memory: 2Gi
            cpu: 1000m
          limits:
            memory: 4Gi
            cpu: 2000m
        env:
        - name: LS_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        volumeMounts:
        - name: config
          mountPath: /usr/share/logstash/config/logstash.yml
          subPath: logstash.yml
        - name: pipeline
          mountPath: /usr/share/logstash/pipeline
        livenessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 120
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: logstash-config
      - name: pipeline
        configMap:
          name: logstash-config
          items:
          - key: logstash.conf
            path: logstash.conf
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: saas-idp-monitoring
  labels:
    app: logstash
spec:
  ports:
  - port: 5044
    targetPort: 5044
    name: beats
  - port: 8080
    targetPort: 8080
    name: http
  - port: 9600
    targetPort: 9600
    name: monitoring
  selector:
    app: logstash
  type: ClusterIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: saas-idp-monitoring
  labels:
    app: filebeat
spec:
  selector:
    matchLabels:
      app: filebeat
  template:
    metadata:
      labels:
        app: filebeat
    spec:
      serviceAccountName: filebeat
      terminationGracePeriodSeconds: 30
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:8.11.0
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        env:
        - name: ELASTICSEARCH_HOST
          value: elasticsearch-client
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: LOGSTASH_HOST
          value: logstash
        - name: LOGSTASH_PORT
          value: "5044"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsUser: 0
        resources:
          requests:
            memory: 200Mi
            cpu: 100m
          limits:
            memory: 500Mi
            cpu: 500m
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varpodlogs
          mountPath: /var/log/pods
          readOnly: true
        - name: varpoddata
          mountPath: /var/lib/kubelet/pods
          readOnly: true
      volumes:
      - name: config
        configMap:
          defaultMode: 0640
          name: filebeat-config
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
      - name: varpodlogs
        hostPath:
          path: /var/log/pods
      - name: varpoddata
        hostPath:
          path: /var/lib/kubelet/pods
      - name: data
        hostPath:
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: saas-idp-monitoring
data:
  filebeat.yml: |
    filebeat.inputs:
    - type: container
      paths:
        - /var/log/containers/*.log
      processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}
            matchers:
            - logs_path:
                logs_path: "/var/log/containers/"
        - decode_json_fields:
            fields: ["message"]
            process_array: false
            max_depth: 1
            target: ""
            overwrite_keys: false

    - type: log
      paths:
        - /var/log/pods/*/*/*.log
      processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}

    filebeat.config.modules:
      path: ${path.config}/modules.d/*.yml
      reload.enabled: false

    processors:
      - add_cloud_metadata:
          timeout: 3s
          retries: 2
      - add_docker_metadata:
          host: "unix:///var/run/docker.sock"
      - add_kubernetes_metadata:
          host: ${NODE_NAME}
          matchers:
          - logs_path:
              logs_path: "/var/log/containers/"

    cloud.id: ${ELASTIC_CLOUD_ID}
    cloud.auth: ${ELASTIC_CLOUD_AUTH}

    output.logstash:
      hosts: ['${LOGSTASH_HOST}:${LOGSTASH_PORT}']

    setup.kibana:
      host: "kibana:5601"

    setup.template.settings:
      index.number_of_shards: 1
      index.codec: best_compression
      _source.enabled: false

    logging.level: info
    logging.to_files: true
    logging.files:
      path: /var/log/filebeat
      name: filebeat
      keepfiles: 7
      permissions: 0644
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: saas-idp-monitoring
  labels:
    app: filebeat
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: filebeat
  labels:
    app: filebeat
rules:
- apiGroups: [""]
  resources:
  - nodes
  - namespaces
  - events
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  - deployments
  - replicasets
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: filebeat
subjects:
- kind: ServiceAccount
  name: filebeat
  namespace: saas-idp-monitoring
roleRef:
  kind: ClusterRole
  name: filebeat
  apiGroup: rbac.authorization.k8s.io