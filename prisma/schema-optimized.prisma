// ENTERPRISE-OPTIMIZED PRISMA SCHEMA
// This file contains all performance optimizations and enterprise enhancements

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views", "multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pg_stat_statements, pg_trgm, btree_gin, btree_gist]
}

// ==============================================
// PERFORMANCE-OPTIMIZED SCHEMA WITH INDEXES
// ==============================================

// User Management - Performance Optimized
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  username    String?  @unique
  avatar      String?
  provider    String   // github, google, saml, local, etc.
  providerId  String
  password    String?  // Only for local provider
  role        UserRole @default(DEVELOPER)
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  teamMemberships TeamMember[]
  ownedServices   Service[]    @relation("ServiceOwner")
  apiKeys         ApiKey[]
  sessions        Session[]
  auditLogs       AuditLog[]

  // Performance indexes
  @@index([email], type: Hash) // Fast email lookups
  @@index([username], type: Hash) // Fast username lookups  
  @@index([provider, providerId]) // SSO lookups
  @@index([role, isActive]) // Role-based queries
  @@index([lastLogin]) // Activity tracking
  @@index([createdAt]) // Time-based queries
  
  @@map("users")
}

enum UserRole {
  ADMIN
  PLATFORM_ENGINEER
  DEVELOPER
  VIEWER
}

// Plugin Registry - Enterprise Performance Optimized
model Plugin {
  id          String   @id @default(cuid())
  name        String   // package name like @backstage/plugin-kubernetes
  displayName String
  description String?
  category    PluginCategory @default(OTHER)
  subcategory String?
  author      String?
  maintainer  String?
  repository  String?
  homepage    String?
  documentation String?
  npm         String?
  license     String?
  keywords    String[] @default([])
  tags        String[] @default([])
  
  // Tenant Management
  tenantId    String?
  tenantScope TenantScope @default(PRIVATE)
  
  // Installation State
  isInstalled Boolean  @default(false)
  isEnabled   Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  isPremium   Boolean  @default(false)
  
  // Plugin Metadata
  compatibility Json?   // backstage version compatibility
  requirements  Json?   // system requirements
  permissions   Json?   // required permissions
  apiVersion    String  @default("v1")
  schemaVersion String  @default("1.0.0")
  
  // Enhanced Plugin Metadata
  healthScore     Float?  // 0-100 plugin health score
  lastHealthCheck DateTime? // last health check timestamp
  cpuUsage        Float?  // current CPU usage percentage
  memoryUsage     Float?  // current memory usage in MB
  installedFrom   PluginSource? // where plugin was installed from
  installedBy     String? // user who installed the plugin
  installedAt     DateTime? // when plugin was installed
  configSchema    Json?   // configuration schema definition
  dependencies    String[] @default([]) // array of dependency plugin names
  
  // Quality Metrics
  downloadCount   BigInt @default(0)
  starCount       Int    @default(0)
  issueCount      Int    @default(0)
  lastCommit      DateTime?
  securityScore   Float? // 0-100 security score
  maintenanceScore Float? // 0-100 maintenance score
  
  // Lifecycle
  status      PluginStatus @default(ACTIVE)
  lifecycle   PluginLifecycle @default(STABLE)
  deprecatedAt DateTime?
  archivedAt   DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  versions           PluginVersion[]
  configurations     PluginConfiguration[]
  configs            PluginConfig[]
  backups            PluginBackup[]
  operations         PluginOperation[]
  metrics            PluginMetrics[]
  pluginDependencies PluginDependency[] @relation("PluginDependencies")
  dependents         PluginDependency[] @relation("DependentPlugins")
  marketplacePlugin  MarketplacePlugin?
  resourceUsage      ResourceUsage[]
  environments       PluginEnvironment[]
  governance         PluginGovernance[]
  analytics          PluginAnalytics[]
  alerts             PluginAlert[]
  workflows          PluginWorkflow[]
  approvals          PluginApproval[] @relation("PluginApprovals")
  testResults        PluginTestResult[]
  vulnerabilities    PluginVulnerability[]
  performance        PluginPerformance[]

  // ENTERPRISE PERFORMANCE INDEXES
  @@unique([name, tenantId]) // Compound unique constraint
  @@index([tenantId, category, status]) // Multi-tenant filtered queries
  @@index([name], type: Hash) // Fast plugin name lookups
  @@index([category, isPremium]) // Marketplace filtering
  @@index([healthScore]) // Health-based sorting
  @@index([downloadCount]) // Popularity sorting
  @@index([lastHealthCheck]) // Health monitoring queries
  @@index([cpuUsage]) // Resource monitoring
  @@index([memoryUsage]) // Resource monitoring
  @@index([installedBy]) // Installation tracking
  @@index([installedAt]) // Time-based analytics
  @@index([isInstalled, isEnabled]) // Active plugin queries
  @@index([status, tenantId]) // Status filtering per tenant
  @@index([lifecycle, category]) // Lifecycle management
  @@index([securityScore, maintenanceScore]) // Quality metrics
  @@index([keywords]) @map("idx_plugins_keywords_gin") @using(Gin) // Full-text search
  @@index([tags]) @map("idx_plugins_tags_gin") @using(Gin) // Tag-based search
  @@index([displayName, description]) @map("idx_plugins_search_gin") @using(Gin) // Text search
  
  @@map("plugins")
}

// Plugin Operations - Performance Critical
model PluginOperation {
  id          String            @id @default(cuid())
  pluginId    String
  operationType PluginOperationType
  status      OperationStatus   @default(PENDING)
  version     String?
  performedBy String
  environment String            @default("production")
  parameters  Json?             // operation parameters
  result      Json?             // operation result
  logs        String?           // operation logs
  error       String?           // error message if failed
  duration    Int?              // operation duration in milliseconds
  retries     Int               @default(0)
  maxRetries  Int               @default(3)
  scheduledAt DateTime?
  startedAt   DateTime          @default(now())
  completedAt DateTime?
  metadata    Json?
  
  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  
  // CRITICAL PERFORMANCE INDEXES
  @@index([pluginId, operationType, status]) // Operation status queries
  @@index([performedBy, startedAt]) // User operation history
  @@index([status, scheduledAt]) // Scheduled operation processing
  @@index([environment, operationType]) // Environment-specific operations
  @@index([startedAt]) // Time-based queries
  @@index([status, startedAt]) // Active operation monitoring
  @@index([duration]) // Performance analysis
  @@index([operationType, status, startedAt]) // Operation type analytics
  
  @@map("plugin_operations")
}

// Plugin Metrics - Time Series Optimized
model PluginMetrics {
  id          String      @id @default(cuid())
  pluginId    String
  metricName  String      // e.g., cpu_usage, memory_usage, request_count
  metricType  MetricType  // counter, gauge, histogram, etc.
  value       Float
  unit        String?     // MB, %, ms, etc.
  tags        Json?       // additional metric tags
  environment String      @default("production")
  timestamp   DateTime    @default(now())
  aggregationPeriod Int?  // aggregation period in seconds
  
  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  
  // TIME-SERIES OPTIMIZED INDEXES
  @@index([pluginId, metricName, timestamp]) // Plugin-specific time series
  @@index([metricName, environment, timestamp]) // Cross-plugin metrics
  @@index([timestamp]) @map("idx_plugin_metrics_time_desc") @db.BTree @sortOrder(Desc) // Latest metrics first
  @@index([pluginId, timestamp]) @map("idx_plugin_metrics_plugin_time_desc") @sortOrder(Desc) // Plugin latest metrics
  @@index([metricName, timestamp]) @map("idx_plugin_metrics_name_time_desc") @sortOrder(Desc) // Metric type time series
  @@index([environment, metricName, pluginId, timestamp]) // Environment-specific queries
  
  @@map("plugin_metrics")
}

// Plugin Analytics - High Volume Optimized
model PluginAnalytics {
  id              String   @id @default(cuid())
  pluginId        String
  tenantId        String?
  userId          String?
  event           AnalyticsEvent
  environment     String   @default("production")
  version         String?
  sessionId       String?
  userAgent       String?
  ipAddress       String?
  country         String?
  region          String?
  metadata        Json?    // Additional event metadata
  duration        Int?     // Event duration in milliseconds
  errorCode       String?  // Error code if applicable
  errorMessage    String?  // Error message if applicable
  timestamp       DateTime @default(now())

  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  // HIGH-VOLUME ANALYTICS INDEXES
  @@index([pluginId, timestamp]) @map("idx_analytics_plugin_time_desc") @sortOrder(Desc)
  @@index([event, timestamp]) @map("idx_analytics_event_time_desc") @sortOrder(Desc)
  @@index([tenantId, timestamp]) @map("idx_analytics_tenant_time_desc") @sortOrder(Desc)
  @@index([userId, timestamp]) @map("idx_analytics_user_time_desc") @sortOrder(Desc)
  @@index([pluginId, event, timestamp]) // Plugin event analysis
  @@index([environment, event, timestamp]) // Environment analytics
  @@index([country, timestamp]) // Geographic analytics
  @@index([sessionId, timestamp]) // Session tracking
  
  @@map("plugin_analytics")
}

// Service Catalog - Enterprise Optimized
model Service {
  id            String        @id @default(cuid())
  name          String        @unique
  displayName   String
  description   String?
  type          ServiceType
  lifecycle     Lifecycle
  namespace     String        @default("default")
  system        String?
  domain        String?
  ownerId       String
  teamId        String
  gitRepo       String?
  gitBranch     String?       @default("main")
  apiVersion    String?
  tags          String[]
  labels        Json?
  annotations   Json?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  owner              User                     @relation("ServiceOwner", fields: [ownerId], references: [id])
  team               Team                     @relation(fields: [teamId], references: [id])
  dependencies       ServiceDependency[]      @relation("ServiceDependencies")
  dependents         ServiceDependency[]      @relation("DependentServices")
  healthChecks       ServiceHealthCheck[]
  metrics            ServiceMetric[]
  deployments        Deployment[]
  costs              ServiceCost[]
  templateExecutions TemplateExecution[]
  documents          ServiceDocument[]

  // ENTERPRISE SERVICE INDEXES
  @@index([name], type: Hash) // Fast service lookups
  @@index([ownerId, teamId]) // Ownership queries
  @@index([type, lifecycle]) // Service categorization
  @@index([namespace, domain]) // Organization structure
  @@index([isActive, lifecycle]) // Active service queries
  @@index([tags]) @map("idx_services_tags_gin") @using(Gin) // Tag-based search
  @@index([displayName, description]) @map("idx_services_search_gin") @using(Gin) // Full-text search
  @@index([teamId, type]) // Team service breakdown
  @@index([system, domain]) // System architecture queries

  @@map("services")
}

// Health Monitoring - Real-time Optimized
model HealthCheckResult {
  id            String            @id @default(cuid())
  healthCheckId String
  status        HealthStatus
  responseTime  Int? // milliseconds
  message       String?
  checkedAt     DateTime          @default(now())

  healthCheck ServiceHealthCheck @relation(fields: [healthCheckId], references: [id], onDelete: Cascade)

  // REAL-TIME HEALTH MONITORING INDEXES
  @@index([healthCheckId, checkedAt]) @map("idx_health_results_check_time_desc") @sortOrder(Desc)
  @@index([status, checkedAt]) @map("idx_health_results_status_time_desc") @sortOrder(Desc)
  @@index([checkedAt]) @map("idx_health_results_time_desc") @sortOrder(Desc)
  @@index([healthCheckId, status, checkedAt]) // Health status tracking
  @@index([responseTime, checkedAt]) // Performance monitoring

  @@map("health_check_results")
}

// Audit Logging - High Volume Write Optimized
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  // AUDIT LOG PERFORMANCE INDEXES
  @@index([userId, timestamp]) @map("idx_audit_user_time_desc") @sortOrder(Desc)
  @@index([action, timestamp]) @map("idx_audit_action_time_desc") @sortOrder(Desc)
  @@index([resource, timestamp]) @map("idx_audit_resource_time_desc") @sortOrder(Desc)
  @@index([timestamp]) @map("idx_audit_timestamp_desc") @sortOrder(Desc)
  @@index([userId, action, timestamp]) // User action tracking
  @@index([resource, resourceId, timestamp]) // Resource audit trail
  @@index([ipAddress, timestamp]) // Security monitoring

  @@map("audit_logs")
}

// Search Index - Full Text Search Optimized  
model SearchIndex {
  id         String   @id @default(cuid())
  entityType String   // service, template, document
  entityId   String
  title      String
  content    String
  tags       String[]
  metadata   Json?
  updatedAt  DateTime @updatedAt

  @@unique([entityType, entityId])
  
  // FULL-TEXT SEARCH INDEXES
  @@index([entityType, entityId], type: Hash) // Entity lookups
  @@index([title, content]) @map("idx_search_fulltext_gin") @using(Gin) // Full-text search
  @@index([tags]) @map("idx_search_tags_gin") @using(Gin) // Tag search
  @@index([entityType, updatedAt]) // Entity type queries
  @@index([updatedAt]) @map("idx_search_updated_desc") @sortOrder(Desc) // Recently updated

  @@map("search_index")
}

// Billing and Usage - Financial Data Optimized
model ResourceUsage {
  id               String   @id @default(cuid())
  organizationId   String
  subscriptionId   String?
  pluginId         String?
  resourceType     ResourceType
  quantity         Decimal  @db.Decimal(12, 4)
  unit             String
  cost             Decimal  @db.Decimal(10, 2)
  period           DateTime
  metadata         Json?
  createdAt        DateTime @default(now())

  // Relationships
  organization     Organization @relation(fields: [organizationId], references: [id])
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
  plugin           Plugin? @relation(fields: [pluginId], references: [id])

  // BILLING PERFORMANCE INDEXES
  @@index([organizationId, period]) // Org billing periods
  @@index([resourceType, period]) // Resource usage analysis
  @@index([period]) @map("idx_usage_period_desc") @sortOrder(Desc) // Time-based billing
  @@index([organizationId, resourceType, period]) // Detailed usage breakdown
  @@index([pluginId, period]) // Plugin cost tracking
  @@index([subscriptionId, period]) // Subscription usage
  @@index([cost, period]) // Cost analysis
  
  @@map("resource_usage")
}

// Continue with remaining core models... (truncated for brevity)
// The pattern continues with performance-optimized indexes for all other models

// ==============================================
// PERFORMANCE MONITORING VIEWS
// ==============================================

view ActivePluginsView {
  id          String  @id
  name        String
  displayName String
  category    String
  tenantId    String?
  healthScore Float?
  cpuUsage    Float?
  memoryUsage Float?
  
  @@map("v_active_plugins")
}

view PluginPerformanceSummary {
  pluginId        String  @id
  pluginName      String
  avgCpuUsage     Float?
  avgMemoryUsage  Float?
  errorRate       Float?
  lastHealthCheck DateTime?
  
  @@map("v_plugin_performance_summary")
}

view ResourceUsageSummary {
  organizationId String   @id
  period         DateTime
  totalCost      Decimal
  pluginCount    Int
  userCount      Int
  
  @@map("v_resource_usage_summary")
}

// Include all enum definitions...
enum PluginCategory {
  AUTHENTICATION
  AUTHORIZATION
  CICD
  CLOUD_INFRASTRUCTURE
  CONTAINER_ORCHESTRATION
  COST_MANAGEMENT
  DEPLOYMENT
  DOCUMENTATION
  MONITORING_OBSERVABILITY
  SECURITY_COMPLIANCE
  SERVICE_CATALOG
  SOFTWARE_TEMPLATES
  SOURCE_CODE_MANAGEMENT
  SEARCH_DISCOVERY
  ANALYTICS_REPORTING
  COLLABORATION
  TESTING_QUALITY
  DATABASE
  MESSAGING
  MACHINE_LEARNING
  API_MANAGEMENT
  WORKFLOW_AUTOMATION
  CUSTOM
  OTHER
}

enum TenantScope {
  PUBLIC     // Available to all tenants
  PRIVATE    // Private to specific tenant
  RESTRICTED // Requires approval
  INTERNAL   // Internal/system plugins only
}

enum PluginStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
  ARCHIVED
  BLOCKED
  PENDING_APPROVAL
}

enum PluginLifecycle {
  ALPHA
  BETA
  STABLE
  DEPRECATED
  END_OF_LIFE
}

enum PluginSource {
  MARKETPLACE
  GIT_REPOSITORY
  NPM_REGISTRY
  LOCAL_FILE
  DOCKER_REGISTRY
  INTERNAL
  CUSTOM
}

enum PluginOperationType {
  INSTALL
  UNINSTALL
  ENABLE
  DISABLE
  UPDATE
  CONFIGURE
  BACKUP
  RESTORE
  HEALTH_CHECK
  RESTART
  ROLLBACK
  MIGRATE
  SCAN_VULNERABILITIES
  PERFORMANCE_TEST
  VALIDATE
  SYNC_DEPENDENCIES
  CLEANUP
}

enum OperationStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
  RETRYING
  SCHEDULED
}

enum MetricType {
  COUNTER
  GAUGE
  HISTOGRAM
  SUMMARY
}

enum AnalyticsEvent {
  VIEW
  INSTALL
  UNINSTALL
  ENABLE
  DISABLE
  CONFIGURE
  UPDATE
  ERROR
  PERFORMANCE_ISSUE
  SECURITY_ALERT
  USER_INTERACTION
  API_CALL
  RENDER
  LOAD
  CRASH
}

enum ServiceType {
  SERVICE
  WEBSITE
  LIBRARY
  DOCUMENTATION
  TOOL
  DATABASE
  INFRASTRUCTURE
}

enum Lifecycle {
  EXPERIMENTAL
  PRODUCTION
  DEPRECATED
}

enum HealthStatus {
  HEALTHY
  DEGRADED
  UNHEALTHY
  UNKNOWN
}

enum ResourceType {
  COMPUTE_HOURS
  STORAGE_GB
  NETWORK_GB
  API_CALLS
  CONTAINERS
  USERS
  PLUGINS
  DEPLOYMENTS
  BUILDS
  CUSTOM
}

// Note: This is a condensed version focusing on the most critical performance optimizations.
// The full schema would include all remaining models with appropriate indexes.