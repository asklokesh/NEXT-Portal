// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  username    String?  @unique
  avatar      String?
  provider    String   // github, google, saml, local, etc.
  providerId  String
  password    String?  // Only for local provider
  role        UserRole @default(DEVELOPER)
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  teamMemberships TeamMember[]
  ownedServices   Service[]    @relation("ServiceOwner")
  apiKeys         ApiKey[]
  sessions        Session[]
  auditLogs       AuditLog[]

  @@map("users")
}

enum UserRole {
  ADMIN
  PLATFORM_ENGINEER
  DEVELOPER
  VIEWER
}

// Team Management
model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  avatar      String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  members     TeamMember[]
  services    Service[]
  permissions Permission[]
  costAllocations CostAllocation[]

  @@map("teams")
}

model TeamMember {
  id     String   @id @default(cuid())
  userId String
  teamId String
  role   TeamRole @default(MEMBER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

enum TeamRole {
  OWNER
  MAINTAINER
  MEMBER
}

// Service Catalog
model Service {
  id            String        @id @default(cuid())
  name          String        @unique
  displayName   String
  description   String?
  type          ServiceType
  lifecycle     Lifecycle
  namespace     String        @default("default")
  system        String?
  domain        String?
  ownerId       String
  teamId        String
  gitRepo       String?
  gitBranch     String?       @default("main")
  apiVersion    String?
  tags          String[]
  labels        Json?
  annotations   Json?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  owner              User                     @relation("ServiceOwner", fields: [ownerId], references: [id])
  team               Team                     @relation(fields: [teamId], references: [id])
  dependencies       ServiceDependency[]      @relation("ServiceDependencies")
  dependents         ServiceDependency[]      @relation("DependentServices")
  healthChecks       ServiceHealthCheck[]
  metrics            ServiceMetric[]
  deployments        Deployment[]
  costs              ServiceCost[]
  templateExecutions TemplateExecution[]
  documents          ServiceDocument[]

  @@map("services")
}

enum ServiceType {
  SERVICE
  WEBSITE
  LIBRARY
  DOCUMENTATION
  TOOL
  DATABASE
  INFRASTRUCTURE
}

enum Lifecycle {
  EXPERIMENTAL
  PRODUCTION
  DEPRECATED
}

// Service Dependencies
model ServiceDependency {
  id            String @id @default(cuid())
  serviceId     String
  dependsOnId   String
  dependencyType DependencyType
  description   String?

  service   Service @relation("ServiceDependencies", fields: [serviceId], references: [id], onDelete: Cascade)
  dependsOn Service @relation("DependentServices", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([serviceId, dependsOnId])
  @@map("service_dependencies")
}

enum DependencyType {
  HARD
  SOFT
  API
  DATABASE
  MESSAGING
}

// Health Monitoring
model ServiceHealthCheck {
  id          String            @id @default(cuid())
  serviceId   String
  name        String
  type        HealthCheckType
  endpoint    String?
  method      String?           @default("GET")
  interval    Int               @default(60) // seconds
  timeout     Int               @default(30) // seconds
  retries     Int               @default(3)
  isEnabled   Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  service Service             @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  results HealthCheckResult[]

  @@map("service_health_checks")
}

enum HealthCheckType {
  HTTP
  TCP
  DATABASE
  CUSTOM
}

model HealthCheckResult {
  id            String            @id @default(cuid())
  healthCheckId String
  status        HealthStatus
  responseTime  Int? // milliseconds
  message       String?
  checkedAt     DateTime          @default(now())

  healthCheck ServiceHealthCheck @relation(fields: [healthCheckId], references: [id], onDelete: Cascade)

  @@map("health_check_results")
}

enum HealthStatus {
  HEALTHY
  DEGRADED
  UNHEALTHY
  UNKNOWN
}

// Metrics and Analytics
model ServiceMetric {
  id        String     @id @default(cuid())
  serviceId String
  name      String
  type      MetricType
  value     Float
  unit      String?
  labels    Json?
  timestamp DateTime   @default(now())

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_metrics")
}

enum MetricType {
  COUNTER
  GAUGE
  HISTOGRAM
  SUMMARY
}

// Template System
model Template {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String
  type        ServiceType
  ownerId     String
  teamId      String?
  content     Json     // YAML content as JSON
  schema      Json?    // Parameter schema
  tags        String[]
  isPublic    Boolean  @default(false)
  isActive    Boolean  @default(true)
  version     String   @default("1.0.0")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  executions TemplateExecution[]

  @@map("templates")
}

model TemplateExecution {
  id         String            @id @default(cuid())
  templateId String
  serviceId  String?
  userId     String
  parameters Json
  status     ExecutionStatus
  result     Json?
  error      String?
  startedAt  DateTime          @default(now())
  completedAt DateTime?

  template Template @relation(fields: [templateId], references: [id])
  service  Service? @relation(fields: [serviceId], references: [id])

  @@map("template_executions")
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// Deployment Tracking
model Deployment {
  id          String           @id @default(cuid())
  serviceId   String
  version     String
  environment String
  status      DeploymentStatus
  deployedBy  String
  gitCommit   String?
  gitBranch   String?
  startedAt   DateTime         @default(now())
  completedAt DateTime?
  rollbackOf  String?

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("deployments")
}

enum DeploymentStatus {
  PENDING
  DEPLOYING
  DEPLOYED
  FAILED
  ROLLED_BACK
}

// Cost Management
model ServiceCost {
  id        String   @id @default(cuid())
  serviceId String
  provider  String   // aws, azure, gcp
  region    String?
  account   String?
  service   String   // EC2, S3, etc.
  resource  String?
  cost      Decimal  @db.Decimal(10, 2)
  currency  String   @default("USD")
  period    String   // daily, monthly
  date      DateTime
  tags      Json?

  serviceEntity Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_costs")
}

// Cost Budgets
model Budget {
  id        String      @id @default(cuid())
  name      String
  amount    Decimal     @db.Decimal(10, 2)
  currency  String      @default("USD")
  period    BudgetPeriod
  scope     Json        // Service IDs, teams, tags
  threshold Float       @default(0.8) // Alert threshold
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  alerts BudgetAlert[]

  @@map("budgets")
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model BudgetAlert {
  id        String   @id @default(cuid())
  budgetId  String
  amount    Decimal  @db.Decimal(10, 2)
  threshold Float
  triggered Boolean  @default(false)
  sentAt    DateTime?
  createdAt DateTime @default(now())

  budget Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@map("budget_alerts")
}

// Authentication and Sessions
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  keyHash     String   @unique
  permissions Json?
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Permissions and RBAC
model Permission {
  id       String @id @default(cuid())
  teamId   String
  resource String // service, template, etc.
  action   String // read, write, delete, etc.
  scope    Json?  // Additional constraints

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, resource, action])
  @@map("permissions")
}

// Audit Logging
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enhanced Notifications System
model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String   // error, warning, success, info, mention, system, alert
  title       String
  message     String
  priority    String   // urgent, high, medium, low
  sourceName  String
  sourceType  String   // user, system, automation
  actions     String?  // JSON string of action buttons
  metadata    String?  // JSON string of additional data
  read        Boolean  @default(false)
  pinned      Boolean  @default(false)
  archived    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notifications")
}

model NotificationSettings {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences String   // JSON string of notification preferences
  filters     String   // JSON string of filter settings
  quietHours  String   // JSON string of quiet hours config
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notification_settings")
}

// Documentation
model ServiceDocument {
  id        String      @id @default(cuid())
  serviceId String
  title     String
  content   String
  type      DocumentType
  path      String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_documents")
}

enum DocumentType {
  README
  API_DOCS
  RUNBOOK
  ARCHITECTURE
  OTHER
}

// Search and Discovery
model SearchIndex {
  id         String   @id @default(cuid())
  entityType String   // service, template, document
  entityId   String
  title      String
  content    String
  tags       String[]
  metadata   Json?
  updatedAt  DateTime @updatedAt

  @@unique([entityType, entityId])
  @@map("search_index")
}

// ============================================
// ENHANCED PLUGIN MANAGEMENT SYSTEM
// ============================================

// Plugin Registry with Tenant Isolation
model Plugin {
  id          String   @id @default(cuid())
  name        String   // package name like @backstage/plugin-kubernetes
  displayName String
  description String?
  category    PluginCategory @default(OTHER)
  subcategory String?
  author      String?
  maintainer  String?
  repository  String?
  homepage    String?
  documentation String?
  npm         String?
  license     String?
  keywords    String[] @default([])
  tags        String[] @default([])
  
  // Tenant Management
  tenantId    String?
  tenantScope TenantScope @default(PRIVATE)
  
  // Installation State
  isInstalled Boolean  @default(false)
  isEnabled   Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  isPremium   Boolean  @default(false)
  
  // Plugin Metadata
  compatibility Json?   // backstage version compatibility
  requirements  Json?   // system requirements
  permissions   Json?   // required permissions
  apiVersion    String  @default("v1")
  schemaVersion String  @default("1.0.0")
  
  // Quality Metrics
  downloadCount   BigInt @default(0)
  starCount       Int    @default(0)
  issueCount      Int    @default(0)
  lastCommit      DateTime?
  healthScore     Float? // 0-100 plugin health score
  securityScore   Float? // 0-100 security score
  maintenanceScore Float? // 0-100 maintenance score
  
  // Lifecycle
  status      PluginStatus @default(ACTIVE)
  lifecycle   PluginLifecycle @default(STABLE)
  deprecatedAt DateTime?
  archivedAt   DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  versions           PluginVersion[]
  configurations     PluginConfiguration[]
  backups            PluginBackup[]
  marketplacePlugin  MarketplacePlugin?
  resourceUsage      ResourceUsage[]
  dependencies       PluginDependency[] @relation("PluginDependencies")
  dependents         PluginDependency[] @relation("DependentPlugins")
  environments       PluginEnvironment[]
  governance         PluginGovernance[]
  analytics          PluginAnalytics[]
  alerts             PluginAlert[]
  workflows          PluginWorkflow[]
  approvals          PluginApproval[]
  testResults        PluginTestResult[]
  vulnerabilities    PluginVulnerability[]
  performance        PluginPerformance[]

  @@unique([name, tenantId])
  @@index([tenantId, category, status])
  @@index([name])
  @@index([category, isPremium])
  @@index([healthScore])
  @@index([downloadCount])
  @@map("plugins")
}

model PluginVersion {
  id            String            @id @default(cuid())
  pluginId      String
  version       String
  semverMajor   Int
  semverMinor   Int
  semverPatch   Int
  prereleaseTag String?
  isCurrent     Boolean           @default(false)
  isDeployed    Boolean           @default(false)
  status        VersionStatus     @default(PENDING)
  changelog     String?           // markdown changelog
  dependencies  Json?             // package.json dependencies
  configuration Json?             // plugin configuration
  migrationScript String?         // SQL or JS migration script
  installSource VersionSource     @default(NPM)
  gitCommit     String?
  gitBranch     String?
  deployedBy    String?
  deployedAt    DateTime?
  rollbackOf    String?           // ID of version this is rolling back from
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  plugin             Plugin                @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  deployments        PluginDeployment[]
  backupsBefore      PluginBackup[]        @relation("BackupBeforeVersion")
  backupsAfter       PluginBackup[]        @relation("BackupAfterVersion")
  rollbacksFrom      PluginVersion[]       @relation("VersionRollbacks")
  rollbackTo         PluginVersion?        @relation("VersionRollbacks", fields: [rollbackOf], references: [id])
  migrationExecution PluginMigrationExecution[]
  approvals          PluginApproval[]
  testResults        PluginTestResult[]

  @@unique([pluginId, version])
  @@index([pluginId, isCurrent])
  @@index([status, deployedAt])
  @@map("plugin_versions")
}

enum VersionStatus {
  PENDING
  VALIDATING
  READY
  DEPLOYING
  DEPLOYED
  FAILED
  ROLLED_BACK
  ARCHIVED
}

enum VersionSource {
  NPM
  GIT
  LOCAL
  CUSTOM
}

model PluginDeployment {
  id              String             @id @default(cuid())
  pluginVersionId String
  environment     String             @default("production")
  status          DeploymentStatus   @default(PENDING)
  strategy        DeploymentStrategy @default(ROLLING)
  progress        Int                @default(0) // percentage
  logs            String?            // deployment logs
  error           String?
  healthCheck     Json?              // health check results
  rollbackPlan    Json?              // automated rollback configuration
  startedAt       DateTime           @default(now())
  completedAt     DateTime?
  deployedBy      String
  rollbackDeadline DateTime?         // automatic rollback if not confirmed

  pluginVersion PluginVersion @relation(fields: [pluginVersionId], references: [id], onDelete: Cascade)

  @@index([status, startedAt])
  @@map("plugin_deployments")
}

enum DeploymentStrategy {
  ROLLING
  BLUE_GREEN
  CANARY
  IMMEDIATE
}

model PluginConfiguration {
  id          String   @id @default(cuid())
  pluginId    String
  environment String   @default("production")
  config      Json     // plugin configuration
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, environment])
  @@map("plugin_configurations")
}

model PluginBackup {
  id                String        @id @default(cuid())
  pluginId          String
  beforeVersionId   String?
  afterVersionId    String?
  backupType        BackupType
  source            BackupSource  @default(AUTOMATIC)
  status            BackupStatus  @default(PENDING)
  size              BigInt?       // backup size in bytes
  compression       String?       // compression algorithm used
  encryption        Boolean       @default(true)
  storageProvider   String        @default("s3") // s3, azure, gcs, local
  storagePath       String        // path/key in storage
  storageRegion     String?
  metadata          Json?         // backup metadata
  checksumAlgorithm String        @default("sha256")
  checksum          String?
  retentionDays     Int           @default(90)
  expiresAt         DateTime?
  error             String?
  notes             String?
  createdBy         String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  plugin        Plugin         @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  beforeVersion PluginVersion? @relation("BackupBeforeVersion", fields: [beforeVersionId], references: [id])
  afterVersion  PluginVersion? @relation("BackupAfterVersion", fields: [afterVersionId], references: [id])
  restorePoints RestorePoint[]

  @@index([pluginId, createdAt])
  @@index([status, expiresAt])
  @@map("plugin_backups")
}

enum BackupType {
  FULL
  INCREMENTAL
  CONFIGURATION
  DATABASE_SNAPSHOT
  FILE_SYSTEM
  COMBINED
}

enum BackupSource {
  AUTOMATIC
  MANUAL
  SCHEDULED
  PRE_DEPLOYMENT
  POST_DEPLOYMENT
  ROLLBACK
}

enum BackupStatus {
  PENDING
  CREATING
  UPLOADING
  COMPLETED
  FAILED
  EXPIRED
  DELETED
}

// Enhanced Plugin Enums
enum PluginCategory {
  AUTHENTICATION
  AUTHORIZATION
  CICD
  CLOUD_INFRASTRUCTURE
  CONTAINER_ORCHESTRATION
  COST_MANAGEMENT
  DEPLOYMENT
  DOCUMENTATION
  MONITORING_OBSERVABILITY
  SECURITY_COMPLIANCE
  SERVICE_CATALOG
  SOFTWARE_TEMPLATES
  SOURCE_CODE_MANAGEMENT
  SEARCH_DISCOVERY
  ANALYTICS_REPORTING
  COLLABORATION
  TESTING_QUALITY
  DATABASE
  MESSAGING
  MACHINE_LEARNING
  API_MANAGEMENT
  WORKFLOW_AUTOMATION
  CUSTOM
  OTHER
}

enum TenantScope {
  PUBLIC     // Available to all tenants
  PRIVATE    // Private to specific tenant
  RESTRICTED // Requires approval
  INTERNAL   // Internal/system plugins only
}

enum PluginStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
  ARCHIVED
  BLOCKED
  PENDING_APPROVAL
}

enum PluginLifecycle {
  ALPHA
  BETA
  STABLE
  DEPRECATED
  END_OF_LIFE
}

model RestorePoint {
  id           String        @id @default(cuid())
  backupId     String
  name         String
  description  String?
  restoreType  RestoreType
  metadata     Json?         // restore-specific metadata
  isVerified   Boolean       @default(false)
  verifiedAt   DateTime?
  createdAt    DateTime      @default(now())

  backup PluginBackup @relation(fields: [backupId], references: [id], onDelete: Cascade)

  @@map("restore_points")
}

enum RestoreType {
  POINT_IN_TIME
  VERSION_ROLLBACK
  CONFIGURATION_ONLY
  DATABASE_ONLY
  FULL_RESTORE
}

model PluginMigrationExecution {
  id              String           @id @default(cuid())
  pluginVersionId String
  type            MigrationType
  script          String           // migration script content
  status          MigrationStatus  @default(PENDING)
  output          String?          // execution output/logs
  error           String?
  executionTime   Int?             // milliseconds
  rollbackScript  String?          // rollback script if available
  executedBy      String?
  executedAt      DateTime?
  createdAt       DateTime         @default(now())

  pluginVersion PluginVersion @relation(fields: [pluginVersionId], references: [id], onDelete: Cascade)

  @@index([pluginVersionId, type])
  @@map("plugin_migration_executions")
}

enum MigrationType {
  DATABASE_SCHEMA
  CONFIGURATION
  FILE_SYSTEM
  PERMISSIONS
  DEPENDENCIES
  CUSTOM
}

enum MigrationStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  ROLLED_BACK
  SKIPPED
}

// Plugin Dependencies and Relationships
model PluginDependency {
  id              String         @id @default(cuid())
  pluginId        String
  dependsOnId     String
  dependencyType  DependencyType @default(SOFT)
  versionRange    String?        // semver range
  isOptional      Boolean        @default(false)
  isDevOnly       Boolean        @default(false)
  conflictsWith   String[]       @default([])
  metadata        Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  plugin      Plugin @relation("PluginDependencies", fields: [pluginId], references: [id], onDelete: Cascade)
  dependsOn   Plugin @relation("DependentPlugins", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([pluginId, dependsOnId])
  @@index([pluginId])
  @@index([dependsOnId])
  @@map("plugin_dependencies")
}

// Plugin Environment Configuration
model PluginEnvironment {
  id            String              @id @default(cuid())
  pluginId      String
  environment   String              @default("production")
  isActive      Boolean             @default(true)
  configuration Json
  secrets       Json?               // encrypted secrets
  variables     Json?               // environment variables
  resources     Json?               // resource limits/requests
  scaling       Json?               // scaling configuration
  health        Json?               // health check configuration
  deployment    DeploymentStrategy  @default(ROLLING)
  createdBy     String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, environment])
  @@index([pluginId])
  @@index([environment])
  @@map("plugin_environments")
}

// Plugin Governance and Approval Workflows
model PluginGovernance {
  id              String            @id @default(cuid())
  pluginId        String
  tenantId        String
  policyVersion   String            @default("1.0")
  requiredApprovals Int             @default(1)
  approvers       String[]          // List of approver user IDs
  reviewers       String[]          // List of reviewer user IDs
  securityReview  Boolean           @default(true)
  complianceReview Boolean          @default(false)
  autoApproval    Boolean           @default(false)
  exemptions      Json?             // Policy exemptions
  metadata        Json?
  isActive        Boolean           @default(true)
  createdBy       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  plugin    Plugin             @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  approvals PluginApproval[]

  @@unique([pluginId, tenantId])
  @@index([tenantId])
  @@map("plugin_governance")
}

model PluginApproval {
  id              String           @id @default(cuid())
  governanceId    String
  pluginVersionId String?
  requestType     ApprovalType
  status          ApprovalStatus   @default(PENDING)
  requestedBy     String
  approvedBy      String?
  reviewedBy      String?
  priority        ApprovalPriority @default(MEDIUM)
  reason          String?
  comments        Json?            // Array of review comments
  requirements    Json?            // Approval requirements checklist
  evidence        Json?            // Supporting evidence/documents
  expiresAt       DateTime?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  governance    PluginGovernance @relation(fields: [governanceId], references: [id], onDelete: Cascade)
  pluginVersion PluginVersion?   @relation(fields: [pluginVersionId], references: [id])

  @@index([status, priority])
  @@index([requestedBy])
  @@index([approvedBy])
  @@map("plugin_approvals")
}

enum ApprovalType {
  INSTALL
  UPDATE
  CONFIGURATION_CHANGE
  UNINSTALL
  SECURITY_EXEMPTION
  POLICY_OVERRIDE
  EMERGENCY_DEPLOYMENT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  CANCELLED
  CONDITIONALLY_APPROVED
}

enum ApprovalPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EMERGENCY
}

// Plugin Analytics and Usage Tracking
model PluginAnalytics {
  id              String   @id @default(cuid())
  pluginId        String
  tenantId        String?
  userId          String?
  event           AnalyticsEvent
  environment     String   @default("production")
  version         String?
  sessionId       String?
  userAgent       String?
  ipAddress       String?
  country         String?
  region          String?
  metadata        Json?    // Additional event metadata
  duration        Int?     // Event duration in milliseconds
  errorCode       String?  // Error code if applicable
  errorMessage    String?  // Error message if applicable
  timestamp       DateTime @default(now())

  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@index([pluginId, timestamp])
  @@index([event, timestamp])
  @@index([tenantId, timestamp])
  @@index([userId, timestamp])
  @@map("plugin_analytics")
}

enum AnalyticsEvent {
  VIEW
  INSTALL
  UNINSTALL
  ENABLE
  DISABLE
  CONFIGURE
  UPDATE
  ERROR
  PERFORMANCE_ISSUE
  SECURITY_ALERT
  USER_INTERACTION
  API_CALL
  RENDER
  LOAD
  CRASH
}

// Plugin Performance Monitoring
model PluginPerformance {
  id              String        @id @default(cuid())
  pluginId        String
  environment     String        @default("production")
  version         String?
  metricType      PerformanceMetric
  value           Float
  unit            String
  percentile      Float?        // P50, P95, P99 values
  threshold       Float?        // Performance threshold
  isAlert         Boolean       @default(false)
  tags            Json?         // Additional tags
  timestamp       DateTime      @default(now())
  sampledAt       DateTime      @default(now())

  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@index([pluginId, metricType, timestamp])
  @@index([environment, timestamp])
  @@index([metricType, isAlert])
  @@map("plugin_performance")
}

enum PerformanceMetric {
  LOAD_TIME
  RENDER_TIME
  MEMORY_USAGE
  CPU_USAGE
  NETWORK_LATENCY
  ERROR_RATE
  THROUGHPUT
  RESPONSE_TIME
  BUNDLE_SIZE
  CACHE_HIT_RATE
  GARBAGE_COLLECTION
  DATABASE_QUERY_TIME
}

// Plugin Security and Vulnerabilities
model PluginVulnerability {
  id              String            @id @default(cuid())
  pluginId        String
  cveId           String?           // CVE identifier
  severity        VulnerabilitySeverity
  score           Float?            // CVSS score
  title           String
  description     String
  affectedVersions String[]
  patchedVersions String[]         @default([])
  workaround      String?
  exploitability  String?
  impact          Json?             // Impact assessment
  references      String[]          @default([])
  status          VulnerabilityStatus @default(OPEN)
  discoveredBy    String?
  reportedAt      DateTime?
  patchedAt       DateTime?
  acknowledgedAt  DateTime?
  resolvedAt      DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@index([pluginId, severity])
  @@index([status, severity])
  @@index([cveId])
  @@map("plugin_vulnerabilities")
}

enum VulnerabilitySeverity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  INFO
}

enum VulnerabilityStatus {
  OPEN
  ACKNOWLEDGED
  IN_PROGRESS
  PATCHED
  RESOLVED
  DISMISSED
  FALSE_POSITIVE
}

// Plugin Testing and Quality Assurance
model PluginTestResult {
  id              String     @id @default(cuid())
  pluginId        String
  pluginVersionId String?
  testSuite       String
  testType        TestType
  environment     String     @default("test")
  status          TestStatus
  passed          Int        @default(0)
  failed          Int        @default(0)
  skipped         Int        @default(0)
  coverage        Float?     // Code coverage percentage
  duration        Int?       // Test duration in milliseconds
  artifacts       Json?      // Test artifacts (screenshots, logs, etc.)
  results         Json?      // Detailed test results
  logs            String?    // Test execution logs
  executedBy      String?
  executedAt      DateTime   @default(now())
  createdAt       DateTime   @default(now())

  plugin        Plugin         @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  pluginVersion PluginVersion? @relation(fields: [pluginVersionId], references: [id])

  @@index([pluginId, testType, status])
  @@index([status, executedAt])
  @@map("plugin_test_results")
}

enum TestType {
  UNIT
  INTEGRATION
  E2E
  PERFORMANCE
  SECURITY
  ACCESSIBILITY
  COMPATIBILITY
  SMOKE
  REGRESSION
  LOAD
}

enum TestStatus {
  PENDING
  RUNNING
  PASSED
  FAILED
  UNSTABLE
  CANCELLED
  SKIPPED
}

// Plugin Alerts and Notifications
model PluginAlert {
  id              String        @id @default(cuid())
  pluginId        String
  alertType       AlertType
  severity        AlertSeverity
  title           String
  message         String
  details         Json?         // Additional alert details
  threshold       Float?        // Alert threshold value
  currentValue    Float?        // Current metric value
  environment     String        @default("production")
  isActive        Boolean       @default(true)
  isMuted         Boolean       @default(false)
  acknowledgedBy  String?
  acknowledgedAt  DateTime?
  resolvedBy      String?
  resolvedAt      DateTime?
  mutedUntil      DateTime?
  escalatedAt     DateTime?
  escalationLevel Int           @default(0)
  notificationChannels Json?    // Channels to notify
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@index([pluginId, severity, isActive])
  @@index([alertType, isActive])
  @@index([environment, severity])
  @@map("plugin_alerts")
}

// Plugin Workflow Automation
model PluginWorkflow {
  id              String         @id @default(cuid())
  pluginId        String
  name            String
  description     String?
  trigger         WorkflowTrigger
  conditions      Json?          // Workflow conditions
  actions         Json           // Workflow actions
  schedule        String?        // Cron schedule for scheduled workflows
  isActive        Boolean        @default(true)
  lastRunAt       DateTime?
  lastRunStatus   WorkflowStatus?
  lastRunDuration Int?           // Last run duration in milliseconds
  successCount    Int            @default(0)
  failureCount    Int            @default(0)
  createdBy       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  plugin Plugin               @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  executions PluginWorkflowExecution[]

  @@index([pluginId, isActive])
  @@index([trigger])
  @@map("plugin_workflows")
}

model PluginWorkflowExecution {
  id              String         @id @default(cuid())
  workflowId      String
  trigger         WorkflowTrigger
  status          WorkflowStatus @default(PENDING)
  input           Json?          // Workflow input data
  output          Json?          // Workflow output data
  error           String?        // Error message if failed
  duration        Int?           // Execution duration in milliseconds
  startedAt       DateTime       @default(now())
  completedAt     DateTime?

  workflow PluginWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId, startedAt])
  @@index([status])
  @@map("plugin_workflow_executions")
}

enum WorkflowTrigger {
  MANUAL
  SCHEDULED
  ON_INSTALL
  ON_UPDATE
  ON_CONFIGURE
  ON_ERROR
  ON_PERFORMANCE_ALERT
  ON_SECURITY_ALERT
  ON_APPROVAL
  WEBHOOK
}

enum WorkflowStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  SKIPPED
}

// Disaster Recovery Configuration
model DisasterRecoveryPlan {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  scope             Json     // which plugins/services included
  backupSchedule    String   // cron expression
  retentionPolicy   Json     // retention configuration
  storageProviders  Json     // primary and backup storage configs
  alertChannels     Json     // notification configurations
  testSchedule      String?  // DR test schedule
  lastTestAt        DateTime?
  nextTestAt        DateTime?
  isActive          Boolean  @default(true)
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  executions DisasterRecoveryExecution[]

  @@map("disaster_recovery_plans")
}

model DisasterRecoveryExecution {
  id              String                    @id @default(cuid())
  planId          String
  type            DisasterRecoveryType
  status          DisasterRecoveryStatus    @default(PENDING)
  triggerReason   String?                   // what triggered this execution
  scope           Json?                     // what was recovered
  metrics         Json?                     // recovery metrics
  verificationResults Json?                 // verification results
  error           String?
  startedAt       DateTime                  @default(now())
  completedAt     DateTime?
  executedBy      String?

  plan DisasterRecoveryPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId, startedAt])
  @@map("disaster_recovery_executions")
}

enum DisasterRecoveryType {
  FULL_BACKUP
  INCREMENTAL_BACKUP
  RESTORE_TEST
  ACTUAL_RECOVERY
  SCHEDULED_TEST
}

enum DisasterRecoveryStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  VERIFIED
}

// ============================================
// BILLING AND MONETIZATION MODELS
// ============================================

// Organization Billing Account
model Organization {
  id                String   @id @default(cuid())
  name              String   @unique
  displayName       String
  taxId             String?
  billingEmail      String
  billingAddress    Json?    // Address details
  country           String
  currency          String   @default("USD")
  stripeCustomerId  String?  @unique
  paymentMethodId   String?
  defaultPaymentMethod String?
  creditBalance     Decimal  @default(0) @db.Decimal(10, 2)
  creditLimit       Decimal  @default(0) @db.Decimal(10, 2)
  billingCycle      BillingCycle @default(MONTHLY)
  status            OrganizationStatus @default(ACTIVE)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  subscriptions     Subscription[]
  invoices          Invoice[]
  payments          Payment[]
  usageRecords      ResourceUsage[]
  costAllocations   CostAllocation[]
  budgets           OrganizationBudget[]
  billingAlerts     BillingAlert[]
  marketplacePlugins MarketplacePlugin[]
  payouts           DeveloperPayout[]

  @@map("organizations")
}

enum OrganizationStatus {
  ACTIVE
  SUSPENDED
  DELINQUENT
  CANCELLED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  ANNUAL
}

// Subscription Management
model Subscription {
  id               String   @id @default(cuid())
  organizationId   String
  planId           String
  stripeSubscriptionId String? @unique
  status           SubscriptionStatus @default(TRIALING)
  currentPeriodStart DateTime
  currentPeriodEnd DateTime
  cancelAtPeriodEnd Boolean @default(false)
  cancelledAt      DateTime?
  trialStart       DateTime?
  trialEnd         DateTime?
  quantity         Int      @default(1)
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  organization     Organization @relation(fields: [organizationId], references: [id])
  plan             BillingPlan  @relation(fields: [planId], references: [id])
  usageRecords     ResourceUsage[]
  subscriptionItems SubscriptionItem[]
  discounts        SubscriptionDiscount[]

  @@map("subscriptions")
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELLED
  UNPAID
  INCOMPLETE
}

model SubscriptionItem {
  id               String   @id @default(cuid())
  subscriptionId   String
  productId        String
  stripeItemId     String?
  quantity         Int      @default(1)
  unitPrice        Decimal  @db.Decimal(10, 2)
  createdAt        DateTime @default(now())

  subscription     Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("subscription_items")
}

// Billing Plans
model BillingPlan {
  id               String   @id @default(cuid())
  name             String   @unique
  displayName      String
  description      String?
  tier             PlanTier
  monthlyPrice     Decimal  @db.Decimal(10, 2)
  annualPrice      Decimal  @db.Decimal(10, 2)
  setupFee         Decimal  @default(0) @db.Decimal(10, 2)
  currency         String   @default("USD")
  trialDays        Int      @default(0)
  features         Json     // List of features
  limits           Json     // Resource limits
  overage          Json     // Overage pricing
  stripePriceId    String?
  stripeProductId  String?
  isActive         Boolean  @default(true)
  isPublic         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  subscriptions    Subscription[]
  usageTiers       UsageTier[]

  @@map("billing_plans")
}

enum PlanTier {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

// Usage-Based Pricing Tiers
model UsageTier {
  id               String   @id @default(cuid())
  planId           String
  resourceType     ResourceType
  minUnits         Int
  maxUnits         Int?
  pricePerUnit     Decimal  @db.Decimal(10, 4)
  flatFee          Decimal  @default(0) @db.Decimal(10, 2)

  plan             BillingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("usage_tiers")
}

// Resource Usage Tracking
model ResourceUsage {
  id               String   @id @default(cuid())
  organizationId   String
  subscriptionId   String?
  pluginId         String?
  resourceType     ResourceType
  quantity         Decimal  @db.Decimal(12, 4)
  unit             String
  cost             Decimal  @db.Decimal(10, 2)
  period           DateTime
  metadata         Json?
  createdAt        DateTime @default(now())

  // Relationships
  organization     Organization @relation(fields: [organizationId], references: [id])
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
  plugin           Plugin? @relation(fields: [pluginId], references: [id])

  @@index([organizationId, period])
  @@index([resourceType, period])
  @@map("resource_usage")
}

enum ResourceType {
  COMPUTE_HOURS
  STORAGE_GB
  NETWORK_GB
  API_CALLS
  CONTAINERS
  USERS
  PLUGINS
  DEPLOYMENTS
  BUILDS
  CUSTOM
}

// Invoices
model Invoice {
  id               String   @id @default(cuid())
  organizationId   String
  invoiceNumber    String   @unique
  stripeInvoiceId  String?  @unique
  status           InvoiceStatus @default(DRAFT)
  dueDate          DateTime
  periodStart      DateTime
  periodEnd        DateTime
  subtotal         Decimal  @db.Decimal(10, 2)
  tax              Decimal  @default(0) @db.Decimal(10, 2)
  discount         Decimal  @default(0) @db.Decimal(10, 2)
  total            Decimal  @db.Decimal(10, 2)
  currency         String   @default("USD")
  paidAt           DateTime?
  voidedAt         DateTime?
  notes            String?
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  organization     Organization @relation(fields: [organizationId], references: [id])
  lineItems        InvoiceLineItem[]
  payments         Payment[]
  creditNotes      CreditNote[]

  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

model InvoiceLineItem {
  id               String   @id @default(cuid())
  invoiceId        String
  description      String
  quantity         Decimal  @db.Decimal(12, 4)
  unitPrice        Decimal  @db.Decimal(10, 4)
  amount           Decimal  @db.Decimal(10, 2)
  taxRate          Decimal  @default(0) @db.Decimal(5, 2)
  metadata         Json?

  invoice          Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_line_items")
}

// Payments
model Payment {
  id               String   @id @default(cuid())
  organizationId   String
  invoiceId        String?
  stripePaymentId  String?  @unique
  amount           Decimal  @db.Decimal(10, 2)
  currency         String   @default("USD")
  status           PaymentStatus @default(PENDING)
  method           PaymentMethod
  failureReason    String?
  refundedAmount   Decimal  @default(0) @db.Decimal(10, 2)
  metadata         Json?
  processedAt      DateTime?
  createdAt        DateTime @default(now())

  // Relationships
  organization     Organization @relation(fields: [organizationId], references: [id])
  invoice          Invoice? @relation(fields: [invoiceId], references: [id])
  refunds          Refund[]

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  PAYPAL
  WIRE_TRANSFER
  CREDIT
  OTHER
}

// Refunds
model Refund {
  id               String   @id @default(cuid())
  paymentId        String
  stripeRefundId   String?  @unique
  amount           Decimal  @db.Decimal(10, 2)
  reason           RefundReason
  status           RefundStatus @default(PENDING)
  notes            String?
  processedAt      DateTime?
  createdAt        DateTime @default(now())

  payment          Payment @relation(fields: [paymentId], references: [id])

  @@map("refunds")
}

enum RefundReason {
  DUPLICATE
  FRAUDULENT
  REQUESTED_BY_CUSTOMER
  SERVICE_ISSUE
  OTHER
}

enum RefundStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
}

// Credit Notes
model CreditNote {
  id               String   @id @default(cuid())
  invoiceId        String
  creditNoteNumber String   @unique
  amount           Decimal  @db.Decimal(10, 2)
  reason           String
  status           CreditNoteStatus @default(ISSUED)
  appliedAt        DateTime?
  voidedAt         DateTime?
  createdAt        DateTime @default(now())

  invoice          Invoice @relation(fields: [invoiceId], references: [id])

  @@map("credit_notes")
}

enum CreditNoteStatus {
  ISSUED
  APPLIED
  VOIDED
}

// Discounts and Coupons
model Coupon {
  id               String   @id @default(cuid())
  code             String   @unique
  name             String
  description      String?
  discountType     DiscountType
  discountValue    Decimal  @db.Decimal(10, 2)
  maxRedemptions   Int?
  redemptionCount  Int      @default(0)
  validFrom        DateTime
  validUntil       DateTime
  restrictions     Json?    // Plan restrictions, minimum amount, etc.
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())

  discounts        SubscriptionDiscount[]

  @@map("coupons")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_TRIAL_EXTENSION
}

model SubscriptionDiscount {
  id               String   @id @default(cuid())
  subscriptionId   String
  couponId         String
  appliedAt        DateTime @default(now())
  expiresAt        DateTime?

  subscription     Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  coupon           Coupon @relation(fields: [couponId], references: [id])

  @@unique([subscriptionId, couponId])
  @@map("subscription_discounts")
}

// Cost Allocation and Chargeback
model CostAllocation {
  id               String   @id @default(cuid())
  organizationId   String
  teamId           String
  costCenterId     String?
  period           DateTime
  allocatedCost    Decimal  @db.Decimal(10, 2)
  actualCost       Decimal  @db.Decimal(10, 2)
  currency         String   @default("USD")
  breakdown        Json     // Detailed cost breakdown
  approvedBy       String?
  approvedAt       DateTime?
  status           AllocationStatus @default(PENDING)
  createdAt        DateTime @default(now())

  organization     Organization @relation(fields: [organizationId], references: [id])
  team             Team @relation(fields: [teamId], references: [id])
  costCenter       CostCenter? @relation(fields: [costCenterId], references: [id])

  @@index([organizationId, period])
  @@index([teamId, period])
  @@map("cost_allocations")
}

enum AllocationStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

model CostCenter {
  id               String   @id @default(cuid())
  name             String   @unique
  code             String   @unique
  description      String?
  budget           Decimal  @db.Decimal(10, 2)
  currency         String   @default("USD")
  managerId        String
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  allocations      CostAllocation[]

  @@map("cost_centers")
}

// Marketplace and Revenue Sharing
model MarketplacePlugin {
  id               String   @id @default(cuid())
  pluginId         String   @unique
  developerId      String
  organizationId   String
  pricingModel     PricingModel
  basePrice        Decimal  @db.Decimal(10, 2)
  currency         String   @default("USD")
  revenueShare     Decimal  @db.Decimal(5, 2) // Percentage
  tier             MarketplaceTier
  stripeProductId  String?
  stripePriceId    String?
  isActive         Boolean  @default(true)
  isApproved       Boolean  @default(false)
  publishedAt      DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  plugin           Plugin @relation(fields: [pluginId], references: [id])
  organization     Organization @relation(fields: [organizationId], references: [id])
  sales            PluginSale[]
  reviews          PluginReview[]

  @@map("marketplace_plugins")
}

enum PricingModel {
  FREE
  ONE_TIME
  SUBSCRIPTION
  USAGE_BASED
  FREEMIUM
}

enum MarketplaceTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model PluginSale {
  id               String   @id @default(cuid())
  marketplacePluginId String
  buyerOrgId       String
  amount           Decimal  @db.Decimal(10, 2)
  commission       Decimal  @db.Decimal(10, 2)
  netAmount        Decimal  @db.Decimal(10, 2)
  currency         String   @default("USD")
  status           SaleStatus @default(PENDING)
  paymentId        String?
  createdAt        DateTime @default(now())

  marketplacePlugin MarketplacePlugin @relation(fields: [marketplacePluginId], references: [id])

  @@map("plugin_sales")
}

enum SaleStatus {
  PENDING
  COMPLETED
  REFUNDED
  CANCELLED
}

model DeveloperPayout {
  id               String   @id @default(cuid())
  organizationId   String
  period           DateTime
  amount           Decimal  @db.Decimal(10, 2)
  currency         String   @default("USD")
  status           PayoutStatus @default(PENDING)
  stripeTransferId String?
  processedAt      DateTime?
  notes            String?
  createdAt        DateTime @default(now())

  organization     Organization @relation(fields: [organizationId], references: [id])

  @@map("developer_payouts")
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Plugin Reviews (for marketplace)
model PluginReview {
  id               String   @id @default(cuid())
  marketplacePluginId String
  userId           String
  rating           Int      // 1-5
  title            String?
  comment          String?
  isVerifiedPurchase Boolean @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  marketplacePlugin MarketplacePlugin @relation(fields: [marketplacePluginId], references: [id])

  @@map("plugin_reviews")
}

// Budget Management
model OrganizationBudget {
  id               String   @id @default(cuid())
  organizationId   String
  name             String
  amount           Decimal  @db.Decimal(10, 2)
  spent            Decimal  @default(0) @db.Decimal(10, 2)
  period           BudgetPeriod
  resourceType     ResourceType?
  alertThreshold   Decimal  @db.Decimal(5, 2) // Percentage
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  organization     Organization @relation(fields: [organizationId], references: [id])
  alerts           BillingAlert[]

  @@map("organization_budgets")
}

// Billing Alerts
model BillingAlert {
  id               String   @id @default(cuid())
  organizationId   String
  budgetId         String?
  type             AlertType
  threshold        Decimal  @db.Decimal(10, 2)
  currentValue     Decimal  @db.Decimal(10, 2)
  message          String
  severity         AlertSeverity
  acknowledged     Boolean  @default(false)
  acknowledgedBy   String?
  acknowledgedAt   DateTime?
  createdAt        DateTime @default(now())

  organization     Organization @relation(fields: [organizationId], references: [id])
  budget           OrganizationBudget? @relation(fields: [budgetId], references: [id])

  @@map("billing_alerts")
}

enum AlertType {
  BUDGET_EXCEEDED
  BUDGET_THRESHOLD
  PAYMENT_FAILED
  SUBSCRIPTION_EXPIRING
  UNUSUAL_USAGE
  CREDIT_LOW
}

enum AlertSeverity {
  INFO
  WARNING
  CRITICAL
}

// Tax Configuration
model TaxRate {
  id               String   @id @default(cuid())
  country          String
  state            String?
  rate             Decimal  @db.Decimal(5, 2)
  name             String
  description      String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([country, state])
  @@map("tax_rates")
}

// Billing Events (for audit and webhooks)
model BillingEvent {
  id               String   @id @default(cuid())
  organizationId   String?
  eventType        String
  eventData        Json
  stripeEventId    String?  @unique
  processed        Boolean  @default(false)
  processedAt      DateTime?
  error            String?
  createdAt        DateTime @default(now())

  @@index([eventType, processed])
  @@map("billing_events")
}